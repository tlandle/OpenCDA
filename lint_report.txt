************* Module OpenCDA.opencda.logging_ecloud
opencda/logging_ecloud.py:7:0: W0311: Bad indentation. Found 3 spaces, expected 4 (bad-indentation)
opencda/logging_ecloud.py:8:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/logging_ecloud.py:27:64: C0303: Trailing whitespace (trailing-whitespace)
opencda/logging_ecloud.py:45:0: C0305: Trailing newlines (trailing-newlines)
opencda/logging_ecloud.py:1:0: C0114: Missing module docstring (missing-module-docstring)
************* Module OpenCDA.opencda.opencda_carla
opencda/opencda_carla.py:24:8: C0103: Attribute name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/opencda_carla.py:24:16: C0103: Attribute name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/opencda_carla.py:24:24: C0103: Attribute name "z" doesn't conform to snake_case naming style (invalid-name)
opencda/opencda_carla.py:11:0: R0205: Class 'Vector3D' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/opencda_carla.py:23:23: C0103: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/opencda_carla.py:23:37: C0103: Argument name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/opencda_carla.py:23:51: C0103: Argument name "z" doesn't conform to snake_case naming style (invalid-name)
opencda/opencda_carla.py:36:8: W0621: Redefining name 'Vector3D' from outer scope (line 11) (redefined-outer-name)
opencda/opencda_carla.py:36:8: C0415: Import outside toplevel (carla.Vector3D) (import-outside-toplevel)
opencda/opencda_carla.py:36:8: E0611: No name 'Vector3D' in module 'carla' (no-name-in-module)
opencda/opencda_carla.py:11:0: R0903: Too few public methods (1/2) (too-few-public-methods)
opencda/opencda_carla.py:56:4: W0246: Useless parent or super() delegation in method '__init__' (useless-parent-delegation)
opencda/opencda_carla.py:57:8: R1725: Consider using Python 3 style super() without arguments (super-with-arguments)
opencda/opencda_carla.py:69:8: W0621: Redefining name 'Location' from outer scope (line 42) (redefined-outer-name)
opencda/opencda_carla.py:69:8: W0621: Redefining name 'Vector3D' from outer scope (line 11) (redefined-outer-name)
opencda/opencda_carla.py:69:8: C0415: Import outside toplevel (carla.Location, carla.Vector3D) (import-outside-toplevel)
opencda/opencda_carla.py:69:8: E0611: No name 'Location' in module 'carla' (no-name-in-module)
opencda/opencda_carla.py:69:8: E0611: No name 'Vector3D' in module 'carla' (no-name-in-module)
opencda/opencda_carla.py:70:16: R1701: Consider merging these isinstance calls to isinstance(location, (Location, Vector3D)) (consider-merging-isinstance)
opencda/opencda_carla.py:76:0: R0205: Class 'Rotation' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/opencda_carla.py:110:8: W0621: Redefining name 'Rotation' from outer scope (line 76) (redefined-outer-name)
opencda/opencda_carla.py:110:8: C0415: Import outside toplevel (carla.Rotation) (import-outside-toplevel)
opencda/opencda_carla.py:110:8: E0611: No name 'Rotation' in module 'carla' (no-name-in-module)
opencda/opencda_carla.py:76:0: R0903: Too few public methods (1/2) (too-few-public-methods)
opencda/opencda_carla.py:116:0: R0205: Class 'Transform' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/opencda_carla.py:154:8: W0621: Redefining name 'Transform' from outer scope (line 116) (redefined-outer-name)
opencda/opencda_carla.py:154:8: C0415: Import outside toplevel (carla.Transform) (import-outside-toplevel)
opencda/opencda_carla.py:154:8: E0611: No name 'Transform' in module 'carla' (no-name-in-module)
opencda/opencda_carla.py:116:0: R0903: Too few public methods (1/2) (too-few-public-methods)
************* Module OpenCDA.opencda.sim_debug_helper
opencda/sim_debug_helper.py:40:50: C0303: Trailing whitespace (trailing-whitespace)
opencda/sim_debug_helper.py:42:42: C0303: Trailing whitespace (trailing-whitespace)
opencda/sim_debug_helper.py:61:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/sim_debug_helper.py:66:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/sim_debug_helper.py:71:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/sim_debug_helper.py:76:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/sim_debug_helper.py:12:0: R0902: Too many instance attributes (11/7) (too-many-instance-attributes)
opencda/sim_debug_helper.py:30:8: R1725: Consider using Python 3 style super() without arguments (super-with-arguments)
opencda/sim_debug_helper.py:44:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/sim_debug_helper.py:47:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/sim_debug_helper.py:50:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/sim_debug_helper.py:53:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/sim_debug_helper.py:56:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/sim_debug_helper.py:59:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/sim_debug_helper.py:64:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/sim_debug_helper.py:69:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/sim_debug_helper.py:74:4: C0116: Missing function or method docstring (missing-function-docstring)
************* Module OpenCDA.opencda.client_debug_helper
opencda/client_debug_helper.py:58:30: C0303: Trailing whitespace (trailing-whitespace)
opencda/client_debug_helper.py:68:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/client_debug_helper.py:134:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/client_debug_helper.py:167:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/client_debug_helper.py:173:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/client_debug_helper.py:176:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/client_debug_helper.py:179:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/client_debug_helper.py:206:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/client_debug_helper.py:210:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/client_debug_helper.py:214:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/client_debug_helper.py:218:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/client_debug_helper.py:222:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/client_debug_helper.py:157:9: W0511: TODO: extend instead of append? or [:] = ? (fixme)
opencda/client_debug_helper.py:13:0: R0902: Too many instance attributes (11/7) (too-many-instance-attributes)
opencda/client_debug_helper.py:31:8: R1725: Consider using Python 3 style super() without arguments (super-with-arguments)
opencda/client_debug_helper.py:57:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/client_debug_helper.py:151:8: C0103: Variable name "t" doesn't conform to snake_case naming style (invalid-name)
opencda/client_debug_helper.py:187:12: C0103: Variable name "t" doesn't conform to snake_case naming style (invalid-name)
opencda/client_debug_helper.py:233:12: C0103: Variable name "t" doesn't conform to snake_case naming style (invalid-name)
************* Module OpenCDA.opencda.co_simulation.__init__
opencda/co_simulation/__init__.py:2:0: C0301: Line too long (108/100) (line-too-long)
************* Module OpenCDA.opencda.co_simulation.sumo_integration.carla_simulation
opencda/co_simulation/sumo_integration/carla_simulation.py:26:0: R0205: Class 'CarlaSimulation' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/co_simulation/sumo_integration/carla_simulation.py:26:0: R0902: Too many instance attributes (8/7) (too-many-instance-attributes)
opencda/co_simulation/sumo_integration/carla_simulation.py:77:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/co_simulation/sumo_integration/carla_simulation.py:173:25: R1718: Consider using a set comprehension (consider-using-set-comprehension)
************* Module OpenCDA.opencda.co_simulation.sumo_integration.sumo_simulation
opencda/co_simulation/sumo_integration/sumo_simulation.py:33:0: R0205: Class 'SumoSignalState' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/co_simulation/sumo_integration/sumo_simulation.py:33:0: R0903: Too few public methods (0/2) (too-few-public-methods)
opencda/co_simulation/sumo_integration/sumo_simulation.py:48:0: R0205: Class 'SumoVehSignal' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/co_simulation/sumo_integration/sumo_simulation.py:48:0: R0903: Too few public methods (0/2) (too-few-public-methods)
opencda/co_simulation/sumo_integration/sumo_simulation.py:109:0: R0205: Class 'SumoTLLogic' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/co_simulation/sumo_integration/sumo_simulation.py:157:0: R0205: Class 'SumoTLManager' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/co_simulation/sumo_integration/sumo_simulation.py:174:16: C0103: Variable name "tl" doesn't conform to snake_case naming style (invalid-name)
opencda/co_simulation/sumo_integration/sumo_simulation.py:240:12: C0103: Variable name "tl" doesn't conform to snake_case naming style (invalid-name)
opencda/co_simulation/sumo_integration/sumo_simulation.py:243:8: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
opencda/co_simulation/sumo_integration/sumo_simulation.py:296:11: I1101: Module 'lxml.etree' has no 'parse' member, but source is unavailable. Consider adding this module to extension-pkg-allow-list if you want to perform analysis based on run-time introspection of living objects. (c-extension-no-member)
opencda/co_simulation/sumo_integration/sumo_simulation.py:307:0: R0205: Class 'SumoSimulation' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/co_simulation/sumo_integration/sumo_simulation.py:311:4: R0913: Too many arguments (7/5) (too-many-arguments)
opencda/co_simulation/sumo_integration/sumo_simulation.py:351:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/co_simulation/sumo_integration/sumo_simulation.py:25:0: C0411: third party import "import lxml.etree as ET" should be placed before "from opencda.co_simulation.sumo_integration.constants import INVALID_ACTOR_ID" (wrong-import-order)
************* Module OpenCDA.opencda.co_simulation.sumo_integration.bridge_helper
opencda/co_simulation/sumo_integration/bridge_helper.py:30:0: R0205: Class 'BridgeHelper' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/co_simulation/sumo_integration/bridge_helper.py:41:9: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
opencda/co_simulation/sumo_integration/bridge_helper.py:126:24: E1101: Instance of 'list' has no 'filter' member (no-member)
opencda/co_simulation/sumo_integration/bridge_helper.py:141:24: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/co_simulation/sumo_integration/bridge_helper.py:339:8: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
opencda/co_simulation/sumo_integration/bridge_helper.py:339:11: R1714: Consider merging these comparisons with 'in' by using 'sumo_tl_state in (SumoSignalState.RED, SumoSignalState.RED_YELLOW)'. Use a set instead if elements are hashable. (consider-using-in)
opencda/co_simulation/sumo_integration/bridge_helper.py:345:13: R1714: Consider merging these comparisons with 'in' by using 'sumo_tl_state in (SumoSignalState.GREEN, SumoSignalState.GREEN_WITHOUT_PRIORITY)'. Use a set instead if elements are hashable. (consider-using-in)
opencda/co_simulation/sumo_integration/bridge_helper.py:360:8: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
************* Module OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car_perception
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car_perception.py:44:0: C0301: Line too long (108/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car_perception.py:44:0: C0325: Unnecessary parens after 'assert' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car_perception.py:45:0: C0301: Line too long (105/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car_perception.py:46:0: C0301: Line too long (130/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car_perception.py:47:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car_perception.py:62:0: C0301: Line too long (103/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car_perception.py:65:91: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car_perception.py:66:13: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car_perception.py:82:16: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car_perception.py:97:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car_perception.py:100:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car_perception.py:101:17: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car_perception.py:113:25: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car_perception.py:125:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car_perception.py:131:61: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car_perception.py:24:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car_perception.py:39:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car_perception.py:45:59: C0121: Comparison 'scenario_params['world']['sync_mode'] == True' should be 'scenario_params['world']['sync_mode'] is True' if checking for the singleton value True, or 'bool(scenario_params['world']['sync_mode'])' if testing for truthiness (singleton-comparison)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car_perception.py:86:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car_perception.py:119:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car_perception.py:126:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car_perception.py:126:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car_perception.py:130:12: W0702: No exception type(s) specified (bare-except)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car_perception.py:39:0: R0912: Too many branches (13/12) (too-many-branches)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car_perception.py:71:8: W0612: Unused variable 'traffic_manager' (unused-variable)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car_perception.py:18:0: W0611: Unused import os (unused-import)
************* Module OpenCDA.opencda.scenario_testing.ecloud_4lane_8car_scenario
opencda/scenario_testing/ecloud_4lane_8car_scenario.py:13:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_4lane_8car_scenario.py:19:0: W0404: Reimport 'opencda.scenario_testing.utils.sim_api' (imported line 13) (reimported)
opencda/scenario_testing/ecloud_4lane_8car_scenario.py:19:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_4lane_8car_scenario.py:25:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/ecloud_4lane_8car_scenario.py:77:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_8car_scenario.py:83:23: E0602: Undefined variable 'platoon_list' (undefined-variable)
opencda/scenario_testing/ecloud_4lane_8car_scenario.py:85:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/ecloud_4lane_8car_scenario.py:85:17: E0602: Undefined variable 'bg_veh_list' (undefined-variable)
opencda/scenario_testing/ecloud_4lane_8car_scenario.py:70:16: W0612: Unused variable 'i' (unused-variable)
opencda/scenario_testing/ecloud_4lane_8car_scenario.py:14:0: W0611: Unused opencda.scenario_testing.utils.customized_map_api imported as map_api (unused-import)
************* Module OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist
opencda/scenario_testing/ecloud_4lane_scenario_dist.py:55:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist.py:66:0: C0301: Line too long (134/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist.py:87:19: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist.py:66:13: W0511: TODO eCloud - figure out another way to have the vehicle follow a CAV. Perhaps still access the bp since it's read only? (fixme)
opencda/scenario_testing/ecloud_4lane_scenario_dist.py:87:9: W0511: TODO gRPC     (fixme)
opencda/scenario_testing/ecloud_4lane_scenario_dist.py:13:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_4lane_scenario_dist.py:22:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/ecloud_4lane_scenario_dist.py:93:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_scenario_dist.py:100:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/ecloud_4lane_scenario_dist.py:100:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_scenario_dist.py:44:8: W0612: Unused variable 'traffic_manager' (unused-variable)
opencda/scenario_testing/ecloud_4lane_scenario_dist.py:8:0: W0611: Unused import os (unused-import)
opencda/scenario_testing/ecloud_4lane_scenario_dist.py:11:0: W0611: Unused VehicleManagerProxy imported from opencda.core.common.vehicle_manager_proxy (unused-import)
opencda/scenario_testing/ecloud_4lane_scenario_dist.py:14:0: W0611: Unused opencda.scenario_testing.utils.customized_map_api imported as map_api (unused-import)
************* Module OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car.py:44:0: C0301: Line too long (108/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car.py:44:0: C0325: Unnecessary parens after 'assert' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car.py:45:0: C0301: Line too long (105/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car.py:46:0: C0301: Line too long (130/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car.py:47:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car.py:62:0: C0301: Line too long (103/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car.py:65:91: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car.py:66:13: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car.py:82:16: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car.py:97:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car.py:100:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car.py:101:17: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car.py:113:25: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car.py:125:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car.py:131:61: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car.py:24:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car.py:39:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car.py:45:59: C0121: Comparison 'scenario_params['world']['sync_mode'] == True' should be 'scenario_params['world']['sync_mode'] is True' if checking for the singleton value True, or 'bool(scenario_params['world']['sync_mode'])' if testing for truthiness (singleton-comparison)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car.py:86:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car.py:119:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car.py:126:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car.py:126:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car.py:130:12: W0702: No exception type(s) specified (bare-except)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car.py:39:0: R0912: Too many branches (13/12) (too-many-branches)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car.py:71:8: W0612: Unused variable 'traffic_manager' (unused-variable)
opencda/scenario_testing/ecloud_4lane_scenario_dist_32_car.py:18:0: W0611: Unused import os (unused-import)
************* Module OpenCDA.opencda.scenario_testing.single_town06_cosim
opencda/scenario_testing/single_town06_cosim.py:1:0: C0114: Missing module docstring (missing-module-docstring)
opencda/scenario_testing/single_town06_cosim.py:17:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/single_town06_cosim.py:65:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/single_town06_cosim.py:67:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/single_town06_cosim.py:59:16: W0612: Unused variable 'i' (unused-variable)
************* Module OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_128_car
opencda/scenario_testing/ecloud_4lane_scenario_dist_128_car.py:44:0: C0301: Line too long (108/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_128_car.py:44:0: C0325: Unnecessary parens after 'assert' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_scenario_dist_128_car.py:45:0: C0301: Line too long (105/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_128_car.py:46:0: C0301: Line too long (130/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_128_car.py:47:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_128_car.py:62:0: C0301: Line too long (103/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_128_car.py:65:91: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_128_car.py:66:13: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_128_car.py:82:16: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_128_car.py:97:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_scenario_dist_128_car.py:100:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_128_car.py:101:17: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_128_car.py:113:25: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_128_car.py:125:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_128_car.py:131:61: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_128_car.py:24:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_4lane_scenario_dist_128_car.py:39:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/ecloud_4lane_scenario_dist_128_car.py:45:59: C0121: Comparison 'scenario_params['world']['sync_mode'] == True' should be 'scenario_params['world']['sync_mode'] is True' if checking for the singleton value True, or 'bool(scenario_params['world']['sync_mode'])' if testing for truthiness (singleton-comparison)
opencda/scenario_testing/ecloud_4lane_scenario_dist_128_car.py:86:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/ecloud_4lane_scenario_dist_128_car.py:119:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_scenario_dist_128_car.py:126:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/ecloud_4lane_scenario_dist_128_car.py:126:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_scenario_dist_128_car.py:130:12: W0702: No exception type(s) specified (bare-except)
opencda/scenario_testing/ecloud_4lane_scenario_dist_128_car.py:39:0: R0912: Too many branches (13/12) (too-many-branches)
opencda/scenario_testing/ecloud_4lane_scenario_dist_128_car.py:71:8: W0612: Unused variable 'traffic_manager' (unused-variable)
opencda/scenario_testing/ecloud_4lane_scenario_dist_128_car.py:18:0: W0611: Unused import os (unused-import)
************* Module OpenCDA.opencda.scenario_testing.platoon_joining_2lanefree_carla
opencda/scenario_testing/platoon_joining_2lanefree_carla.py:12:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/platoon_joining_2lanefree_carla.py:20:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/platoon_joining_2lanefree_carla.py:20:0: R0914: Too many local variables (20/15) (too-many-locals)
opencda/scenario_testing/platoon_joining_2lanefree_carla.py:88:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/platoon_joining_2lanefree_carla.py:99:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/platoon_joining_2lanefree_carla.py:99:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/platoon_joining_2lanefree_carla.py:51:8: W0612: Unused variable 'traffic_manager' (unused-variable)
************* Module OpenCDA.opencda.scenario_testing.ecloud_4lane_dist_2_car
opencda/scenario_testing/ecloud_4lane_dist_2_car.py:42:0: C0301: Line too long (108/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_dist_2_car.py:42:0: C0325: Unnecessary parens after 'assert' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_dist_2_car.py:43:0: C0301: Line too long (105/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_dist_2_car.py:44:0: C0301: Line too long (130/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_dist_2_car.py:45:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_2_car.py:60:0: C0301: Line too long (103/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_dist_2_car.py:63:91: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_2_car.py:64:13: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_2_car.py:80:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_2_car.py:91:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_2_car.py:92:17: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_2_car.py:104:25: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_2_car.py:116:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_2_car.py:122:61: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_2_car.py:24:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_4lane_dist_2_car.py:37:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/ecloud_4lane_dist_2_car.py:43:59: C0121: Comparison 'scenario_params['world']['sync_mode'] == True' should be 'scenario_params['world']['sync_mode'] is True' if checking for the singleton value True, or 'bool(scenario_params['world']['sync_mode'])' if testing for truthiness (singleton-comparison)
opencda/scenario_testing/ecloud_4lane_dist_2_car.py:110:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_dist_2_car.py:117:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/ecloud_4lane_dist_2_car.py:117:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_dist_2_car.py:121:12: W0702: No exception type(s) specified (bare-except)
opencda/scenario_testing/ecloud_4lane_dist_2_car.py:37:0: R0912: Too many branches (13/12) (too-many-branches)
opencda/scenario_testing/ecloud_4lane_dist_2_car.py:69:8: W0612: Unused variable 'traffic_manager' (unused-variable)
opencda/scenario_testing/ecloud_4lane_dist_2_car.py:18:0: W0611: Unused import os (unused-import)
************* Module OpenCDA.opencda.scenario_testing.platoon_joining_2lanefreecomplete_carla
opencda/scenario_testing/platoon_joining_2lanefreecomplete_carla.py:13:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/platoon_joining_2lanefreecomplete_carla.py:21:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/platoon_joining_2lanefreecomplete_carla.py:21:0: R0914: Too many local variables (18/15) (too-many-locals)
opencda/scenario_testing/platoon_joining_2lanefreecomplete_carla.py:86:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/platoon_joining_2lanefreecomplete_carla.py:97:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/platoon_joining_2lanefreecomplete_carla.py:97:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/platoon_joining_2lanefreecomplete_carla.py:48:8: W0612: Unused variable 'traffic_manager' (unused-variable)
opencda/scenario_testing/platoon_joining_2lanefreecomplete_carla.py:9:0: W0611: Unused import os (unused-import)
************* Module OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_48_car_perception
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car_perception.py:44:0: C0301: Line too long (108/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car_perception.py:44:0: C0325: Unnecessary parens after 'assert' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car_perception.py:45:0: C0301: Line too long (105/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car_perception.py:46:0: C0301: Line too long (130/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car_perception.py:47:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car_perception.py:62:0: C0301: Line too long (103/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car_perception.py:65:91: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car_perception.py:66:13: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car_perception.py:82:16: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car_perception.py:97:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car_perception.py:100:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car_perception.py:101:17: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car_perception.py:113:25: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car_perception.py:125:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car_perception.py:131:61: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car_perception.py:24:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car_perception.py:39:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car_perception.py:45:59: C0121: Comparison 'scenario_params['world']['sync_mode'] == True' should be 'scenario_params['world']['sync_mode'] is True' if checking for the singleton value True, or 'bool(scenario_params['world']['sync_mode'])' if testing for truthiness (singleton-comparison)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car_perception.py:86:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car_perception.py:119:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car_perception.py:126:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car_perception.py:126:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car_perception.py:130:12: W0702: No exception type(s) specified (bare-except)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car_perception.py:39:0: R0912: Too many branches (13/12) (too-many-branches)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car_perception.py:71:8: W0612: Unused variable 'traffic_manager' (unused-variable)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car_perception.py:18:0: W0611: Unused import os (unused-import)
************* Module OpenCDA.opencda.scenario_testing.single_town06_carla
opencda/scenario_testing/single_town06_carla.py:62:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/single_town06_carla.py:75:0: C0305: Trailing newlines (trailing-newlines)
opencda/scenario_testing/single_town06_carla.py:1:0: C0114: Missing module docstring (missing-module-docstring)
opencda/scenario_testing/single_town06_carla.py:7:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/single_town06_carla.py:14:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/single_town06_carla.py:64:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/single_town06_carla.py:71:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/single_town06_carla.py:73:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/single_town06_carla.py:73:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/single_town06_carla.py:36:8: W0612: Unused variable 'traffic_manager' (unused-variable)
opencda/scenario_testing/single_town06_carla.py:58:16: W0612: Unused variable 'i' (unused-variable)
************* Module OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_16_car
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car.py:44:0: C0301: Line too long (108/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car.py:44:0: C0325: Unnecessary parens after 'assert' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car.py:45:0: C0301: Line too long (105/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car.py:46:0: C0301: Line too long (130/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car.py:47:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car.py:62:0: C0301: Line too long (103/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car.py:65:91: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car.py:66:13: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car.py:82:16: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car.py:97:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car.py:100:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car.py:101:17: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car.py:113:25: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car.py:125:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car.py:131:61: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car.py:24:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car.py:39:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car.py:45:59: C0121: Comparison 'scenario_params['world']['sync_mode'] == True' should be 'scenario_params['world']['sync_mode'] is True' if checking for the singleton value True, or 'bool(scenario_params['world']['sync_mode'])' if testing for truthiness (singleton-comparison)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car.py:86:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car.py:119:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car.py:126:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car.py:126:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car.py:130:12: W0702: No exception type(s) specified (bare-except)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car.py:39:0: R0912: Too many branches (13/12) (too-many-branches)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car.py:71:8: W0612: Unused variable 'traffic_manager' (unused-variable)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car.py:18:0: W0611: Unused import os (unused-import)
************* Module OpenCDA.opencda.scenario_testing.single_2lanefree_cosim
opencda/scenario_testing/single_2lanefree_cosim.py:22:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/single_2lanefree_cosim.py:22:0: R0914: Too many local variables (16/15) (too-many-locals)
opencda/scenario_testing/single_2lanefree_cosim.py:73:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/single_2lanefree_cosim.py:75:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/single_2lanefree_cosim.py:67:16: W0612: Unused variable 'i' (unused-variable)
************* Module OpenCDA.opencda.scenario_testing.ecloud_edge_scenario
opencda/scenario_testing/ecloud_edge_scenario.py:48:0: C0301: Line too long (106/100) (line-too-long)
opencda/scenario_testing/ecloud_edge_scenario.py:89:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_edge_scenario.py:108:51: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_edge_scenario.py:13:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_edge_scenario.py:19:0: W0404: Reimport 'opencda.scenario_testing.utils.sim_api' (imported line 13) (reimported)
opencda/scenario_testing/ecloud_edge_scenario.py:19:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_edge_scenario.py:25:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/ecloud_edge_scenario.py:25:0: R0914: Too many local variables (17/15) (too-many-locals)
opencda/scenario_testing/ecloud_edge_scenario.py:105:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_edge_scenario.py:110:31: E0602: Undefined variable 'single_cav_list' (undefined-variable)
opencda/scenario_testing/ecloud_edge_scenario.py:14:0: W0611: Unused opencda.scenario_testing.utils.customized_map_api imported as map_api (unused-import)
************* Module OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_config
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:48:0: C0301: Line too long (108/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:48:0: C0325: Unnecessary parens after 'assert' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:49:0: C0301: Line too long (105/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:50:0: C0301: Line too long (130/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:51:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:53:97: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:57:0: C0301: Line too long (103/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:78:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:79:28: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:83:91: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:84:13: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:99:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:106:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:107:17: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:115:0: C0301: Line too long (104/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:117:0: C0301: Line too long (121/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:130:40: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:136:21: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:149:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:159:61: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:26:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:42:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:42:0: R0914: Too many local variables (26/15) (too-many-locals)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:49:59: C0121: Comparison 'scenario_params['world']['sync_mode'] == True' should be 'scenario_params['world']['sync_mode'] is True' if checking for the singleton value True, or 'bool(scenario_params['world']['sync_mode'])' if testing for truthiness (singleton-comparison)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:61:26: R1719: The if expression can be replaced with 'test' (simplifiable-if-expression)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:102:18: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:115:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:143:12: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:151:16: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:154:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:154:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:158:12: W0702: No exception type(s) specified (bare-except)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:42:0: R0912: Too many branches (19/12) (too-many-branches)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:42:0: R0915: Too many statements (62/50) (too-many-statements)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:89:8: W0612: Unused variable 'traffic_manager' (unused-variable)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:110:20: W0612: Unused variable 'i' (unused-variable)
opencda/scenario_testing/ecloud_4lane_scenario_dist_config.py:18:0: W0611: Unused import os (unused-import)
************* Module OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_8_car_2
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_2.py:55:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_2.py:66:0: C0301: Line too long (134/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_2.py:87:19: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_2.py:66:13: W0511: TODO eCloud - figure out another way to have the vehicle follow a CAV. Perhaps still access the bp since it's read only? (fixme)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_2.py:87:9: W0511: TODO gRPC     (fixme)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_2.py:13:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_2.py:22:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_2.py:93:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_2.py:100:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_2.py:100:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_2.py:44:8: W0612: Unused variable 'traffic_manager' (unused-variable)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_2.py:8:0: W0611: Unused import os (unused-import)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_2.py:11:0: W0611: Unused VehicleManagerProxy imported from opencda.core.common.vehicle_manager_proxy (unused-import)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_2.py:14:0: W0611: Unused opencda.scenario_testing.utils.customized_map_api imported as map_api (unused-import)
************* Module OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_16_car_perception
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car_perception.py:44:0: C0301: Line too long (108/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car_perception.py:44:0: C0325: Unnecessary parens after 'assert' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car_perception.py:45:0: C0301: Line too long (105/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car_perception.py:46:0: C0301: Line too long (130/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car_perception.py:47:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car_perception.py:62:0: C0301: Line too long (103/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car_perception.py:65:91: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car_perception.py:66:13: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car_perception.py:82:16: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car_perception.py:97:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car_perception.py:100:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car_perception.py:101:17: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car_perception.py:113:25: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car_perception.py:125:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car_perception.py:131:61: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car_perception.py:24:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car_perception.py:39:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car_perception.py:45:59: C0121: Comparison 'scenario_params['world']['sync_mode'] == True' should be 'scenario_params['world']['sync_mode'] is True' if checking for the singleton value True, or 'bool(scenario_params['world']['sync_mode'])' if testing for truthiness (singleton-comparison)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car_perception.py:86:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car_perception.py:119:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car_perception.py:126:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car_perception.py:126:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car_perception.py:130:12: W0702: No exception type(s) specified (bare-except)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car_perception.py:39:0: R0912: Too many branches (13/12) (too-many-branches)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car_perception.py:71:8: W0612: Unused variable 'traffic_manager' (unused-variable)
opencda/scenario_testing/ecloud_4lane_scenario_dist_16_car_perception.py:18:0: W0611: Unused import os (unused-import)
************* Module OpenCDA.opencda.scenario_testing.ecloud_4lane_dist_128_car
opencda/scenario_testing/ecloud_4lane_dist_128_car.py:42:0: C0301: Line too long (108/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_dist_128_car.py:42:0: C0325: Unnecessary parens after 'assert' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_dist_128_car.py:43:0: C0301: Line too long (105/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_dist_128_car.py:44:0: C0301: Line too long (130/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_dist_128_car.py:45:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_128_car.py:60:0: C0301: Line too long (103/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_dist_128_car.py:63:91: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_128_car.py:64:13: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_128_car.py:80:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_128_car.py:91:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_128_car.py:92:17: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_128_car.py:104:25: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_128_car.py:116:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_128_car.py:122:61: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_128_car.py:24:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_4lane_dist_128_car.py:37:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/ecloud_4lane_dist_128_car.py:43:59: C0121: Comparison 'scenario_params['world']['sync_mode'] == True' should be 'scenario_params['world']['sync_mode'] is True' if checking for the singleton value True, or 'bool(scenario_params['world']['sync_mode'])' if testing for truthiness (singleton-comparison)
opencda/scenario_testing/ecloud_4lane_dist_128_car.py:110:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_dist_128_car.py:117:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/ecloud_4lane_dist_128_car.py:117:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_dist_128_car.py:121:12: W0702: No exception type(s) specified (bare-except)
opencda/scenario_testing/ecloud_4lane_dist_128_car.py:37:0: R0912: Too many branches (13/12) (too-many-branches)
opencda/scenario_testing/ecloud_4lane_dist_128_car.py:69:8: W0612: Unused variable 'traffic_manager' (unused-variable)
opencda/scenario_testing/ecloud_4lane_dist_128_car.py:18:0: W0611: Unused import os (unused-import)
************* Module OpenCDA.opencda.scenario_testing.single_2lanefree_carla
opencda/scenario_testing/single_2lanefree_carla.py:61:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/single_2lanefree_carla.py:12:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/single_2lanefree_carla.py:21:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/single_2lanefree_carla.py:21:0: R0914: Too many local variables (17/15) (too-many-locals)
opencda/scenario_testing/single_2lanefree_carla.py:79:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/single_2lanefree_carla.py:86:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/single_2lanefree_carla.py:88:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/single_2lanefree_carla.py:88:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/single_2lanefree_carla.py:50:8: W0612: Unused variable 'traffic_manager' (unused-variable)
opencda/scenario_testing/single_2lanefree_carla.py:73:16: W0612: Unused variable 'i' (unused-variable)
************* Module OpenCDA.opencda.scenario_testing.ecloud_edge_8_car
opencda/scenario_testing/ecloud_edge_8_car.py:50:0: C0301: Line too long (140/100) (line-too-long)
opencda/scenario_testing/ecloud_edge_8_car.py:50:0: C0325: Unnecessary parens after 'assert' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_edge_8_car.py:54:0: C0301: Line too long (106/100) (line-too-long)
opencda/scenario_testing/ecloud_edge_8_car.py:89:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_edge_8_car.py:92:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_edge_8_car.py:115:51: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_edge_8_car.py:15:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_edge_8_car.py:20:0: W0404: Reimport 'opencda.scenario_testing.utils.sim_api' (imported line 15) (reimported)
opencda/scenario_testing/ecloud_edge_8_car.py:20:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_edge_8_car.py:28:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/ecloud_edge_8_car.py:28:0: R0914: Too many local variables (18/15) (too-many-locals)
opencda/scenario_testing/ecloud_edge_8_car.py:74:18: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/ecloud_edge_8_car.py:112:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_edge_8_car.py:10:0: W0611: Unused import logging (unused-import)
opencda/scenario_testing/ecloud_edge_8_car.py:11:0: W0611: Unused import time (unused-import)
opencda/scenario_testing/ecloud_edge_8_car.py:16:0: W0611: Unused opencda.scenario_testing.utils.customized_map_api imported as map_api (unused-import)
opencda/scenario_testing/ecloud_edge_8_car.py:17:0: W0611: Unused import opencda.logging_ecloud (unused-import)
************* Module OpenCDA.opencda.scenario_testing.ecloud_template_4lane_scenario_dist
opencda/scenario_testing/ecloud_template_4lane_scenario_dist.py:42:0: C0301: Line too long (108/100) (line-too-long)
opencda/scenario_testing/ecloud_template_4lane_scenario_dist.py:42:0: C0325: Unnecessary parens after 'assert' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_template_4lane_scenario_dist.py:43:0: C0301: Line too long (105/100) (line-too-long)
opencda/scenario_testing/ecloud_template_4lane_scenario_dist.py:44:0: C0301: Line too long (130/100) (line-too-long)
opencda/scenario_testing/ecloud_template_4lane_scenario_dist.py:45:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_template_4lane_scenario_dist.py:60:0: C0301: Line too long (103/100) (line-too-long)
opencda/scenario_testing/ecloud_template_4lane_scenario_dist.py:63:91: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_template_4lane_scenario_dist.py:64:13: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_template_4lane_scenario_dist.py:80:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_template_4lane_scenario_dist.py:91:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_template_4lane_scenario_dist.py:92:17: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_template_4lane_scenario_dist.py:104:25: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_template_4lane_scenario_dist.py:116:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_template_4lane_scenario_dist.py:122:61: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_template_4lane_scenario_dist.py:24:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_template_4lane_scenario_dist.py:37:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/ecloud_template_4lane_scenario_dist.py:43:59: C0121: Comparison 'scenario_params['world']['sync_mode'] == True' should be 'scenario_params['world']['sync_mode'] is True' if checking for the singleton value True, or 'bool(scenario_params['world']['sync_mode'])' if testing for truthiness (singleton-comparison)
opencda/scenario_testing/ecloud_template_4lane_scenario_dist.py:110:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_template_4lane_scenario_dist.py:117:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/ecloud_template_4lane_scenario_dist.py:117:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_template_4lane_scenario_dist.py:121:12: W0702: No exception type(s) specified (bare-except)
opencda/scenario_testing/ecloud_template_4lane_scenario_dist.py:37:0: R0912: Too many branches (13/12) (too-many-branches)
opencda/scenario_testing/ecloud_template_4lane_scenario_dist.py:69:8: W0612: Unused variable 'traffic_manager' (unused-variable)
opencda/scenario_testing/ecloud_template_4lane_scenario_dist.py:18:0: W0611: Unused import os (unused-import)
************* Module OpenCDA.opencda.scenario_testing.multi_2lanefree_carla
opencda/scenario_testing/multi_2lanefree_carla.py:31:0: C0301: Line too long (108/100) (line-too-long)
opencda/scenario_testing/multi_2lanefree_carla.py:31:0: C0325: Unnecessary parens after 'assert' keyword (superfluous-parens)
opencda/scenario_testing/multi_2lanefree_carla.py:32:0: C0301: Line too long (105/100) (line-too-long)
opencda/scenario_testing/multi_2lanefree_carla.py:33:0: C0301: Line too long (130/100) (line-too-long)
opencda/scenario_testing/multi_2lanefree_carla.py:53:79: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/multi_2lanefree_carla.py:59:28: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/multi_2lanefree_carla.py:62:91: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/multi_2lanefree_carla.py:63:13: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/multi_2lanefree_carla.py:81:16: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/multi_2lanefree_carla.py:88:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/multi_2lanefree_carla.py:89:17: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/multi_2lanefree_carla.py:97:0: C0301: Line too long (104/100) (line-too-long)
opencda/scenario_testing/multi_2lanefree_carla.py:99:0: C0301: Line too long (121/100) (line-too-long)
opencda/scenario_testing/multi_2lanefree_carla.py:108:32: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/multi_2lanefree_carla.py:114:21: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/multi_2lanefree_carla.py:126:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/multi_2lanefree_carla.py:136:0: C0304: Final newline missing (missing-final-newline)
opencda/scenario_testing/multi_2lanefree_carla.py:16:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/multi_2lanefree_carla.py:26:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/multi_2lanefree_carla.py:26:0: R0914: Too many local variables (22/15) (too-many-locals)
opencda/scenario_testing/multi_2lanefree_carla.py:32:59: C0121: Comparison 'scenario_params['world']['sync_mode'] == True' should be 'scenario_params['world']['sync_mode'] is True' if checking for the singleton value True, or 'bool(scenario_params['world']['sync_mode'])' if testing for truthiness (singleton-comparison)
opencda/scenario_testing/multi_2lanefree_carla.py:41:26: R1719: The if expression can be replaced with 'test' (simplifiable-if-expression)
opencda/scenario_testing/multi_2lanefree_carla.py:84:18: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/multi_2lanefree_carla.py:97:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/multi_2lanefree_carla.py:120:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/multi_2lanefree_carla.py:128:16: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/multi_2lanefree_carla.py:131:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/multi_2lanefree_carla.py:131:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/multi_2lanefree_carla.py:135:12: W0702: No exception type(s) specified (bare-except)
opencda/scenario_testing/multi_2lanefree_carla.py:26:0: R0912: Too many branches (18/12) (too-many-branches)
opencda/scenario_testing/multi_2lanefree_carla.py:26:0: R0915: Too many statements (56/50) (too-many-statements)
opencda/scenario_testing/multi_2lanefree_carla.py:69:8: W0612: Unused variable 'traffic_manager' (unused-variable)
opencda/scenario_testing/multi_2lanefree_carla.py:92:20: W0612: Unused variable 'i' (unused-variable)
opencda/scenario_testing/multi_2lanefree_carla.py:22:0: W0611: Unused opencda.scenario_testing.utils.customized_map_api imported as map_api (unused-import)
************* Module OpenCDA.opencda.scenario_testing.ecloud_4lane_dist_24_car
opencda/scenario_testing/ecloud_4lane_dist_24_car.py:42:0: C0301: Line too long (108/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_dist_24_car.py:42:0: C0325: Unnecessary parens after 'assert' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_dist_24_car.py:43:0: C0301: Line too long (105/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_dist_24_car.py:44:0: C0301: Line too long (130/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_dist_24_car.py:45:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_24_car.py:60:0: C0301: Line too long (103/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_dist_24_car.py:63:91: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_24_car.py:64:13: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_24_car.py:80:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_24_car.py:91:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_24_car.py:92:17: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_24_car.py:104:25: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_24_car.py:116:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_24_car.py:122:61: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_24_car.py:24:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_4lane_dist_24_car.py:37:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/ecloud_4lane_dist_24_car.py:43:59: C0121: Comparison 'scenario_params['world']['sync_mode'] == True' should be 'scenario_params['world']['sync_mode'] is True' if checking for the singleton value True, or 'bool(scenario_params['world']['sync_mode'])' if testing for truthiness (singleton-comparison)
opencda/scenario_testing/ecloud_4lane_dist_24_car.py:110:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_dist_24_car.py:117:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/ecloud_4lane_dist_24_car.py:117:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_dist_24_car.py:121:12: W0702: No exception type(s) specified (bare-except)
opencda/scenario_testing/ecloud_4lane_dist_24_car.py:37:0: R0912: Too many branches (13/12) (too-many-branches)
opencda/scenario_testing/ecloud_4lane_dist_24_car.py:69:8: W0612: Unused variable 'traffic_manager' (unused-variable)
opencda/scenario_testing/ecloud_4lane_dist_24_car.py:18:0: W0611: Unused import os (unused-import)
************* Module OpenCDA.opencda.scenario_testing.platoon_joining_2lanefree_cosim
opencda/scenario_testing/platoon_joining_2lanefree_cosim.py:21:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/platoon_joining_2lanefree_cosim.py:21:0: R0914: Too many local variables (19/15) (too-many-locals)
opencda/scenario_testing/platoon_joining_2lanefree_cosim.py:87:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/platoon_joining_2lanefree_cosim.py:93:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
************* Module OpenCDA.opencda.scenario_testing.ecloud_4lane_dist_16_car
opencda/scenario_testing/ecloud_4lane_dist_16_car.py:42:0: C0301: Line too long (108/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_dist_16_car.py:42:0: C0325: Unnecessary parens after 'assert' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_dist_16_car.py:43:0: C0301: Line too long (105/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_dist_16_car.py:44:0: C0301: Line too long (130/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_dist_16_car.py:45:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_16_car.py:60:0: C0301: Line too long (103/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_dist_16_car.py:63:91: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_16_car.py:64:13: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_16_car.py:80:16: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_16_car.py:93:17: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_16_car.py:105:25: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_16_car.py:117:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_16_car.py:123:61: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_16_car.py:24:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_4lane_dist_16_car.py:37:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/ecloud_4lane_dist_16_car.py:37:0: R0914: Too many local variables (16/15) (too-many-locals)
opencda/scenario_testing/ecloud_4lane_dist_16_car.py:43:59: C0121: Comparison 'scenario_params['world']['sync_mode'] == True' should be 'scenario_params['world']['sync_mode'] is True' if checking for the singleton value True, or 'bool(scenario_params['world']['sync_mode'])' if testing for truthiness (singleton-comparison)
opencda/scenario_testing/ecloud_4lane_dist_16_car.py:84:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/ecloud_4lane_dist_16_car.py:111:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_dist_16_car.py:118:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/ecloud_4lane_dist_16_car.py:118:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_dist_16_car.py:122:12: W0702: No exception type(s) specified (bare-except)
opencda/scenario_testing/ecloud_4lane_dist_16_car.py:37:0: R0912: Too many branches (13/12) (too-many-branches)
opencda/scenario_testing/ecloud_4lane_dist_16_car.py:69:8: W0612: Unused variable 'traffic_manager' (unused-variable)
opencda/scenario_testing/ecloud_4lane_dist_16_car.py:18:0: W0611: Unused import os (unused-import)
************* Module OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_8_car_perception
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_perception.py:44:0: C0301: Line too long (108/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_perception.py:44:0: C0325: Unnecessary parens after 'assert' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_perception.py:45:0: C0301: Line too long (105/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_perception.py:46:0: C0301: Line too long (130/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_perception.py:47:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_perception.py:62:0: C0301: Line too long (103/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_perception.py:65:91: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_perception.py:66:13: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_perception.py:82:16: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_perception.py:97:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_perception.py:100:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_perception.py:101:17: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_perception.py:113:25: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_perception.py:125:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_perception.py:131:61: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_perception.py:24:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_perception.py:39:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_perception.py:45:59: C0121: Comparison 'scenario_params['world']['sync_mode'] == True' should be 'scenario_params['world']['sync_mode'] is True' if checking for the singleton value True, or 'bool(scenario_params['world']['sync_mode'])' if testing for truthiness (singleton-comparison)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_perception.py:86:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_perception.py:119:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_perception.py:126:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_perception.py:126:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_perception.py:130:12: W0702: No exception type(s) specified (bare-except)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_perception.py:39:0: R0912: Too many branches (13/12) (too-many-branches)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_perception.py:71:8: W0612: Unused variable 'traffic_manager' (unused-variable)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car_perception.py:18:0: W0611: Unused import os (unused-import)
************* Module OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_48_car
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car.py:44:0: C0301: Line too long (108/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car.py:44:0: C0325: Unnecessary parens after 'assert' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car.py:45:0: C0301: Line too long (105/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car.py:46:0: C0301: Line too long (130/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car.py:47:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car.py:62:0: C0301: Line too long (103/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car.py:65:91: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car.py:66:13: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car.py:82:16: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car.py:97:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car.py:100:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car.py:101:17: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car.py:113:25: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car.py:125:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car.py:131:61: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car.py:24:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car.py:39:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car.py:45:59: C0121: Comparison 'scenario_params['world']['sync_mode'] == True' should be 'scenario_params['world']['sync_mode'] is True' if checking for the singleton value True, or 'bool(scenario_params['world']['sync_mode'])' if testing for truthiness (singleton-comparison)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car.py:86:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car.py:119:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car.py:126:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car.py:126:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car.py:130:12: W0702: No exception type(s) specified (bare-except)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car.py:39:0: R0912: Too many branches (13/12) (too-many-branches)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car.py:71:8: W0612: Unused variable 'traffic_manager' (unused-variable)
opencda/scenario_testing/ecloud_4lane_scenario_dist_48_car.py:18:0: W0611: Unused import os (unused-import)
************* Module OpenCDA.opencda.scenario_testing.single_intersection_town06_carla
opencda/scenario_testing/single_intersection_town06_carla.py:78:0: C0305: Trailing newlines (trailing-newlines)
opencda/scenario_testing/single_intersection_town06_carla.py:10:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/single_intersection_town06_carla.py:17:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/single_intersection_town06_carla.py:67:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/single_intersection_town06_carla.py:74:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/single_intersection_town06_carla.py:76:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/single_intersection_town06_carla.py:76:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/single_intersection_town06_carla.py:39:8: W0612: Unused variable 'traffic_manager' (unused-variable)
opencda/scenario_testing/single_intersection_town06_carla.py:61:16: W0612: Unused variable 'i' (unused-variable)
************* Module OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_64_car
opencda/scenario_testing/ecloud_4lane_scenario_dist_64_car.py:44:0: C0301: Line too long (108/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_64_car.py:44:0: C0325: Unnecessary parens after 'assert' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_scenario_dist_64_car.py:45:0: C0301: Line too long (105/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_64_car.py:46:0: C0301: Line too long (130/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_64_car.py:47:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_64_car.py:62:0: C0301: Line too long (103/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_64_car.py:65:91: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_64_car.py:66:13: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_64_car.py:82:16: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_64_car.py:97:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_scenario_dist_64_car.py:100:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_64_car.py:101:17: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_64_car.py:113:25: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_64_car.py:125:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_64_car.py:131:61: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_64_car.py:24:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_4lane_scenario_dist_64_car.py:39:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/ecloud_4lane_scenario_dist_64_car.py:45:59: C0121: Comparison 'scenario_params['world']['sync_mode'] == True' should be 'scenario_params['world']['sync_mode'] is True' if checking for the singleton value True, or 'bool(scenario_params['world']['sync_mode'])' if testing for truthiness (singleton-comparison)
opencda/scenario_testing/ecloud_4lane_scenario_dist_64_car.py:86:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/ecloud_4lane_scenario_dist_64_car.py:119:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_scenario_dist_64_car.py:126:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/ecloud_4lane_scenario_dist_64_car.py:126:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_scenario_dist_64_car.py:130:12: W0702: No exception type(s) specified (bare-except)
opencda/scenario_testing/ecloud_4lane_scenario_dist_64_car.py:39:0: R0912: Too many branches (13/12) (too-many-branches)
opencda/scenario_testing/ecloud_4lane_scenario_dist_64_car.py:71:8: W0612: Unused variable 'traffic_manager' (unused-variable)
opencda/scenario_testing/ecloud_4lane_scenario_dist_64_car.py:18:0: W0611: Unused import os (unused-import)
************* Module OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario
opencda/scenario_testing/ecloud_4lane_scenario.py:13:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_4lane_scenario.py:19:0: W0404: Reimport 'opencda.scenario_testing.utils.sim_api' (imported line 13) (reimported)
opencda/scenario_testing/ecloud_4lane_scenario.py:19:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_4lane_scenario.py:25:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/ecloud_4lane_scenario.py:77:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_scenario.py:83:23: E0602: Undefined variable 'platoon_list' (undefined-variable)
opencda/scenario_testing/ecloud_4lane_scenario.py:86:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/ecloud_4lane_scenario.py:86:17: E0602: Undefined variable 'bg_veh_list' (undefined-variable)
opencda/scenario_testing/ecloud_4lane_scenario.py:70:16: W0612: Unused variable 'i' (unused-variable)
opencda/scenario_testing/ecloud_4lane_scenario.py:14:0: W0611: Unused opencda.scenario_testing.utils.customized_map_api imported as map_api (unused-import)
************* Module OpenCDA.opencda.scenario_testing.cooperception_datadump_town06_carla
opencda/scenario_testing/cooperception_datadump_town06_carla.py:90:0: C0305: Trailing newlines (trailing-newlines)
opencda/scenario_testing/cooperception_datadump_town06_carla.py:12:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/cooperception_datadump_town06_carla.py:19:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/cooperception_datadump_town06_carla.py:19:0: R0914: Too many local variables (17/15) (too-many-locals)
opencda/scenario_testing/cooperception_datadump_town06_carla.py:79:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/cooperception_datadump_town06_carla.py:86:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/cooperception_datadump_town06_carla.py:88:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/cooperception_datadump_town06_carla.py:88:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/cooperception_datadump_town06_carla.py:42:8: W0612: Unused variable 'traffic_manager' (unused-variable)
opencda/scenario_testing/cooperception_datadump_town06_carla.py:73:16: W0612: Unused variable 'i' (unused-variable)
************* Module OpenCDA.opencda.scenario_testing.single_town05_cosim
opencda/scenario_testing/single_town05_cosim.py:1:0: C0114: Missing module docstring (missing-module-docstring)
opencda/scenario_testing/single_town05_cosim.py:17:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/single_town05_cosim.py:65:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/single_town05_cosim.py:67:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/single_town05_cosim.py:59:16: W0612: Unused variable 'i' (unused-variable)
************* Module OpenCDA.opencda.scenario_testing.ecloud_4lane_dist_4_car
opencda/scenario_testing/ecloud_4lane_dist_4_car.py:42:0: C0301: Line too long (108/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_dist_4_car.py:42:0: C0325: Unnecessary parens after 'assert' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_dist_4_car.py:43:0: C0301: Line too long (105/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_dist_4_car.py:44:0: C0301: Line too long (130/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_dist_4_car.py:45:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_4_car.py:60:0: C0301: Line too long (103/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_dist_4_car.py:63:91: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_4_car.py:64:13: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_4_car.py:80:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_4_car.py:91:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_4_car.py:92:17: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_4_car.py:104:25: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_4_car.py:116:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_4_car.py:122:61: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_dist_4_car.py:24:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_4lane_dist_4_car.py:37:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/ecloud_4lane_dist_4_car.py:43:59: C0121: Comparison 'scenario_params['world']['sync_mode'] == True' should be 'scenario_params['world']['sync_mode'] is True' if checking for the singleton value True, or 'bool(scenario_params['world']['sync_mode'])' if testing for truthiness (singleton-comparison)
opencda/scenario_testing/ecloud_4lane_dist_4_car.py:110:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_dist_4_car.py:117:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/ecloud_4lane_dist_4_car.py:117:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_dist_4_car.py:121:12: W0702: No exception type(s) specified (bare-except)
opencda/scenario_testing/ecloud_4lane_dist_4_car.py:37:0: R0912: Too many branches (13/12) (too-many-branches)
opencda/scenario_testing/ecloud_4lane_dist_4_car.py:69:8: W0612: Unused variable 'traffic_manager' (unused-variable)
opencda/scenario_testing/ecloud_4lane_dist_4_car.py:18:0: W0611: Unused import os (unused-import)
************* Module OpenCDA.opencda.scenario_testing.ecloud_edge_16_car
opencda/scenario_testing/ecloud_edge_16_car.py:49:0: C0301: Line too long (140/100) (line-too-long)
opencda/scenario_testing/ecloud_edge_16_car.py:49:0: C0325: Unnecessary parens after 'assert' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_edge_16_car.py:53:0: C0301: Line too long (106/100) (line-too-long)
opencda/scenario_testing/ecloud_edge_16_car.py:89:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_edge_16_car.py:112:51: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_edge_16_car.py:15:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_edge_16_car.py:20:0: W0404: Reimport 'opencda.scenario_testing.utils.sim_api' (imported line 15) (reimported)
opencda/scenario_testing/ecloud_edge_16_car.py:20:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_edge_16_car.py:28:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/ecloud_edge_16_car.py:28:0: R0914: Too many local variables (18/15) (too-many-locals)
opencda/scenario_testing/ecloud_edge_16_car.py:73:18: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/ecloud_edge_16_car.py:109:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_edge_16_car.py:10:0: W0611: Unused import logging (unused-import)
opencda/scenario_testing/ecloud_edge_16_car.py:11:0: W0611: Unused import time (unused-import)
opencda/scenario_testing/ecloud_edge_16_car.py:16:0: W0611: Unused opencda.scenario_testing.utils.customized_map_api imported as map_api (unused-import)
opencda/scenario_testing/ecloud_edge_16_car.py:17:0: W0611: Unused import opencda.logging_ecloud (unused-import)
************* Module OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_8_car
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:41:0: W0311: Bad indentation. Found 8 spaces, expected 4 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:44:0: C0301: Line too long (108/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:44:0: W0311: Bad indentation. Found 8 spaces, expected 4 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:44:0: C0325: Unnecessary parens after 'assert' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:45:0: C0301: Line too long (105/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:45:0: W0311: Bad indentation. Found 8 spaces, expected 4 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:46:0: C0301: Line too long (130/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:46:0: W0311: Bad indentation. Found 8 spaces, expected 4 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:47:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:48:0: W0311: Bad indentation. Found 8 spaces, expected 4 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:50:0: W0311: Bad indentation. Found 8 spaces, expected 4 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:57:0: W0311: Bad indentation. Found 8 spaces, expected 4 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:58:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:62:0: C0301: Line too long (103/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:62:0: W0311: Bad indentation. Found 8 spaces, expected 4 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:63:0: W0311: Bad indentation. Found 8 spaces, expected 4 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:64:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:65:91: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:66:13: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:66:0: W0311: Bad indentation. Found 8 spaces, expected 4 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:67:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:71:0: W0311: Bad indentation. Found 8 spaces, expected 4 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:75:0: W0311: Bad indentation. Found 8 spaces, expected 4 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:80:0: W0311: Bad indentation. Found 8 spaces, expected 4 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:82:16: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:82:0: W0311: Bad indentation. Found 8 spaces, expected 4 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:83:0: W0311: Bad indentation. Found 8 spaces, expected 4 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:84:0: W0311: Bad indentation. Found 8 spaces, expected 4 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:85:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:86:0: W0311: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:87:0: W0311: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:88:0: W0311: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:96:0: W0311: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:97:0: W0311: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:97:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:98:0: W0311: Bad indentation. Found 20 spaces, expected 16 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:99:0: W0311: Bad indentation. Found 20 spaces, expected 16 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:100:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:101:17: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:101:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:103:0: W0311: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:106:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:107:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:113:25: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:116:0: W0311: Bad indentation. Found 8 spaces, expected 4 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:117:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:119:0: W0311: Bad indentation. Found 8 spaces, expected 4 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:121:0: W0311: Bad indentation. Found 8 spaces, expected 4 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:122:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:124:0: W0311: Bad indentation. Found 8 spaces, expected 4 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:125:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:126:0: W0311: Bad indentation. Found 8 spaces, expected 4 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:127:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:128:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:129:0: W0311: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:130:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:131:61: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:131:0: W0311: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:24:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:39:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:45:59: C0121: Comparison 'scenario_params['world']['sync_mode'] == True' should be 'scenario_params['world']['sync_mode'] is True' if checking for the singleton value True, or 'bool(scenario_params['world']['sync_mode'])' if testing for truthiness (singleton-comparison)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:86:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:126:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:130:12: W0702: No exception type(s) specified (bare-except)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:71:8: W0612: Unused variable 'traffic_manager' (unused-variable)
opencda/scenario_testing/ecloud_4lane_scenario_dist_8_car.py:18:0: W0611: Unused import os (unused-import)
************* Module OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_60_car
opencda/scenario_testing/ecloud_4lane_scenario_dist_60_car.py:44:0: C0301: Line too long (108/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_60_car.py:44:0: C0325: Unnecessary parens after 'assert' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_scenario_dist_60_car.py:45:0: C0301: Line too long (105/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_60_car.py:46:0: C0301: Line too long (130/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_60_car.py:47:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_60_car.py:62:0: C0301: Line too long (103/100) (line-too-long)
opencda/scenario_testing/ecloud_4lane_scenario_dist_60_car.py:65:91: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_60_car.py:66:13: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_60_car.py:82:16: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_60_car.py:97:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
opencda/scenario_testing/ecloud_4lane_scenario_dist_60_car.py:100:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_60_car.py:101:17: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_60_car.py:113:25: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_60_car.py:125:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_60_car.py:131:61: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/ecloud_4lane_scenario_dist_60_car.py:24:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/ecloud_4lane_scenario_dist_60_car.py:39:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/ecloud_4lane_scenario_dist_60_car.py:45:59: C0121: Comparison 'scenario_params['world']['sync_mode'] == True' should be 'scenario_params['world']['sync_mode'] is True' if checking for the singleton value True, or 'bool(scenario_params['world']['sync_mode'])' if testing for truthiness (singleton-comparison)
opencda/scenario_testing/ecloud_4lane_scenario_dist_60_car.py:86:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/ecloud_4lane_scenario_dist_60_car.py:119:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_scenario_dist_60_car.py:126:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/ecloud_4lane_scenario_dist_60_car.py:126:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/ecloud_4lane_scenario_dist_60_car.py:130:12: W0702: No exception type(s) specified (bare-except)
opencda/scenario_testing/ecloud_4lane_scenario_dist_60_car.py:39:0: R0912: Too many branches (13/12) (too-many-branches)
opencda/scenario_testing/ecloud_4lane_scenario_dist_60_car.py:71:8: W0612: Unused variable 'traffic_manager' (unused-variable)
opencda/scenario_testing/ecloud_4lane_scenario_dist_60_car.py:18:0: W0611: Unused import os (unused-import)
************* Module OpenCDA.opencda.scenario_testing.platoon_joining_town06_carla
opencda/scenario_testing/platoon_joining_town06_carla.py:13:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/platoon_joining_town06_carla.py:19:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/platoon_joining_town06_carla.py:19:0: R0914: Too many local variables (18/15) (too-many-locals)
opencda/scenario_testing/platoon_joining_town06_carla.py:80:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/platoon_joining_town06_carla.py:91:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/platoon_joining_town06_carla.py:91:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/platoon_joining_town06_carla.py:43:8: W0612: Unused variable 'traffic_manager' (unused-variable)
************* Module OpenCDA.opencda.scenario_testing.platoon_stability_2lanefree_carla
opencda/scenario_testing/platoon_stability_2lanefree_carla.py:14:0: R0402: Use 'from opencda.scenario_testing.utils import sim_api' instead (consider-using-from-import)
opencda/scenario_testing/platoon_stability_2lanefree_carla.py:21:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/platoon_stability_2lanefree_carla.py:21:0: R0914: Too many local variables (22/15) (too-many-locals)
opencda/scenario_testing/platoon_stability_2lanefree_carla.py:93:26: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/platoon_stability_2lanefree_carla.py:103:24: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/platoon_stability_2lanefree_carla.py:116:24: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/platoon_stability_2lanefree_carla.py:127:24: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/platoon_stability_2lanefree_carla.py:140:24: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/platoon_stability_2lanefree_carla.py:151:24: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/platoon_stability_2lanefree_carla.py:153:20: R1723: Unnecessary "else" after "break", remove the "else" and de-indent the code inside it (no-else-break)
opencda/scenario_testing/platoon_stability_2lanefree_carla.py:161:8: E0601: Using variable 'eval_manager' before assignment (used-before-assignment)
opencda/scenario_testing/platoon_stability_2lanefree_carla.py:171:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/platoon_stability_2lanefree_carla.py:171:17: E0601: Using variable 'bg_veh_list' before assignment (used-before-assignment)
opencda/scenario_testing/platoon_stability_2lanefree_carla.py:21:0: R0912: Too many branches (29/12) (too-many-branches)
opencda/scenario_testing/platoon_stability_2lanefree_carla.py:21:0: R0915: Too many statements (79/50) (too-many-statements)
opencda/scenario_testing/platoon_stability_2lanefree_carla.py:43:8: W0612: Unused variable 'traffic_manager' (unused-variable)
************* Module OpenCDA.opencda.scenario_testing.evaluations.utils
opencda/scenario_testing/evaluations/utils.py:31:9: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
************* Module OpenCDA.opencda.scenario_testing.evaluations.evaluate_manager
opencda/scenario_testing/evaluations/evaluate_manager.py:48:61: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/evaluations/evaluate_manager.py:14:0: R0205: Class 'EvaluationManager' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/scenario_testing/evaluations/evaluate_manager.py:81:17: C0103: Variable name "vm" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/evaluations/evaluate_manager.py:83:29: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/evaluations/evaluate_manager.py:91:16: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/evaluations/evaluate_manager.py:81:12: W0612: Unused variable 'vid' (unused-variable)
opencda/scenario_testing/evaluations/evaluate_manager.py:105:17: C0103: Variable name "vm" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/evaluations/evaluate_manager.py:108:29: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/evaluations/evaluate_manager.py:118:16: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/evaluations/evaluate_manager.py:105:12: W0612: Unused variable 'vid' (unused-variable)
opencda/scenario_testing/evaluations/evaluate_manager.py:135:18: C0103: Variable name "pm" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/evaluations/evaluate_manager.py:136:29: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/evaluations/evaluate_manager.py:142:16: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/evaluations/evaluate_manager.py:159:18: C0103: Variable name "pm" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/evaluations/evaluate_manager.py:160:29: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/evaluations/evaluate_manager.py:166:16: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/evaluations/evaluate_manager.py:9:0: W0611: Unused import subprocess (unused-import)
opencda/scenario_testing/evaluations/evaluate_manager.py:11:0: W0611: Unused datetime imported from datetime (unused-import)
************* Module OpenCDA.opencda.scenario_testing.utils.cosim_api
opencda/scenario_testing/utils/cosim_api.py:89:9: W0511: todo: use yaml file to generate the route file (fixme)
opencda/scenario_testing/utils/cosim_api.py:227:9: W0511: todo make sure the tl is synced (fixme)
opencda/scenario_testing/utils/cosim_api.py:18:0: C0413: Import "import carla" should be placed at the top of the module (wrong-import-position)
opencda/scenario_testing/utils/cosim_api.py:20:0: C0413: Import "from opencda.co_simulation.sumo_integration.constants import SPAWN_OFFSET_Z" should be placed at the top of the module (wrong-import-position)
opencda/scenario_testing/utils/cosim_api.py:21:0: C0413: Import "from opencda.co_simulation.sumo_integration.bridge_helper import BridgeHelper" should be placed at the top of the module (wrong-import-position)
opencda/scenario_testing/utils/cosim_api.py:22:0: C0413: Import "from opencda.co_simulation.sumo_integration.constants import INVALID_ACTOR_ID" should be placed at the top of the module (wrong-import-position)
opencda/scenario_testing/utils/cosim_api.py:23:0: C0413: Import "from opencda.co_simulation.sumo_integration.sumo_simulation import SumoSimulation" should be placed at the top of the module (wrong-import-position)
opencda/scenario_testing/utils/cosim_api.py:25:0: C0413: Import "from opencda.scenario_testing.utils.sim_api import ScenarioManager" should be placed at the top of the module (wrong-import-position)
opencda/scenario_testing/utils/cosim_api.py:53:4: R0913: Too many arguments (8/5) (too-many-arguments)
opencda/scenario_testing/utils/cosim_api.py:53:4: R0914: Too many local variables (17/15) (too-many-locals)
opencda/scenario_testing/utils/cosim_api.py:60:8: R1725: Consider using Python 3 style super() without arguments (super-with-arguments)
opencda/scenario_testing/utils/cosim_api.py:90:41: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/utils/cosim_api.py:118:4: R0914: Too many local variables (17/15) (too-many-locals)
opencda/scenario_testing/utils/cosim_api.py:168:8: C0206: Consider iterating with .items() (consider-using-dict-items)
opencda/scenario_testing/utils/cosim_api.py:185:25: R1718: Consider using a set comprehension (consider-using-set-comprehension)
opencda/scenario_testing/utils/cosim_api.py:215:8: C0206: Consider iterating with .items() (consider-using-dict-items)
opencda/scenario_testing/utils/cosim_api.py:118:4: R0912: Too many branches (14/12) (too-many-branches)
opencda/scenario_testing/utils/cosim_api.py:242:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/utils/cosim_api.py:327:4: W0221: Number of parameters was 2 in 'ScenarioManager.close' and is now 1 in overriding 'CoScenarioManager.close' method (arguments-differ)
************* Module OpenCDA.opencda.scenario_testing.utils.sim_api
opencda/scenario_testing/utils/sim_api.py:66:0: C0301: Line too long (101/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:231:0: C0301: Line too long (114/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:232:0: C0301: Line too long (113/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:233:0: C0301: Line too long (105/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:240:0: C0301: Line too long (168/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:241:0: C0301: Line too long (183/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:243:0: C0301: Line too long (143/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:244:0: C0301: Line too long (115/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:245:0: C0301: Line too long (180/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:248:0: C0301: Line too long (131/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:249:0: C0301: Line too long (173/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:252:0: C0301: Line too long (154/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:253:0: C0301: Line too long (163/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:255:0: C0301: Line too long (110/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:263:0: C0301: Line too long (103/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:266:0: C0301: Line too long (104/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:299:0: C0325: Unnecessary parens after 'assert' keyword (superfluous-parens)
opencda/scenario_testing/utils/sim_api.py:304:0: C0301: Line too long (109/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:306:0: C0301: Line too long (116/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:309:0: C0301: Line too long (163/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:310:0: C0301: Line too long (282/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:311:143: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/utils/sim_api.py:311:0: C0301: Line too long (143/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:312:0: C0301: Line too long (121/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:329:0: C0325: Unnecessary parens after 'assert' keyword (superfluous-parens)
opencda/scenario_testing/utils/sim_api.py:336:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/utils/sim_api.py:363:0: C0301: Line too long (115/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:370:0: C0301: Line too long (113/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:381:0: C0301: Line too long (162/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:434:0: C0301: Line too long (107/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:435:0: C0325: Unnecessary parens after 'assert' keyword (superfluous-parens)
opencda/scenario_testing/utils/sim_api.py:477:0: C0301: Line too long (105/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:478:0: C0301: Line too long (118/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:487:0: C0301: Line too long (101/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:909:0: C0301: Line too long (127/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:960:0: C0301: Line too long (143/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:983:0: C0301: Line too long (101/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:1005:0: C0301: Line too long (109/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:1015:0: C0301: Line too long (109/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:1046:0: C0301: Line too long (102/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:1048:0: C0301: Line too long (101/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:1062:0: C0301: Line too long (101/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:1066:0: C0301: Line too long (112/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:1075:0: C0301: Line too long (108/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:1091:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/utils/sim_api.py:1095:0: C0301: Line too long (199/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:1108:0: C0301: Line too long (101/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:1145:77: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/utils/sim_api.py:1157:73: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/utils/sim_api.py:1168:91: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/utils/sim_api.py:1179:75: C0303: Trailing whitespace (trailing-whitespace)
opencda/scenario_testing/utils/sim_api.py:1200:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1213:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1216:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1217:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1217:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
opencda/scenario_testing/utils/sim_api.py:1218:0: C0301: Line too long (104/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:1218:0: W0311: Bad indentation. Found 14 spaces, expected 12 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1219:0: W0311: Bad indentation. Found 14 spaces, expected 12 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1220:0: C0301: Line too long (110/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:1220:0: W0311: Bad indentation. Found 18 spaces, expected 16 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1221:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1222:0: C0301: Line too long (103/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:1222:0: W0311: Bad indentation. Found 14 spaces, expected 12 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1223:0: W0311: Bad indentation. Found 14 spaces, expected 12 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1224:0: C0301: Line too long (107/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:1227:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1228:0: W0311: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1230:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1231:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1231:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
opencda/scenario_testing/utils/sim_api.py:1232:0: W0311: Bad indentation. Found 14 spaces, expected 12 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1233:0: W0311: Bad indentation. Found 14 spaces, expected 12 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1234:0: W0311: Bad indentation. Found 14 spaces, expected 12 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1235:0: W0311: Bad indentation. Found 14 spaces, expected 12 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1237:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1238:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1239:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1240:0: W0311: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1241:0: W0311: Bad indentation. Found 20 spaces, expected 16 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1242:0: W0311: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1245:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1246:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1247:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1248:0: W0311: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1249:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1250:0: W0311: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1251:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1252:0: C0301: Line too long (108/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:1252:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1255:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1256:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1257:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1258:0: W0311: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1259:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1260:0: W0311: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1261:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1262:0: C0301: Line too long (106/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:1262:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1265:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1266:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1267:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1267:0: C0325: Unnecessary parens after '=' keyword (superfluous-parens)
opencda/scenario_testing/utils/sim_api.py:1268:0: C0301: Line too long (190/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:1268:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1270:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1271:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1272:0: W0311: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1273:0: W0311: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1274:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1275:0: W0311: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1276:0: C0301: Line too long (130/100) (line-too-long)
opencda/scenario_testing/utils/sim_api.py:1276:0: W0311: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1278:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1279:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1288:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1289:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1291:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1294:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1296:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1297:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1302:0: W0311: Bad indentation. Found 12 spaces, expected 8 (bad-indentation)
opencda/scenario_testing/utils/sim_api.py:1:0: C0302: Too many lines in module (1304/1000) (too-many-lines)
opencda/scenario_testing/utils/sim_api.py:64:1: W0511: TODO: make base ecloud folder (fixme)
opencda/scenario_testing/utils/sim_api.py:75:30: W0511: TODO: config (fixme)
opencda/scenario_testing/utils/sim_api.py:87:30: W0511: TODO: config (fixme)
opencda/scenario_testing/utils/sim_api.py:244:21: W0511: idle_time_ms = idle_time_ms if idle_time_ms > 0 else 0 # TODO: confirm if we wantt to do this? (fixme)
opencda/scenario_testing/utils/sim_api.py:443:13: W0511: TODO: support multiple edges... (fixme)
opencda/scenario_testing/utils/sim_api.py:949:9: W0511: TODO: needs to support multiple edges. (fixme)
opencda/scenario_testing/utils/sim_api.py:19:0: W0404: Reimport 'random' (imported line 12) (reimported)
opencda/scenario_testing/utils/sim_api.py:28:0: C0410: Multiple imports on one line (coloredlogs, logging) (multiple-imports)
opencda/scenario_testing/utils/sim_api.py:30:0: W0404: Reimport 'time' (imported line 17) (reimported)
opencda/scenario_testing/utils/sim_api.py:32:0: W0404: Reimport 'Queue' (imported line 11) (reimported)
opencda/scenario_testing/utils/sim_api.py:34:0: E0611: No name 'Timestamp' in module 'google.protobuf.timestamp_pb2' (no-name-in-module)
opencda/scenario_testing/utils/sim_api.py:158:0: R0902: Too many instance attributes (22/7) (too-many-instance-attributes)
opencda/scenario_testing/utils/sim_api.py:216:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/utils/sim_api.py:223:16: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/utils/sim_api.py:224:16: C0103: Variable name "u" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/utils/sim_api.py:245:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/scenario_testing/utils/sim_api.py:246:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/scenario_testing/utils/sim_api.py:247:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/scenario_testing/utils/sim_api.py:255:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/scenario_testing/utils/sim_api.py:257:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/utils/sim_api.py:271:20: C0103: Variable name "t" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/utils/sim_api.py:280:20: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/utils/sim_api.py:286:8: C0103: Variable name "e" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/utils/sim_api.py:287:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/scenario_testing/utils/sim_api.py:291:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/utils/sim_api.py:296:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/utils/sim_api.py:311:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/scenario_testing/utils/sim_api.py:323:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/utils/sim_api.py:326:14: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
opencda/scenario_testing/utils/sim_api.py:333:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/scenario_testing/utils/sim_api.py:333:20: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
opencda/scenario_testing/utils/sim_api.py:337:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/scenario_testing/utils/sim_api.py:337:20: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
opencda/scenario_testing/utils/sim_api.py:342:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/utils/sim_api.py:349:4: R0913: Too many arguments (9/5) (too-many-arguments)
opencda/scenario_testing/utils/sim_api.py:349:4: R0914: Too many local variables (16/15) (too-many-locals)
opencda/scenario_testing/utils/sim_api.py:368:29: R1714: Consider merging these comparisons with 'in' by using 'ECLOUD_IP in ('localhost', CARLA_IP)'. Use a set instead if elements are hashable. (consider-using-in)
opencda/scenario_testing/utils/sim_api.py:373:12: C0103: Variable name "e" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/utils/sim_api.py:378:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/scenario_testing/utils/sim_api.py:378:28: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
opencda/scenario_testing/utils/sim_api.py:379:16: W1510: 'subprocess.run' used without explicitly defining the value for 'check'. (subprocess-run-check)
opencda/scenario_testing/utils/sim_api.py:401:16: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
opencda/scenario_testing/utils/sim_api.py:437:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/scenario_testing/utils/sim_api.py:448:12: W0199: Assert called on a populated tuple. Did you mean 'assert x,y'? (assert-on-tuple)
opencda/scenario_testing/utils/sim_api.py:452:15: C0121: Comparison 'apply_ml == True' should be 'apply_ml is True' if checking for the singleton value True, or 'apply_ml' if testing for truthiness (singleton-comparison)
opencda/scenario_testing/utils/sim_api.py:453:16: W0199: Assert called on a populated tuple. Did you mean 'assert x,y'? (assert-on-tuple)
opencda/scenario_testing/utils/sim_api.py:349:4: R0912: Too many branches (19/12) (too-many-branches)
opencda/scenario_testing/utils/sim_api.py:349:4: R0915: Too many statements (74/50) (too-many-statements)
opencda/scenario_testing/utils/sim_api.py:381:41: R1732: Consider using 'with' for resource-allocating operations (consider-using-with)
opencda/scenario_testing/utils/sim_api.py:475:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/utils/sim_api.py:602:12: W0612: Unused variable 'i' (unused-variable)
opencda/scenario_testing/utils/sim_api.py:648:37: C0103: Argument name "tm" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/utils/sim_api.py:678:12: W0612: Unused variable 'i' (unused-variable)
opencda/scenario_testing/utils/sim_api.py:711:37: C0103: Argument name "tm" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/utils/sim_api.py:711:4: R0914: Too many local variables (26/15) (too-many-locals)
opencda/scenario_testing/utils/sim_api.py:750:16: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/utils/sim_api.py:751:20: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/utils/sim_api.py:828:8: C0103: Variable name "tm" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/utils/sim_api.py:856:15: C0121: Comparison 'spectator != None' should be 'spectator is not None' (singleton-comparison)
opencda/scenario_testing/utils/sim_api.py:860:16: W0702: No exception type(s) specified (bare-except)
opencda/scenario_testing/utils/sim_api.py:863:12: R1732: Consider using 'with' for resource-allocating operations (consider-using-with)
opencda/scenario_testing/utils/sim_api.py:867:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/scenario_testing/utils/sim_api.py:867:21: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
opencda/scenario_testing/utils/sim_api.py:902:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/scenario_testing/utils/sim_api.py:875:31: W0613: Unused argument 'map_helper' (unused-argument)
opencda/scenario_testing/utils/sim_api.py:929:4: R0913: Too many arguments (7/5) (too-many-arguments)
opencda/scenario_testing/utils/sim_api.py:929:4: R0914: Too many local variables (18/15) (too-many-locals)
opencda/scenario_testing/utils/sim_api.py:958:12: C0103: Variable name "e" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/utils/sim_api.py:963:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/scenario_testing/utils/sim_api.py:983:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/scenario_testing/utils/sim_api.py:985:16: E1121: Too many positional arguments for method call (too-many-function-args)
opencda/scenario_testing/utils/sim_api.py:930:28: W0613: Unused argument 'map_helper' (unused-argument)
opencda/scenario_testing/utils/sim_api.py:958:12: W0612: Unused variable 'e' (unused-variable)
opencda/scenario_testing/utils/sim_api.py:961:31: W0612: Unused variable 'cav' (unused-variable)
opencda/scenario_testing/utils/sim_api.py:1010:8: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
opencda/scenario_testing/utils/sim_api.py:1010:20: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/utils/sim_api.py:1039:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/scenario_testing/utils/sim_api.py:1039:21: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
opencda/scenario_testing/utils/sim_api.py:1041:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/scenario_testing/utils/sim_api.py:1041:21: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
opencda/scenario_testing/utils/sim_api.py:1046:8: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
opencda/scenario_testing/utils/sim_api.py:1046:20: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/scenario_testing/utils/sim_api.py:1087:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/scenario_testing/utils/sim_api.py:1087:20: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
opencda/scenario_testing/utils/sim_api.py:1089:38: R1714: Consider merging these comparisons with 'in' by using 'ECLOUD_IP in ('localhost', CARLA_IP)'. Use a set instead if elements are hashable. (consider-using-in)
opencda/scenario_testing/utils/sim_api.py:1094:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/utils/sim_api.py:1095:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/scenario_testing/utils/sim_api.py:1106:8: W0702: No exception type(s) specified (bare-except)
opencda/scenario_testing/utils/sim_api.py:1107:25: R1732: Consider using 'with' for resource-allocating operations (consider-using-with)
opencda/scenario_testing/utils/sim_api.py:1110:21: R1732: Consider using 'with' for resource-allocating operations (consider-using-with)
opencda/scenario_testing/utils/sim_api.py:1119:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/utils/sim_api.py:1120:8: C0103: Variable name "PLANER_AGENT_STEPS" doesn't conform to snake_case naming style (invalid-name)
opencda/scenario_testing/utils/sim_api.py:1138:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/utils/sim_api.py:1147:19: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
opencda/scenario_testing/utils/sim_api.py:1150:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/utils/sim_api.py:1158:19: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
opencda/scenario_testing/utils/sim_api.py:1161:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/utils/sim_api.py:1169:19: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
opencda/scenario_testing/utils/sim_api.py:1172:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/utils/sim_api.py:1181:19: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
opencda/scenario_testing/utils/sim_api.py:1184:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/scenario_testing/utils/sim_api.py:1199:4: R0914: Too many local variables (21/15) (too-many-locals)
opencda/scenario_testing/utils/sim_api.py:1218:45: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
opencda/scenario_testing/utils/sim_api.py:1220:49: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
opencda/scenario_testing/utils/sim_api.py:1222:45: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
opencda/scenario_testing/utils/sim_api.py:1224:47: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
opencda/scenario_testing/utils/sim_api.py:1274:12: W0702: No exception type(s) specified (bare-except)
opencda/scenario_testing/utils/sim_api.py:1275:29: R1732: Consider using 'with' for resource-allocating operations (consider-using-with)
opencda/scenario_testing/utils/sim_api.py:1199:4: R0912: Too many branches (13/12) (too-many-branches)
opencda/scenario_testing/utils/sim_api.py:1199:4: R0915: Too many statements (59/50) (too-many-statements)
opencda/scenario_testing/utils/sim_api.py:1278:25: R1732: Consider using 'with' for resource-allocating operations (consider-using-with)
opencda/scenario_testing/utils/sim_api.py:1216:12: W0612: Unused variable 'num_clients' (unused-variable)
opencda/scenario_testing/utils/sim_api.py:476:8: W0201: Attribute 'push_q' defined outside __init__ (attribute-defined-outside-init)
opencda/scenario_testing/utils/sim_api.py:477:8: W0201: Attribute 'push_server' defined outside __init__ (attribute-defined-outside-init)
opencda/scenario_testing/utils/sim_api.py:158:0: R0904: Too many public methods (30/20) (too-many-public-methods)
opencda/scenario_testing/utils/sim_api.py:28:0: C0411: standard import "import coloredlogs, logging" should be placed before "import coloredlogs, logging" (wrong-import-order)
opencda/scenario_testing/utils/sim_api.py:29:0: C0411: standard import "import threading" should be placed before "import coloredlogs, logging" (wrong-import-order)
opencda/scenario_testing/utils/sim_api.py:30:0: C0411: standard import "import time" should be placed before "import coloredlogs, logging" (wrong-import-order)
opencda/scenario_testing/utils/sim_api.py:31:0: C0411: standard import "from typing import Iterable" should be placed before "import coloredlogs, logging" (wrong-import-order)
opencda/scenario_testing/utils/sim_api.py:32:0: C0411: standard import "from queue import Queue" should be placed before "import coloredlogs, logging" (wrong-import-order)
opencda/scenario_testing/utils/sim_api.py:33:0: C0411: standard import "import heapq" should be placed before "import coloredlogs, logging" (wrong-import-order)
opencda/scenario_testing/utils/sim_api.py:42:0: C0411: third party import "import carla" should be placed before "import ecloud_pb2 as ecloud" (wrong-import-order)
opencda/scenario_testing/utils/sim_api.py:43:0: C0411: third party import "import numpy as np" should be placed before "import ecloud_pb2 as ecloud" (wrong-import-order)
opencda/scenario_testing/utils/sim_api.py:44:0: C0411: third party import "import pandas as pd" should be placed before "import ecloud_pb2 as ecloud" (wrong-import-order)
opencda/scenario_testing/utils/sim_api.py:45:0: C0411: standard import "import pickle" should be placed before "import coloredlogs, logging" (wrong-import-order)
opencda/scenario_testing/utils/sim_api.py:47:0: C0411: third party import "import matplotlib.pyplot as plt" should be placed before "import ecloud_pb2 as ecloud" (wrong-import-order)
opencda/scenario_testing/utils/sim_api.py:19:0: C0412: Imports from package random are not grouped (ungrouped-imports)
opencda/scenario_testing/utils/sim_api.py:30:0: C0412: Imports from package time are not grouped (ungrouped-imports)
opencda/scenario_testing/utils/sim_api.py:32:0: C0412: Imports from package queue are not grouped (ungrouped-imports)
opencda/scenario_testing/utils/sim_api.py:11:0: W0611: Unused Queue imported from queue (unused-import)
opencda/scenario_testing/utils/sim_api.py:13:0: W0611: Unused connect imported from sqlite3 (unused-import)
opencda/scenario_testing/utils/sim_api.py:16:0: W0611: Unused import socket (unused-import)
opencda/scenario_testing/utils/sim_api.py:20:0: W0611: Unused import copy (unused-import)
opencda/scenario_testing/utils/sim_api.py:21:0: W0611: Unused import hashlib (unused-import)
opencda/scenario_testing/utils/sim_api.py:27:0: W0611: Unused ThreadPoolExecutor imported from concurrent.futures (unused-import)
opencda/scenario_testing/utils/sim_api.py:27:0: W0611: Unused thread imported from concurrent.futures (unused-import)
opencda/scenario_testing/utils/sim_api.py:29:0: W0611: Unused import threading (unused-import)
opencda/scenario_testing/utils/sim_api.py:31:0: W0611: Unused Iterable imported from typing (unused-import)
opencda/scenario_testing/utils/sim_api.py:33:0: W0611: Unused import heapq (unused-import)
opencda/scenario_testing/utils/sim_api.py:36:0: W0611: Unused MessageToJson imported from google.protobuf.json_format (unused-import)
opencda/scenario_testing/utils/sim_api.py:66:0: W0611: Unused EcloudPushServer imported from opencda.ecloud_server.ecloud_comms (unused-import)
************* Module OpenCDA.opencda.scenario_testing.utils.customized_map_api
opencda/scenario_testing/utils/customized_map_api.py:14:0: C0115: Missing class docstring (missing-class-docstring)
opencda/scenario_testing/utils/customized_map_api.py:14:0: C0103: Class name "bcolors" doesn't conform to PascalCase naming style (invalid-name)
opencda/scenario_testing/utils/customized_map_api.py:14:0: R0903: Too few public methods (0/2) (too-few-public-methods)
opencda/scenario_testing/utils/customized_map_api.py:38:4: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
opencda/scenario_testing/utils/customized_map_api.py:39:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
opencda/scenario_testing/utils/customized_map_api.py:45:14: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
************* Module OpenCDA.opencda.scenario_testing.utils.yaml_utils
opencda/scenario_testing/utils/yaml_utils.py:65:0: C0305: Trailing newlines (trailing-newlines)
opencda/scenario_testing/utils/yaml_utils.py:27:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
opencda/scenario_testing/utils/yaml_utils.py:27:13: R1732: Consider using 'with' for resource-allocating operations (consider-using-with)
opencda/scenario_testing/utils/yaml_utils.py:63:9: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
opencda/scenario_testing/utils/yaml_utils.py:10:0: C0411: standard import "from datetime import datetime" should be placed before "import yaml" (wrong-import-order)
************* Module OpenCDA.opencda.customize.ml_libs.ml_manager
opencda/customize/ml_libs/ml_manager.py:21:0: R0205: Class 'MLManager' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/customize/ml_libs/ml_manager.py:70:12: C0103: Variable name "x1" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/ml_libs/ml_manager.py:70:16: C0103: Variable name "y1" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/ml_libs/ml_manager.py:70:20: C0103: Variable name "x2" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/ml_libs/ml_manager.py:70:24: C0103: Variable name "y2" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/ml_libs/ml_manager.py:75:12: E1101: Module 'cv2' has no 'rectangle' member (no-member)
opencda/customize/ml_libs/ml_manager.py:77:12: E1101: Module 'cv2' has no 'putText' member (no-member)
opencda/customize/ml_libs/ml_manager.py:78:24: E1101: Module 'cv2' has no 'FONT_HERSHEY_SIMPLEX' member (no-member)
opencda/customize/ml_libs/ml_manager.py:21:0: R0903: Too few public methods (1/2) (too-few-public-methods)
opencda/customize/ml_libs/ml_manager.py:94:11: R1719: The if expression can be replaced with 'test' (simplifiable-if-expression)
************* Module OpenCDA.opencda.customize.core.sensing.localization.extented_kalman_filter
opencda/customize/core/sensing/localization/extented_kalman_filter.py:35:8: C0103: Attribute name "Q" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:42:8: C0103: Attribute name "R" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:46:8: C0103: Attribute name "xEst" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:47:8: C0103: Attribute name "PEst" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:12:0: R0205: Class 'ExtentedKalmanFilter' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:33:23: C0103: Argument name "dt" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:49:27: C0103: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:49:30: C0103: Argument name "u" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:61:8: C0103: Variable name "F" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:66:8: C0103: Variable name "B" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:75:22: C0103: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:75:25: C0103: Argument name "u" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:86:8: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:87:8: C0103: Variable name "jF" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:97:32: C0103: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:108:8: C0103: Variable name "H" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:114:8: C0103: Variable name "z" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:118:28: C0103: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:118:31: C0103: Argument name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:134:23: C0103: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:134:26: C0103: Argument name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:134:4: R0913: Too many arguments (6/5) (too-many-arguments)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:152:8: C0103: Variable name "z" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:154:8: C0103: Variable name "u" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:157:8: C0103: Variable name "xPred" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:158:8: C0103: Variable name "jF" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:159:8: C0103: Variable name "PPred" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:162:8: C0103: Variable name "jH" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:166:8: C0103: Variable name "zPred" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:168:8: C0103: Variable name "S" doesn't conform to snake_case naming style (invalid-name)
opencda/customize/core/sensing/localization/extented_kalman_filter.py:169:8: C0103: Variable name "K" doesn't conform to snake_case naming style (invalid-name)
************* Module OpenCDA.opencda.customize.core.sensing.localization.localization_manager
opencda/customize/core/sensing/localization/localization_manager.py:32:8: R1725: Consider using Python 3 style super() without arguments (super-with-arguments)
************* Module OpenCDA.opencda.core.plan.global_route_planner_dao
opencda/core/plan/global_route_planner_dao.py:13:0: R0205: Class 'GlobalRoutePlannerDAO' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/plan/global_route_planner_dao.py:31:4: R0914: Too many local variables (16/15) (too-many-locals)
opencda/core/plan/global_route_planner_dao.py:50:12: C0103: Variable name "l1" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/global_route_planner_dao.py:50:16: C0103: Variable name "l2" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/global_route_planner_dao.py:52:12: C0103: Variable name "x1" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/global_route_planner_dao.py:52:16: C0103: Variable name "y1" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/global_route_planner_dao.py:52:20: C0103: Variable name "z1" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/global_route_planner_dao.py:52:24: C0103: Variable name "x2" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/global_route_planner_dao.py:52:28: C0103: Variable name "y2" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/global_route_planner_dao.py:52:32: C0103: Variable name "z2" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/global_route_planner_dao.py:55:23: R1735: Consider using '{}' instead of a call to 'dict'. (use-dict-literal)
opencda/core/plan/global_route_planner_dao.py:63:16: C0103: Variable name "w" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/global_route_planner_dao.py:67:20: C0103: Variable name "w" doesn't conform to snake_case naming style (invalid-name)
************* Module OpenCDA.opencda.core.plan.spline
opencda/core/plan/spline.py:39:8: C0103: Attribute name "b" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:39:16: C0103: Attribute name "c" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:39:24: C0103: Attribute name "d" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:39:32: C0103: Attribute name "w" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:41:8: C0103: Attribute name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:42:8: C0103: Attribute name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:44:8: C0103: Attribute name "nx" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:48:8: C0103: Attribute name "a" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:12:0: R0902: Too many instance attributes (8/7) (too-many-instance-attributes)
opencda/core/plan/spline.py:38:23: C0103: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:38:26: C0103: Argument name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:45:8: C0103: Variable name "h" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:48:18: R1721: Unnecessary use of a comprehension, use list(y) instead. (unnecessary-comprehension)
opencda/core/plan/spline.py:51:8: C0103: Variable name "A" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:52:8: C0103: Variable name "B" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:59:12: C0103: Variable name "tb" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:63:19: C0103: Argument name "t" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:75:8: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
opencda/core/plan/spline.py:81:8: C0103: Variable name "dx" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:87:20: C0103: Argument name "t" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:92:8: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
opencda/core/plan/spline.py:98:8: C0103: Variable name "dx" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:102:21: C0103: Argument name "t" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:107:8: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
opencda/core/plan/spline.py:113:8: C0103: Variable name "dx" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:117:29: C0103: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:123:4: C0103: Method name "__calc_A" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:123:23: C0103: Argument name "h" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:127:8: C0103: Variable name "A" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:141:4: C0103: Method name "__calc_B" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:141:23: C0103: Argument name "h" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:145:8: C0103: Variable name "B" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:180:8: C0103: Attribute name "s" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:181:8: C0103: Attribute name "sx" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:182:8: C0103: Attribute name "sy" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:187:8: C0103: Attribute name "ds" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:179:23: C0103: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:179:26: C0103: Argument name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:184:23: C0103: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:184:26: C0103: Argument name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:185:8: C0103: Variable name "dx" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:186:8: C0103: Variable name "dy" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:188:8: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:192:28: C0103: Argument name "s" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:196:8: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:197:8: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:201:29: C0103: Argument name "s" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:205:8: C0103: Variable name "dx" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:207:8: C0103: Variable name "dy" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:212:23: C0103: Argument name "s" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:216:8: C0103: Variable name "dx" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:217:8: C0103: Variable name "dy" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:222:23: C0103: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:222:26: C0103: Argument name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:222:29: C0103: Argument name "ds" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:238:4: C0103: Variable name "sp" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:239:4: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:241:4: C0103: Variable name "rx" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:241:8: C0103: Variable name "ry" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:241:18: C0103: Variable name "rk" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:243:8: C0103: Variable name "ix" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:243:12: C0103: Variable name "iy" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:257:4: C0415: Import outside toplevel (matplotlib.pyplot) (import-outside-toplevel)
opencda/core/plan/spline.py:258:4: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:259:4: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:260:4: C0103: Variable name "ds" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:262:4: C0103: Variable name "sp" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:263:4: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:265:4: C0103: Variable name "rx" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:265:8: C0103: Variable name "ry" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:265:18: C0103: Variable name "rk" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:267:8: C0103: Variable name "ix" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:267:12: C0103: Variable name "iy" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/spline.py:9:0: C0411: standard import "import bisect" should be placed before "import numpy as np" (wrong-import-order)
************* Module OpenCDA.opencda.core.plan.local_planner_behavior
opencda/core/plan/local_planner_behavior.py:84:0: C0301: Line too long (118/100) (line-too-long)
opencda/core/plan/local_planner_behavior.py:107:0: C0301: Line too long (101/100) (line-too-long)
opencda/core/plan/local_planner_behavior.py:209:19: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/plan/local_planner_behavior.py:323:26: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/plan/local_planner_behavior.py:374:0: C0301: Line too long (104/100) (line-too-long)
opencda/core/plan/local_planner_behavior.py:379:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/plan/local_planner_behavior.py:492:0: C0301: Line too long (113/100) (line-too-long)
opencda/core/plan/local_planner_behavior.py:444:9: W0511: todo: hard-coded, need to be tuned (fixme)
opencda/core/plan/local_planner_behavior.py:118:8: C0103: Attribute name "dt" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/local_planner_behavior.py:38:0: R0205: Class 'LocalPlanner' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/plan/local_planner_behavior.py:38:0: R0902: Too many instance attributes (21/7) (too-many-instance-attributes)
opencda/core/plan/local_planner_behavior.py:196:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/plan/local_planner_behavior.py:203:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/core/plan/local_planner_behavior.py:234:4: R0914: Too many local variables (35/15) (too-many-locals)
opencda/core/plan/local_planner_behavior.py:255:8: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/local_planner_behavior.py:256:8: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/local_planner_behavior.py:265:8: C0103: Variable name "ds" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/local_planner_behavior.py:311:8: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
opencda/core/plan/local_planner_behavior.py:353:8: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
opencda/core/plan/local_planner_behavior.py:365:8: C0103: Variable name "rx" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/local_planner_behavior.py:365:12: C0103: Variable name "ry" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/local_planner_behavior.py:365:22: C0103: Variable name "rk" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/local_planner_behavior.py:372:8: C0103: Variable name "sp" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/local_planner_behavior.py:381:8: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/local_planner_behavior.py:387:12: C0103: Variable name "ix" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/local_planner_behavior.py:387:16: C0103: Variable name "iy" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/local_planner_behavior.py:234:4: R0912: Too many branches (14/12) (too-many-branches)
opencda/core/plan/local_planner_behavior.py:234:4: R0915: Too many statements (72/50) (too-many-statements)
opencda/core/plan/local_planner_behavior.py:294:8: W0612: Unused variable 'lane_width' (unused-variable)
opencda/core/plan/local_planner_behavior.py:402:34: C0103: Argument name "rx" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/local_planner_behavior.py:402:38: C0103: Argument name "ry" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/local_planner_behavior.py:402:42: C0103: Argument name "rk" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/local_planner_behavior.py:402:4: R0914: Too many local variables (17/15) (too-many-locals)
opencda/core/plan/local_planner_behavior.py:422:8: C0103: Variable name "ds" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/local_planner_behavior.py:424:8: C0103: Variable name "dt" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/local_planner_behavior.py:448:12: W0612: Unused variable 'i' (unused-variable)
opencda/core/plan/local_planner_behavior.py:501:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/core/plan/local_planner_behavior.py:569:12: C0103: Argument name "rx" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/local_planner_behavior.py:570:12: C0103: Argument name "ry" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/local_planner_behavior.py:571:12: C0103: Argument name "rk" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/local_planner_behavior.py:567:4: R0913: Too many arguments (7/5) (too-many-arguments)
opencda/core/plan/local_planner_behavior.py:617:16: W0612: Unused variable 'i' (unused-variable)
opencda/core/plan/local_planner_behavior.py:613:8: W0201: Attribute '_target_speed' defined outside __init__ (attribute-defined-outside-init)
opencda/core/plan/local_planner_behavior.py:638:30: W0201: Attribute '_target_speed' defined outside __init__ (attribute-defined-outside-init)
opencda/core/plan/local_planner_behavior.py:638:8: W0201: Attribute 'target_waypoint' defined outside __init__ (attribute-defined-outside-init)
opencda/core/plan/local_planner_behavior.py:13:0: W0611: Unused import time (unused-import)
************* Module OpenCDA.opencda.core.plan.collision_check
opencda/core/plan/collision_check.py:40:4: R0914: Too many local variables (16/15) (too-many-locals)
opencda/core/plan/collision_check.py:105:15: R1719: The if expression can be replaced with 'test' (simplifiable-if-expression)
opencda/core/plan/collision_check.py:101:8: W0612: Unused variable 'distance' (unused-variable)
opencda/core/plan/collision_check.py:107:4: R0913: Too many arguments (6/5) (too-many-arguments)
opencda/core/plan/collision_check.py:107:4: R0914: Too many local variables (24/15) (too-many-locals)
opencda/core/plan/collision_check.py:149:8: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/collision_check.py:149:11: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/collision_check.py:155:8: C0103: Variable name "ds" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/collision_check.py:157:8: C0103: Variable name "sp" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/collision_check.py:158:8: C0103: Variable name "s" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/collision_check.py:163:8: C0103: Variable name "rx" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/collision_check.py:163:12: C0103: Variable name "ry" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/collision_check.py:165:12: C0103: Variable name "ix" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/collision_check.py:165:16: C0103: Variable name "iy" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/collision_check.py:108:49: W0613: Unused argument 'carla_map' (unused-argument)
opencda/core/plan/collision_check.py:108:60: W0613: Unused argument 'world' (unused-argument)
opencda/core/plan/collision_check.py:179:4: R0913: Too many arguments (8/5) (too-many-arguments)
opencda/core/plan/collision_check.py:179:4: R0914: Too many local variables (22/15) (too-many-locals)
opencda/core/plan/collision_check.py:13:0: W0611: Unused draw_trajetory_points imported from opencda.core.common.misc (unused-import)
************* Module OpenCDA.opencda.core.plan.planer_debug_helper
opencda/core/plan/planer_debug_helper.py:56:28: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/plan/planer_debug_helper.py:140:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/plan/planer_debug_helper.py:148:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/plan/planer_debug_helper.py:151:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/plan/planer_debug_helper.py:154:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/plan/planer_debug_helper.py:158:47: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/plan/planer_debug_helper.py:179:53: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/plan/planer_debug_helper.py:80:17: W0511: todo: time-step hardcoded (fixme)
opencda/core/plan/planer_debug_helper.py:144:9: W0511: TODO: extend instead of append? or [:] = ? (fixme)
opencda/core/plan/planer_debug_helper.py:19:0: R0205: Class 'PlanDebugHelper' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/plan/planer_debug_helper.py:61:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/plan/planer_debug_helper.py:85:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/plan/planer_debug_helper.py:110:24: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/plan/planer_debug_helper.py:124:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/plan/planer_debug_helper.py:127:23: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/plan/planer_debug_helper.py:130:23: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/plan/planer_debug_helper.py:136:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/core/plan/planer_debug_helper.py:137:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/core/plan/planer_debug_helper.py:141:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/plan/planer_debug_helper.py:160:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/plan/planer_debug_helper.py:15:0: W0611: Unused ecloud_pb2 imported as ecloud (unused-import)
************* Module OpenCDA.opencda.core.plan.drive_profile_plotting
opencda/core/plan/drive_profile_plotting.py:22:11: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/drive_profile_plotting.py:22:8: W0612: Unused variable 'i' (unused-variable)
opencda/core/plan/drive_profile_plotting.py:45:11: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/drive_profile_plotting.py:45:8: W0612: Unused variable 'i' (unused-variable)
opencda/core/plan/drive_profile_plotting.py:69:11: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/drive_profile_plotting.py:69:8: W0612: Unused variable 'i' (unused-variable)
opencda/core/plan/drive_profile_plotting.py:91:11: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/drive_profile_plotting.py:91:8: W0612: Unused variable 'i' (unused-variable)
opencda/core/plan/drive_profile_plotting.py:111:11: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/drive_profile_plotting.py:111:8: W0612: Unused variable 'i' (unused-variable)
opencda/core/plan/drive_profile_plotting.py:132:11: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/drive_profile_plotting.py:132:8: W0612: Unused variable 'i' (unused-variable)
opencda/core/plan/drive_profile_plotting.py:209:21: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/plan/drive_profile_plotting.py:210:47: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/plan/drive_profile_plotting.py:168:8: W0613: Unused argument 'ttc_list' (unused-argument)
************* Module OpenCDA.opencda.core.plan.global_route_planner
opencda/core/plan/global_route_planner.py:20:0: R0205: Class 'GlobalRoutePlanner' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/plan/global_route_planner.py:72:4: R0914: Too many local variables (20/15) (too-many-locals)
opencda/core/plan/global_route_planner.py:92:17: R1735: Consider using '{}' instead of a call to 'dict'. (use-dict-literal)
opencda/core/plan/global_route_planner.py:94:26: R1735: Consider using '{}' instead of a call to 'dict'. (use-dict-literal)
opencda/core/plan/global_route_planner.py:112:12: C0103: Variable name "n1" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/global_route_planner.py:113:12: C0103: Variable name "n2" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/global_route_planner.py:115:43: R1735: Consider using '{}' instead of a call to 'dict'. (use-dict-literal)
opencda/core/plan/global_route_planner.py:117:55: R1735: Consider using '{}' instead of a call to 'dict'. (use-dict-literal)
opencda/core/plan/global_route_planner.py:164:53: R1735: Consider using '{}' instead of a call to 'dict'. (use-dict-literal)
opencda/core/plan/global_route_planner.py:166:65: R1735: Consider using '{}' instead of a call to 'dict'. (use-dict-literal)
opencda/core/plan/global_route_planner.py:167:16: C0103: Variable name "n1" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/global_route_planner.py:168:16: C0103: Variable name "n2" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/global_route_planner.py:224:8: R1702: Too many nested blocks (6/5) (too-many-nested-blocks)
opencda/core/plan/global_route_planner.py:224:8: R1702: Too many nested blocks (6/5) (too-many-nested-blocks)
opencda/core/plan/global_route_planner.py:277:34: C0103: Argument name "n1" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/global_route_planner.py:277:38: C0103: Argument name "n2" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/global_route_planner.py:281:8: C0103: Variable name "l1" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/global_route_planner.py:282:8: C0103: Variable name "l2" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/global_route_planner.py:330:4: R0914: Too many local variables (21/15) (too-many-locals)
opencda/core/plan/global_route_planner.py:363:20: C0103: Variable name "cv" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/global_route_planner.py:363:24: C0103: Variable name "nv" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/global_route_planner.py:372:32: C0103: Variable name "sv" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/global_route_planner.py:341:8: R1702: Too many nested blocks (6/5) (too-many-nested-blocks)
opencda/core/plan/global_route_planner.py:330:4: R0912: Too many branches (17/12) (too-many-branches)
opencda/core/plan/global_route_planner.py:433:4: R0914: Too many local variables (19/15) (too-many-locals)
opencda/core/plan/global_route_planner.py:454:16: C0103: Variable name "n1" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/global_route_planner.py:454:20: C0103: Variable name "n2" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/global_route_planner.py:477:20: R1723: Unnecessary "elif" after "break", remove the leading "el" from "elif" (no-else-break)
************* Module OpenCDA.opencda.core.plan.behavior_agent
opencda/core/plan/behavior_agent.py:667:0: C0301: Line too long (126/100) (line-too-long)
opencda/core/plan/behavior_agent.py:692:0: C0301: Line too long (103/100) (line-too-long)
opencda/core/plan/behavior_agent.py:693:0: C0301: Line too long (121/100) (line-too-long)
opencda/core/plan/behavior_agent.py:694:0: C0301: Line too long (124/100) (line-too-long)
opencda/core/plan/behavior_agent.py:695:0: C0301: Line too long (121/100) (line-too-long)
opencda/core/plan/behavior_agent.py:795:0: C0301: Line too long (105/100) (line-too-long)
opencda/core/plan/behavior_agent.py:796:17: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/plan/behavior_agent.py:799:72: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/plan/behavior_agent.py:807:72: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/plan/behavior_agent.py:826:72: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/plan/behavior_agent.py:839:72: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/plan/behavior_agent.py:843:0: C0301: Line too long (121/100) (line-too-long)
opencda/core/plan/behavior_agent.py:845:72: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/plan/behavior_agent.py:855:72: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/plan/behavior_agent.py:861:0: C0301: Line too long (114/100) (line-too-long)
opencda/core/plan/behavior_agent.py:884:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/plan/behavior_agent.py:915:0: C0301: Line too long (136/100) (line-too-long)
opencda/core/plan/behavior_agent.py:916:72: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/plan/behavior_agent.py:917:74: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/plan/behavior_agent.py:927:63: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/plan/behavior_agent.py:935:59: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/plan/behavior_agent.py:938:73: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/plan/behavior_agent.py:947:73: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/plan/behavior_agent.py:950:0: C0305: Trailing newlines (trailing-newlines)
opencda/core/plan/behavior_agent.py:804:13: W0511: TODO - eCLOUD: (we have no traffic lights in sims yet) (fixme)
opencda/core/plan/behavior_agent.py:28:0: R0205: Class 'BehaviorAgent' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/plan/behavior_agent.py:28:0: R0902: Too many instance attributes (34/7) (too-many-instance-attributes)
opencda/core/plan/behavior_agent.py:190:29: C0103: Argument name "vm" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/behavior_agent.py:215:12: C0103: Variable name "o" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/behavior_agent.py:223:16: C0103: Variable name "vm" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/behavior_agent.py:243:4: R0913: Too many arguments (6/5) (too-many-arguments)
opencda/core/plan/behavior_agent.py:325:8: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
opencda/core/plan/behavior_agent.py:390:16: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
opencda/core/plan/behavior_agent.py:401:12: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
opencda/core/plan/behavior_agent.py:410:32: C0103: Argument name "rx" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/behavior_agent.py:410:36: C0103: Argument name "ry" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/behavior_agent.py:410:4: R0913: Too many arguments (6/5) (too-many-arguments)
opencda/core/plan/behavior_agent.py:432:17: C0103: Argument name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/behavior_agent.py:483:12: R1714: Consider merging these comparisons with 'in' by using 'left_turn in (carla.LaneChange.Left, carla.LaneChange.Both)'. Use a set instead if elements are hashable. (consider-using-in)
opencda/core/plan/behavior_agent.py:490:12: C0103: Variable name "rx" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/behavior_agent.py:490:16: C0103: Variable name "ry" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/behavior_agent.py:513:12: R1714: Consider merging these comparisons with 'in' by using 'right_turn in (carla.LaneChange.Right, carla.LaneChange.Both)'. Use a set instead if elements are hashable. (consider-using-in)
opencda/core/plan/behavior_agent.py:518:12: C0103: Variable name "rx" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/behavior_agent.py:518:16: C0103: Variable name "ry" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/behavior_agent.py:567:8: C0103: Variable name "rx" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/behavior_agent.py:567:12: C0103: Variable name "ry" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/behavior_agent.py:642:12: C0103: Variable name "tl" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/behavior_agent.py:664:92: C0103: Argument name "rk" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/behavior_agent.py:739:8: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
opencda/core/plan/behavior_agent.py:740:12: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/plan/behavior_agent.py:747:4: R0914: Too many local variables (26/15) (too-many-locals)
opencda/core/plan/behavior_agent.py:794:12: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
opencda/core/plan/behavior_agent.py:825:8: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
opencda/core/plan/behavior_agent.py:825:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/plan/behavior_agent.py:836:8: C0103: Variable name "rx" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/behavior_agent.py:836:12: C0103: Variable name "ry" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/behavior_agent.py:836:16: C0103: Variable name "rk" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/behavior_agent.py:838:8: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
opencda/core/plan/behavior_agent.py:838:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/plan/behavior_agent.py:882:12: C0103: Variable name "rx" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/behavior_agent.py:882:16: C0103: Variable name "ry" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/behavior_agent.py:882:20: C0103: Variable name "rk" doesn't conform to snake_case naming style (invalid-name)
opencda/core/plan/behavior_agent.py:915:8: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
opencda/core/plan/behavior_agent.py:915:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/plan/behavior_agent.py:946:8: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
opencda/core/plan/behavior_agent.py:946:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/plan/behavior_agent.py:747:4: R0912: Too many branches (19/12) (too-many-branches)
opencda/core/plan/behavior_agent.py:747:4: R0915: Too many statements (102/50) (too-many-statements)
opencda/core/plan/behavior_agent.py:16:0: C0411: third party import "import numpy as np" should be placed before "import opencda.logging_ecloud" (wrong-import-order)
opencda/core/plan/behavior_agent.py:17:0: C0411: third party import "import carla" should be placed before "import opencda.logging_ecloud" (wrong-import-order)
opencda/core/plan/behavior_agent.py:10:0: W0611: Unused import math (unused-import)
opencda/core/plan/behavior_agent.py:15:0: W0611: Unused import opencda.logging_ecloud (unused-import)
************* Module OpenCDA.opencda.core.actuation.control_manager
opencda/core/actuation/control_manager.py:11:0: R0205: Class 'ControlManager' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/actuation/control_manager.py:31:16: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
************* Module OpenCDA.opencda.core.actuation.pid_controller
opencda/core/actuation/pid_controller.py:240:0: C0304: Final newline missing (missing-final-newline)
opencda/core/actuation/pid_controller.py:70:8: C0103: Attribute name "dt" doesn't conform to snake_case naming style (invalid-name)
opencda/core/actuation/pid_controller.py:20:0: R0902: Too many instance attributes (16/7) (too-many-instance-attributes)
opencda/core/actuation/pid_controller.py:84:8: W0107: Unnecessary pass statement (unnecessary-pass)
************* Module OpenCDA.opencda.core.sensing.localization.kalman_filter
opencda/core/sensing/localization/kalman_filter.py:41:8: C0103: Attribute name "Q" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/kalman_filter.py:49:8: C0103: Attribute name "R" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/kalman_filter.py:53:8: C0103: Attribute name "xEst" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/kalman_filter.py:54:8: C0103: Attribute name "PEst" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/kalman_filter.py:13:0: R0205: Class 'KalmanFilter' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/sensing/localization/kalman_filter.py:40:23: C0103: Argument name "dt" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/kalman_filter.py:56:27: C0103: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/kalman_filter.py:56:30: C0103: Argument name "u" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/kalman_filter.py:74:8: C0103: Variable name "F" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/kalman_filter.py:79:8: C0103: Variable name "B" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/kalman_filter.py:88:32: C0103: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/kalman_filter.py:103:8: C0103: Variable name "H" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/kalman_filter.py:109:8: C0103: Variable name "z" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/kalman_filter.py:113:28: C0103: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/kalman_filter.py:113:31: C0103: Argument name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/kalman_filter.py:137:23: C0103: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/kalman_filter.py:137:26: C0103: Argument name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/kalman_filter.py:137:4: R0913: Too many arguments (6/5) (too-many-arguments)
opencda/core/sensing/localization/kalman_filter.py:164:8: C0103: Variable name "z" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/kalman_filter.py:166:8: C0103: Variable name "u" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/kalman_filter.py:169:8: C0103: Variable name "xPred" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/kalman_filter.py:171:8: C0103: Variable name "zPred" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/kalman_filter.py:175:8: C0103: Variable name "H" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/kalman_filter.py:182:8: C0103: Variable name "F" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/kalman_filter.py:187:8: C0103: Variable name "PPred" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/kalman_filter.py:188:8: C0103: Variable name "S" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/kalman_filter.py:189:8: C0103: Variable name "K" doesn't conform to snake_case naming style (invalid-name)
************* Module OpenCDA.opencda.core.sensing.localization.coordinate_transform
opencda/core/sensing/localization/coordinate_transform.py:10:0: R0913: Too many arguments (6/5) (too-many-arguments)
opencda/core/sensing/localization/coordinate_transform.py:47:4: C0103: Variable name "EARTH_RADIUS_EQUA" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/coordinate_transform.py:50:4: C0103: Variable name "mx" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/coordinate_transform.py:52:4: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/coordinate_transform.py:54:4: C0103: Variable name "my" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/coordinate_transform.py:57:4: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/coordinate_transform.py:59:4: C0103: Variable name "z" doesn't conform to snake_case naming style (invalid-name)
************* Module OpenCDA.opencda.core.sensing.localization.localization_debug_helper
opencda/core/sensing/localization/localization_debug_helper.py:184:68: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/sensing/localization/localization_debug_helper.py:303:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/sensing/localization/localization_debug_helper.py:309:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/sensing/localization/localization_debug_helper.py:312:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/sensing/localization/localization_debug_helper.py:315:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/sensing/localization/localization_debug_helper.py:321:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/sensing/localization/localization_debug_helper.py:324:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/sensing/localization/localization_debug_helper.py:327:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/sensing/localization/localization_debug_helper.py:345:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/sensing/localization/localization_debug_helper.py:353:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/sensing/localization/localization_debug_helper.py:357:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/sensing/localization/localization_debug_helper.py:361:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/sensing/localization/localization_debug_helper.py:369:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/sensing/localization/localization_debug_helper.py:373:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/sensing/localization/localization_debug_helper.py:377:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/sensing/localization/localization_debug_helper.py:380:0: C0304: Final newline missing (missing-final-newline)
opencda/core/sensing/localization/localization_debug_helper.py:293:9: W0511: TODO: extend instead of append? or [:] = ? (fixme)
opencda/core/sensing/localization/localization_debug_helper.py:88:8: C0103: Attribute name "hxEst" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/localization_debug_helper.py:90:8: C0103: Attribute name "hTrue" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/localization_debug_helper.py:92:8: C0103: Attribute name "hz" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/localization_debug_helper.py:15:0: R0205: Class 'LocDebugHelper' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/sensing/localization/localization_debug_helper.py:15:0: R0902: Too many instance attributes (19/7) (too-many-instance-attributes)
opencda/core/sensing/localization/localization_debug_helper.py:96:4: R0913: Too many arguments (13/5) (too-many-arguments)
opencda/core/sensing/localization/localization_debug_helper.py:96:4: R0914: Too many local variables (16/15) (too-many-locals)
opencda/core/sensing/localization/localization_debug_helper.py:140:12: C0103: Variable name "xEst" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/localization_debug_helper.py:141:12: C0103: Variable name "zTrue" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/localization_debug_helper.py:142:12: C0103: Variable name "z" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/localization_debug_helper.py:149:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/sensing/localization/localization_debug_helper.py:236:28: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/sensing/localization/localization_debug_helper.py:257:26: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/sensing/localization/localization_debug_helper.py:283:27: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/sensing/localization/localization_debug_helper.py:292:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/sensing/localization/localization_debug_helper.py:331:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/sensing/localization/localization_debug_helper.py:10:0: C0411: standard import "import warnings" should be placed before "import numpy as np" (wrong-import-order)
************* Module OpenCDA.opencda.core.sensing.localization.localization_manager
opencda/core/sensing/localization/localization_manager.py:22:0: R0205: Class 'GnssSensor' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/sensing/localization/localization_manager.py:22:0: R0903: Too few public methods (0/2) (too-few-public-methods)
opencda/core/sensing/localization/localization_manager.py:92:0: R0205: Class 'ImuSensor' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/sensing/localization/localization_manager.py:127:4: C0103: Method name "_IMU_callback" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/localization_manager.py:92:0: R0903: Too few public methods (0/2) (too-few-public-methods)
opencda/core/sensing/localization/localization_manager.py:202:12: C0103: Attribute name "dt" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/localization_manager.py:204:12: C0103: Attribute name "kf" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/localization_manager.py:149:0: R0205: Class 'LocalizationManager' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/sensing/localization/localization_manager.py:149:0: R0902: Too many instance attributes (15/7) (too-many-instance-attributes)
opencda/core/sensing/localization/localization_manager.py:223:12: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/localization_manager.py:223:15: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/localization_manager.py:223:18: C0103: Variable name "z" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/localization/localization_manager.py:246:20: E1136: Value 'self.imu.gyroscope' is unsubscriptable (unsubscriptable-object)
************* Module OpenCDA.opencda.core.sensing.perception.obstacle_vehicle
opencda/core/sensing/perception/obstacle_vehicle.py:230:0: C0305: Trailing newlines (trailing-newlines)
opencda/core/sensing/perception/obstacle_vehicle.py:109:13: W0511: todo: next version will add rotation estimation (fixme)
opencda/core/sensing/perception/obstacle_vehicle.py:191:17: W0511: todo: consider the yaw angle in the future (fixme)
opencda/core/sensing/perception/obstacle_vehicle.py:29:11: R1719: The if expression can be replaced with 'test' (simplifiable-if-expression)
opencda/core/sensing/perception/obstacle_vehicle.py:32:0: R0205: Class 'BoundingBox' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/sensing/perception/obstacle_vehicle.py:32:0: R0903: Too few public methods (0/2) (too-few-public-methods)
opencda/core/sensing/perception/obstacle_vehicle.py:60:0: R0205: Class 'ObstacleVehicle' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/sensing/perception/obstacle_vehicle.py:103:4: R0913: Too many arguments (6/5) (too-many-arguments)
opencda/core/sensing/perception/obstacle_vehicle.py:116:33: R1735: Consider using '{}' instead of a call to 'dict'. (use-dict-literal)
opencda/core/sensing/perception/obstacle_vehicle.py:137:27: C0103: Argument name "id" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/perception/obstacle_vehicle.py:137:27: W0622: Redefining built-in 'id' (redefined-builtin)
opencda/core/sensing/perception/obstacle_vehicle.py:8:0: W0611: Unused import sys (unused-import)
************* Module OpenCDA.opencda.core.sensing.perception.perception_manager
opencda/core/sensing/perception/perception_manager.py:187:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/sensing/perception/perception_manager.py:269:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/sensing/perception/perception_manager.py:450:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/sensing/perception/perception_manager.py:681:9: W0511: todo: consider the minimum distance to be safer in next version (fixme)
opencda/core/sensing/perception/perception_manager.py:702:29: W0511: todo: consider the yaw angle in the future (fixme)
opencda/core/sensing/perception/perception_manager.py:29:0: R0903: Too few public methods (0/2) (too-few-public-methods)
opencda/core/sensing/perception/perception_manager.py:120:0: R0903: Too few public methods (0/2) (too-few-public-methods)
opencda/core/sensing/perception/perception_manager.py:207:0: R0902: Too many instance attributes (8/7) (too-many-instance-attributes)
opencda/core/sensing/perception/perception_manager.py:207:0: R0903: Too few public methods (0/2) (too-few-public-methods)
opencda/core/sensing/perception/perception_manager.py:295:0: R0902: Too many instance attributes (16/7) (too-many-instance-attributes)
opencda/core/sensing/perception/perception_manager.py:386:19: C0103: Argument name "a" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/perception/perception_manager.py:456:16: E1101: Module 'cv2' has no 'cvtColor' member (no-member)
opencda/core/sensing/perception/perception_manager.py:459:20: E1101: Module 'cv2' has no 'COLOR_BGR2RGB' member (no-member)
opencda/core/sensing/perception/perception_manager.py:493:28: E1101: Module 'cv2' has no 'resize' member (no-member)
opencda/core/sensing/perception/perception_manager.py:494:16: E1101: Module 'cv2' has no 'imshow' member (no-member)
opencda/core/sensing/perception/perception_manager.py:495:20: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/sensing/perception/perception_manager.py:497:12: E1101: Module 'cv2' has no 'waitKey' member (no-member)
opencda/core/sensing/perception/perception_manager.py:572:24: E1101: Module 'cv2' has no 'resize' member (no-member)
opencda/core/sensing/perception/perception_manager.py:575:12: E1101: Module 'cv2' has no 'imshow' member (no-member)
opencda/core/sensing/perception/perception_manager.py:576:16: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/sensing/perception/perception_manager.py:578:12: E1101: Module 'cv2' has no 'waitKey' member (no-member)
opencda/core/sensing/perception/perception_manager.py:622:22: E1136: Value 'semantic_idx' is unsubscriptable (unsubscriptable-object)
opencda/core/sensing/perception/perception_manager.py:646:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/perception/perception_manager.py:656:16: E1101: Module 'cv2' has no 'rectangle' member (no-member)
opencda/core/sensing/perception/perception_manager.py:682:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/perception/perception_manager.py:728:12: C0103: Variable name "tl" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/perception/perception_manager.py:748:12: E1101: Module 'cv2' has no 'destroyAllWindows' member (no-member)
************* Module OpenCDA.opencda.core.sensing.perception.o3d_lidar_libs
opencda/core/sensing/perception/o3d_lidar_libs.py:260:9: W0511: todo: refine the category (fixme)
opencda/core/sensing/perception/o3d_lidar_libs.py:99:10: E1101: Module 'open3d.visualization' has no 'Visualizer' member (no-member)
opencda/core/sensing/perception/o3d_lidar_libs.py:161:0: R0914: Too many local variables (22/15) (too-many-locals)
opencda/core/sensing/perception/o3d_lidar_libs.py:203:8: C0103: Variable name "x1" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/perception/o3d_lidar_libs.py:203:12: C0103: Variable name "y1" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/perception/o3d_lidar_libs.py:203:16: C0103: Variable name "x2" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/perception/o3d_lidar_libs.py:203:20: C0103: Variable name "y2" doesn't conform to snake_case naming style (invalid-name)
************* Module OpenCDA.opencda.core.sensing.perception.sensor_transformation
opencda/core/sensing/perception/sensor_transformation.py:32:4: C0103: Variable name "VIEW_WIDTH" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/perception/sensor_transformation.py:33:4: C0103: Variable name "VIEW_HEIGHT" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/perception/sensor_transformation.py:34:4: C0103: Variable name "VIEW_FOV" doesn't conform to snake_case naming style (invalid-name)
opencda/core/sensing/perception/sensor_transformation.py:324:0: R0914: Too many local variables (21/15) (too-many-locals)
opencda/core/sensing/perception/sensor_transformation.py:390:4: C0103: Variable name "K" doesn't conform to snake_case naming style (invalid-name)
************* Module OpenCDA.opencda.core.sensing.perception.static_obstacle
opencda/core/sensing/perception/static_obstacle.py:90:0: C0304: Final newline missing (missing-final-newline)
opencda/core/sensing/perception/static_obstacle.py:14:0: R0205: Class 'BoundingBox' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/sensing/perception/static_obstacle.py:14:0: R0903: Too few public methods (0/2) (too-few-public-methods)
opencda/core/sensing/perception/static_obstacle.py:42:0: R0205: Class 'StaticObstacle' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/sensing/perception/static_obstacle.py:42:0: R0903: Too few public methods (0/2) (too-few-public-methods)
opencda/core/sensing/perception/static_obstacle.py:67:0: R0205: Class 'TrafficLight' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/sensing/perception/static_obstacle.py:86:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/sensing/perception/static_obstacle.py:89:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/sensing/perception/static_obstacle.py:8:0: W0611: Unused import sys (unused-import)
************* Module OpenCDA.opencda.core.application.networking
opencda/core/application/networking.py:3:0: C0301: Line too long (154/100) (line-too-long)
opencda/core/application/networking.py:7:0: C0301: Line too long (193/100) (line-too-long)
opencda/core/application/networking.py:8:0: C0301: Line too long (213/100) (line-too-long)
opencda/core/application/networking.py:34:0: C0301: Line too long (112/100) (line-too-long)
opencda/core/application/networking.py:37:0: C0304: Final newline missing (missing-final-newline)
opencda/core/application/networking.py:21:0: C0115: Missing class docstring (missing-class-docstring)
opencda/core/application/networking.py:21:0: R0205: Class 'NetworkModel' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/application/networking.py:30:8: W0107: Unnecessary pass statement (unnecessary-pass)
opencda/core/application/networking.py:37:8: W0107: Unnecessary pass statement (unnecessary-pass)
opencda/core/application/networking.py:13:0: W0611: Unused import math (unused-import)
opencda/core/application/networking.py:14:0: W0611: Unused import importlib (unused-import)
opencda/core/application/networking.py:16:0: W0611: Unused numpy imported as np (unused-import)
opencda/core/application/networking.py:17:0: W0611: Unused import carla (unused-import)
opencda/core/application/networking.py:19:0: W0611: Unused compute_distance imported from opencda.core.common.misc (unused-import)
************* Module OpenCDA.opencda.core.application.edge.edge_manager_dyn
opencda/core/application/edge/edge_manager_dyn.py:15:11: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager_dyn.py:24:91: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager_dyn.py:91:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:92:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:93:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:94:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:95:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:96:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:103:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:104:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:105:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:107:0: C0301: Line too long (108/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:107:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:116:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:118:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:119:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:120:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:122:70: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager_dyn.py:123:0: C0301: Line too long (115/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:124:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:125:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:126:0: C0301: Line too long (169/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:126:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:127:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager_dyn.py:129:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:130:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:131:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:132:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:133:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:135:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:136:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:138:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:139:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:143:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:144:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:145:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:146:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:147:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:148:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:149:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:150:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:152:0: C0301: Line too long (116/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:152:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:153:0: C0301: Line too long (116/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:153:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:154:0: C0301: Line too long (116/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:154:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:155:0: C0301: Line too long (116/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:155:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:157:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:158:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:159:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:160:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:162:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:163:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:165:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:166:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:167:0: C0301: Line too long (160/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:167:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:168:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:169:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:172:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:173:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:174:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:176:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:177:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:178:0: C0301: Line too long (160/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:178:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:179:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:180:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:183:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:184:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:185:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:187:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:188:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:189:0: C0301: Line too long (160/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:189:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:190:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:191:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:194:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:195:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:196:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:198:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:199:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:200:0: C0301: Line too long (160/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:200:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:201:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:202:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:205:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:210:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager_dyn.py:211:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:212:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:213:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:214:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:215:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:216:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:217:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:218:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:219:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:220:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:221:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:222:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:225:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:226:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:227:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:229:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:230:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:231:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:233:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:234:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:235:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:237:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:238:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:239:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:293:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager_dyn.py:294:28: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager_dyn.py:300:0: C0301: Line too long (173/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:305:0: C0301: Line too long (174/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:317:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager_dyn.py:321:0: C0301: Line too long (171/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:323:73: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager_dyn.py:338:0: C0301: Line too long (113/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:341:0: C0301: Line too long (134/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:342:114: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager_dyn.py:342:0: C0301: Line too long (114/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:346:0: C0301: Line too long (143/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:351:0: C0301: Line too long (106/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:356:0: C0301: Line too long (120/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:372:0: C0301: Line too long (111/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:375:53: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager_dyn.py:388:0: C0301: Line too long (138/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:389:0: C0301: Line too long (113/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:400:0: C0301: Line too long (194/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:425:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:426:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:427:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:428:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:429:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:432:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:436:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:442:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:445:0: C0301: Line too long (122/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:450:0: C0301: Line too long (138/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:462:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:463:0: C0301: Line too long (106/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:463:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:464:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:465:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager_dyn.py:496:0: C0301: Line too long (115/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:502:0: C0301: Line too long (198/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:503:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager_dyn.py:508:0: C0301: Line too long (112/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:512:35: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager_dyn.py:519:0: C0301: Line too long (117/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:521:0: C0301: Line too long (102/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:522:0: C0301: Line too long (111/100) (line-too-long)
opencda/core/application/edge/edge_manager_dyn.py:66:55: W0511: TODO - set edge_index (fixme)
opencda/core/application/edge/edge_manager_dyn.py:122:11: W0511: TODO: DIST --> do we need to clear at start in containers?   (fixme)
opencda/core/application/edge/edge_manager_dyn.py:320:9: W0511: TODO: data drive num cars (fixme)
opencda/core/application/edge/edge_manager_dyn.py:479:9: W0511: TODO: make a dist version... (fixme)
opencda/core/application/edge/edge_manager_dyn.py:17:0: C0410: Multiple imports on one line (coloredlogs, logging) (multiple-imports)
opencda/core/application/edge/edge_manager_dyn.py:26:0: C0413: Import "import opencda.core.plan.drive_profile_plotting as open_plt" should be placed at the top of the module (wrong-import-position)
opencda/core/application/edge/edge_manager_dyn.py:27:0: W0401: Wildcard import opencda.core.application.edge.astar_test_groupcaps_transform (wildcard-import)
opencda/core/application/edge/edge_manager_dyn.py:27:0: C0413: Import "from opencda.core.application.edge.astar_test_groupcaps_transform import *" should be placed at the top of the module (wrong-import-position)
opencda/core/application/edge/edge_manager_dyn.py:28:0: C0413: Import "from opencda.core.plan.global_route_planner import GlobalRoutePlanner" should be placed at the top of the module (wrong-import-position)
opencda/core/application/edge/edge_manager_dyn.py:29:0: C0413: Import "from opencda.core.plan.global_route_planner_dao import GlobalRoutePlannerDAO" should be placed at the top of the module (wrong-import-position)
opencda/core/application/edge/edge_manager_dyn.py:30:0: C0413: Import "from opencda.core.plan.local_planner_behavior import RoadOption" should be placed at the top of the module (wrong-import-position)
opencda/core/application/edge/edge_manager_dyn.py:31:0: W0401: Wildcard import opencda.core.application.edge.transform_utils (wildcard-import)
opencda/core/application/edge/edge_manager_dyn.py:31:0: C0413: Import "from opencda.core.application.edge.transform_utils import *" should be placed at the top of the module (wrong-import-position)
opencda/core/application/edge/edge_manager_dyn.py:33:0: C0413: Import "import grpc" should be placed at the top of the module (wrong-import-position)
opencda/core/application/edge/edge_manager_dyn.py:34:0: C0413: Import "import ecloud_pb2 as ecloud" should be placed at the top of the module (wrong-import-position)
opencda/core/application/edge/edge_manager_dyn.py:35:0: C0413: Import "import ecloud_pb2_grpc as rpc" should be placed at the top of the module (wrong-import-position)
opencda/core/application/edge/edge_manager_dyn.py:77:8: C0103: Attribute name "tv" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:78:8: C0103: Attribute name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:81:8: C0103: Attribute name "Traffic_Tracker" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:84:8: C0103: Attribute name "ov" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:84:17: C0103: Attribute name "oy" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:124:6: C0103: Attribute name "dt" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:37:0: R0205: Class 'EdgeManager' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/application/edge/edge_manager_dyn.py:37:0: R0902: Too many instance attributes (31/7) (too-many-instance-attributes)
opencda/core/application/edge/edge_manager_dyn.py:66:8: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
opencda/core/application/edge/edge_manager_dyn.py:66:21: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/application/edge/edge_manager_dyn.py:90:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/edge_manager_dyn.py:128:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/edge_manager_dyn.py:128:4: R0914: Too many local variables (22/15) (too-many-locals)
opencda/core/application/edge/edge_manager_dyn.py:143:6: C0103: Variable name "a" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:144:6: C0103: Variable name "b" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:145:6: C0103: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:146:6: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:147:6: C0103: Variable name "e" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:148:6: C0103: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:149:6: C0103: Variable name "g" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:152:6: C0103: Variable name "w1" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:153:6: C0103: Variable name "w2" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:154:6: C0103: Variable name "w3" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:155:6: C0103: Variable name "w4" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:163:10: C0103: Variable name "w" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:174:10: C0103: Variable name "w" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:185:10: C0103: Variable name "w" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:196:10: C0103: Variable name "w" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:128:4: R0912: Too many branches (16/12) (too-many-branches)
opencda/core/application/edge/edge_manager_dyn.py:128:4: R0915: Too many statements (74/50) (too-many-statements)
opencda/core/application/edge/edge_manager_dyn.py:243:42: W0613: Unused argument 'leader' (unused-argument)
opencda/core/application/edge/edge_manager_dyn.py:257:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/edge_manager_dyn.py:258:30: E1101: Instance of 'EdgeManager' has no '_map' member (no-member)
opencda/core/application/edge/edge_manager_dyn.py:258:53: E0602: Undefined variable 'start_location' (undefined-variable)
opencda/core/application/edge/edge_manager_dyn.py:261:11: E1101: Instance of 'EdgeManager' has no '_ego_pos' member (no-member)
opencda/core/application/edge/edge_manager_dyn.py:262:22: E1101: Instance of 'EdgeManager' has no '_ego_pos' member (no-member)
opencda/core/application/edge/edge_manager_dyn.py:263:22: E1101: Instance of 'EdgeManager' has no '_ego_pos' member (no-member)
opencda/core/application/edge/edge_manager_dyn.py:264:23: E0602: Undefined variable 'cal_distance_angle' (undefined-variable)
opencda/core/application/edge/edge_manager_dyn.py:269:27: E0602: Undefined variable 'cal_distance_angle' (undefined-variable)
opencda/core/application/edge/edge_manager_dyn.py:272:23: E1101: Instance of 'EdgeManager' has no '_map' member (no-member)
opencda/core/application/edge/edge_manager_dyn.py:272:46: E0602: Undefined variable 'end_location' (undefined-variable)
opencda/core/application/edge/edge_manager_dyn.py:273:11: E0602: Undefined variable 'end_reset' (undefined-variable)
opencda/core/application/edge/edge_manager_dyn.py:276:22: E1101: Instance of 'EdgeManager' has no '_trace_route' member (no-member)
opencda/core/application/edge/edge_manager_dyn.py:257:34: W0613: Unused argument 'destination' (unused-argument)
opencda/core/application/edge/edge_manager_dyn.py:276:8: W0612: Unused variable 'route_trace' (unused-variable)
opencda/core/application/edge/edge_manager_dyn.py:298:8: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
opencda/core/application/edge/edge_manager_dyn.py:302:8: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
opencda/core/application/edge/edge_manager_dyn.py:302:21: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/application/edge/edge_manager_dyn.py:304:8: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
opencda/core/application/edge/edge_manager_dyn.py:305:12: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:305:14: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:306:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:313:8: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
opencda/core/application/edge/edge_manager_dyn.py:313:21: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/application/edge/edge_manager_dyn.py:323:8: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
opencda/core/application/edge/edge_manager_dyn.py:323:21: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/application/edge/edge_manager_dyn.py:331:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/edge_manager_dyn.py:331:4: R0914: Too many local variables (25/15) (too-many-locals)
opencda/core/application/edge/edge_manager_dyn.py:347:16: C0103: Variable name "rv" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:347:20: C0103: Variable name "ry" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:372:28: C0103: Variable name "tv" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:372:32: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:331:4: R0912: Too many branches (15/12) (too-many-branches)
opencda/core/application/edge/edge_manager_dyn.py:347:24: W0612: Unused variable 'rx_tracked' (unused-variable)
opencda/core/application/edge/edge_manager_dyn.py:483:8: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
opencda/core/application/edge/edge_manager_dyn.py:483:21: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/application/edge/edge_manager_dyn.py:485:8: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
opencda/core/application/edge/edge_manager_dyn.py:485:21: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/application/edge/edge_manager_dyn.py:487:8: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
opencda/core/application/edge/edge_manager_dyn.py:487:21: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/application/edge/edge_manager_dyn.py:491:17: W0612: Unused variable 'vehicle_manager' (unused-variable)
opencda/core/application/edge/edge_manager_dyn.py:552:8: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
opencda/core/application/edge/edge_manager_dyn.py:553:12: C0103: Variable name "vm" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:574:27: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/application/edge/edge_manager_dyn.py:576:27: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/application/edge/edge_manager_dyn.py:578:27: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/application/edge/edge_manager_dyn.py:597:25: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/application/edge/edge_manager_dyn.py:598:51: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/application/edge/edge_manager_dyn.py:609:12: C0103: Variable name "vm" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager_dyn.py:124:6: W0201: Attribute 'dt' defined outside __init__ (attribute-defined-outside-init)
opencda/core/application/edge/edge_manager_dyn.py:125:6: W0201: Attribute 'numlanes' defined outside __init__ (attribute-defined-outside-init)
opencda/core/application/edge/edge_manager_dyn.py:130:6: W0201: Attribute '_dao' defined outside __init__ (attribute-defined-outside-init)
opencda/core/application/edge/edge_manager_dyn.py:258:8: W0201: Attribute 'start_waypoint' defined outside __init__ (attribute-defined-outside-init)
opencda/core/application/edge/edge_manager_dyn.py:268:16: W0201: Attribute 'start_waypoint' defined outside __init__ (attribute-defined-outside-init)
opencda/core/application/edge/edge_manager_dyn.py:274:12: W0201: Attribute 'end_waypoint' defined outside __init__ (attribute-defined-outside-init)
opencda/core/application/edge/edge_manager_dyn.py:332:8: W0201: Attribute 'locations' defined outside __init__ (attribute-defined-outside-init)
opencda/core/application/edge/edge_manager_dyn.py:15:0: C0411: standard import "import time" should be placed before "import carla" (wrong-import-order)
opencda/core/application/edge/edge_manager_dyn.py:17:0: C0411: third party import "import coloredlogs, logging" should be placed before "import opencda.logging_ecloud" (wrong-import-order)
opencda/core/application/edge/edge_manager_dyn.py:17:0: C0411: standard import "import coloredlogs, logging" should be placed before "import carla" (wrong-import-order)
opencda/core/application/edge/edge_manager_dyn.py:18:0: C0411: standard import "import sys" should be placed before "import carla" (wrong-import-order)
opencda/core/application/edge/edge_manager_dyn.py:33:0: C0411: third party import "import grpc" should be placed before "import opencda.logging_ecloud" (wrong-import-order)
opencda/core/application/edge/edge_manager_dyn.py:26:0: C0412: Imports from package opencda are not grouped (ungrouped-imports)
opencda/core/application/edge/edge_manager_dyn.py:16:0: W0611: Unused import opencda.logging_ecloud (unused-import)
opencda/core/application/edge/edge_manager_dyn.py:30:0: W0611: Unused RoadOption imported from opencda.core.plan.local_planner_behavior (unused-import)
opencda/core/application/edge/edge_manager_dyn.py:35:0: W0611: Unused ecloud_pb2_grpc imported as rpc (unused-import)
opencda/core/application/edge/edge_manager_dyn.py:27:0: W0614: Unused import(s) itertools, scipy, matplotlib, timeit, pickle, show_animation, get_states_carlist, get_slice_plans, find_nearest, save_obj, load_obj, Car, AgglomerativeClustering, KMeansConstrained, re, random, calculate_velocity, CarlaDataProvider, print_function and iteritems from wildcard import of opencda.core.application.edge.astar_test_groupcaps_transform (unused-wildcard-import)
opencda/core/application/edge/edge_manager_dyn.py:31:0: W0614: Unused import(s) grpc, rpc, get_rotation_mat, get_base_offset, transform, inverse_transform, get_scaling, deserialize_waypoint and MessageToJson from wildcard import of opencda.core.application.edge.transform_utils (unused-wildcard-import)
************* Module OpenCDA.opencda.core.application.edge.edge_behavior_agent
opencda/core/application/edge/edge_behavior_agent.py:143:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_behavior_agent.py:22:0: R0902: Too many instance attributes (9/7) (too-many-instance-attributes)
opencda/core/application/edge/edge_behavior_agent.py:58:4: R0913: Too many arguments (6/5) (too-many-arguments)
opencda/core/application/edge/edge_behavior_agent.py:66:8: R1725: Consider using Python 3 style super() without arguments (super-with-arguments)
opencda/core/application/edge/edge_behavior_agent.py:9:0: W0611: Unused deque imported from collections (unused-import)
opencda/core/application/edge/edge_behavior_agent.py:11:0: W0611: Unused import carla (unused-import)
opencda/core/application/edge/edge_behavior_agent.py:12:0: W0611: Unused numpy imported as np (unused-import)
opencda/core/application/edge/edge_behavior_agent.py:14:0: W0611: Unused FSM imported from opencda.core.application.platooning.fsm (unused-import)
opencda/core/application/edge/edge_behavior_agent.py:17:0: W0611: Unused compute_distance imported from opencda.core.common.misc (unused-import)
opencda/core/application/edge/edge_behavior_agent.py:17:0: W0611: Unused get_speed imported from opencda.core.common.misc (unused-import)
opencda/core/application/edge/edge_behavior_agent.py:17:0: W0611: Unused cal_distance_angle imported from opencda.core.common.misc (unused-import)
************* Module OpenCDA.opencda.core.application.edge.edge_plugin
opencda/core/application/edge/edge_plugin.py:68:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_plugin.py:69:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_plugin.py:15:0: R0205: Class 'EdgePlugin' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/application/edge/edge_plugin.py:15:0: R0903: Too few public methods (1/2) (too-few-public-methods)
opencda/core/application/edge/edge_plugin.py:9:0: W0611: Unused import warnings (unused-import)
opencda/core/application/edge/edge_plugin.py:11:0: W0611: Unused compute_distance imported from opencda.core.common.misc (unused-import)
opencda/core/application/edge/edge_plugin.py:11:0: W0611: Unused cal_distance_angle imported from opencda.core.common.misc (unused-import)
opencda/core/application/edge/edge_plugin.py:12:0: W0611: Unused FSM imported from opencda.core.application.platooning.fsm (unused-import)
************* Module OpenCDA.opencda.core.application.edge.edge_manager
opencda/core/application/edge/edge_manager.py:15:11: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager.py:35:91: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager.py:72:0: C0301: Line too long (106/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:110:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:111:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:112:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:113:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:114:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:115:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:122:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:123:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:124:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:126:0: C0301: Line too long (108/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:126:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:135:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:137:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:138:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:139:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:141:70: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager.py:142:0: C0301: Line too long (115/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:143:0: C0301: Line too long (171/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:143:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:144:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager.py:146:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:147:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:148:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:149:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:150:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:152:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:153:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:155:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:156:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:160:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:161:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:162:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:163:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:164:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:165:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:166:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:167:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:169:0: C0301: Line too long (116/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:169:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:170:0: C0301: Line too long (116/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:170:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:171:0: C0301: Line too long (116/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:171:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:172:0: C0301: Line too long (116/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:172:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:174:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:175:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:176:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:177:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:179:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:180:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:182:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:183:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:184:0: C0301: Line too long (160/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:184:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager.py:185:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:186:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager.py:189:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:190:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:191:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:193:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:194:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:195:0: C0301: Line too long (160/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:195:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager.py:196:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:197:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager.py:200:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:201:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:202:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:204:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:205:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:206:0: C0301: Line too long (160/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:206:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager.py:207:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:208:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager.py:211:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:212:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:213:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:215:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:216:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:217:0: C0301: Line too long (160/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:217:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager.py:218:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:219:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager.py:222:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:227:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager.py:228:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:229:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:230:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:231:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:232:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:233:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:234:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:235:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:236:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:237:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:238:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:239:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:242:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:243:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:244:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:246:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:247:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:248:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:250:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:251:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:252:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:254:0: W0311: Bad indentation. Found 6 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/edge_manager.py:255:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:256:0: W0311: Bad indentation. Found 8 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:327:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager.py:328:28: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager.py:334:0: C0301: Line too long (183/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:339:0: C0301: Line too long (174/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:351:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager.py:355:0: C0301: Line too long (173/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:357:73: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager.py:372:0: C0301: Line too long (108/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:375:0: C0301: Line too long (134/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:376:114: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager.py:376:0: C0301: Line too long (114/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:380:0: C0301: Line too long (143/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:385:0: C0301: Line too long (106/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:390:0: C0301: Line too long (120/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:406:0: C0301: Line too long (111/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:409:48: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager.py:422:0: C0301: Line too long (138/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:423:0: C0301: Line too long (113/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:434:0: C0301: Line too long (194/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:459:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:460:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:461:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager.py:462:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager.py:463:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager.py:466:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:470:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:476:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager.py:479:0: C0301: Line too long (122/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:484:0: C0301: Line too long (138/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:497:0: W0311: Bad indentation. Found 10 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/edge_manager.py:498:0: C0301: Line too long (106/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:498:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager.py:499:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager.py:500:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager.py:502:0: C0301: Line too long (115/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:502:0: W0311: Bad indentation. Found 12 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/edge_manager.py:532:0: C0301: Line too long (115/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:538:0: C0301: Line too long (198/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:539:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager.py:544:0: C0301: Line too long (112/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:548:35: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager.py:555:0: C0301: Line too long (117/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:557:0: C0301: Line too long (102/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:558:0: C0301: Line too long (111/100) (line-too-long)
opencda/core/application/edge/edge_manager.py:585:40: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager.py:600:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager.py:627:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager.py:643:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_manager.py:78:52: W0511: TODO - set edge_index (fixme)
opencda/core/application/edge/edge_manager.py:141:11: W0511: TODO: DIST --> do we need to clear at start in containers?   (fixme)
opencda/core/application/edge/edge_manager.py:354:9: W0511: TODO: data drive num cars (fixme)
opencda/core/application/edge/edge_manager.py:516:9: W0511: TODO: make a dist version... (fixme)
opencda/core/application/edge/edge_manager.py:17:0: C0410: Multiple imports on one line (coloredlogs, logging) (multiple-imports)
opencda/core/application/edge/edge_manager.py:37:0: C0413: Import "import opencda.core.plan.drive_profile_plotting as open_plt" should be placed at the top of the module (wrong-import-position)
opencda/core/application/edge/edge_manager.py:38:0: W0401: Wildcard import opencda.core.application.edge.astar_test_groupcaps_transform (wildcard-import)
opencda/core/application/edge/edge_manager.py:38:0: C0413: Import "from opencda.core.application.edge.astar_test_groupcaps_transform import *" should be placed at the top of the module (wrong-import-position)
opencda/core/application/edge/edge_manager.py:39:0: C0413: Import "from opencda.core.plan.global_route_planner import GlobalRoutePlanner" should be placed at the top of the module (wrong-import-position)
opencda/core/application/edge/edge_manager.py:40:0: C0413: Import "from opencda.core.plan.global_route_planner_dao import GlobalRoutePlannerDAO" should be placed at the top of the module (wrong-import-position)
opencda/core/application/edge/edge_manager.py:41:0: C0413: Import "from opencda.core.plan.local_planner_behavior import RoadOption" should be placed at the top of the module (wrong-import-position)
opencda/core/application/edge/edge_manager.py:42:0: W0401: Wildcard import opencda.core.application.edge.transform_utils (wildcard-import)
opencda/core/application/edge/edge_manager.py:42:0: C0413: Import "from opencda.core.application.edge.transform_utils import *" should be placed at the top of the module (wrong-import-position)
opencda/core/application/edge/edge_manager.py:43:0: C0413: Import "from opencda.core.application.edge.edge_debug_helper import EdgeDebugHelper" should be placed at the top of the module (wrong-import-position)
opencda/core/application/edge/edge_manager.py:46:0: C0413: Import "import grpc" should be placed at the top of the module (wrong-import-position)
opencda/core/application/edge/edge_manager.py:47:0: C0413: Import "import ecloud_pb2 as ecloud" should be placed at the top of the module (wrong-import-position)
opencda/core/application/edge/edge_manager.py:48:0: C0413: Import "import ecloud_pb2_grpc as rpc" should be placed at the top of the module (wrong-import-position)
opencda/core/application/edge/edge_manager.py:89:8: C0103: Attribute name "tv" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:90:8: C0103: Attribute name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:93:8: C0103: Attribute name "Traffic_Tracker" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:96:8: C0103: Attribute name "ov" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:96:17: C0103: Attribute name "oy" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:50:0: R0205: Class 'EdgeManager' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/application/edge/edge_manager.py:50:0: R0902: Too many instance attributes (36/7) (too-many-instance-attributes)
opencda/core/application/edge/edge_manager.py:72:4: R0913: Too many arguments (7/5) (too-many-arguments)
opencda/core/application/edge/edge_manager.py:72:61: W0613: Unused argument 'world_dt' (unused-argument)
opencda/core/application/edge/edge_manager.py:72:76: W0613: Unused argument 'edge_dt' (unused-argument)
opencda/core/application/edge/edge_manager.py:72:90: W0613: Unused argument 'search_dt' (unused-argument)
opencda/core/application/edge/edge_manager.py:109:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/edge_manager.py:145:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/edge_manager.py:145:4: R0914: Too many local variables (22/15) (too-many-locals)
opencda/core/application/edge/edge_manager.py:160:6: C0103: Variable name "a" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:161:6: C0103: Variable name "b" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:162:6: C0103: Variable name "c" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:163:6: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:164:6: C0103: Variable name "e" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:165:6: C0103: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:166:6: C0103: Variable name "g" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:169:6: C0103: Variable name "w1" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:170:6: C0103: Variable name "w2" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:171:6: C0103: Variable name "w3" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:172:6: C0103: Variable name "w4" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:180:10: C0103: Variable name "w" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:191:10: C0103: Variable name "w" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:202:10: C0103: Variable name "w" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:213:10: C0103: Variable name "w" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:145:4: R0912: Too many branches (16/12) (too-many-branches)
opencda/core/application/edge/edge_manager.py:145:4: R0915: Too many statements (74/50) (too-many-statements)
opencda/core/application/edge/edge_manager.py:271:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/edge_manager.py:272:30: E1101: Instance of 'EdgeManager' has no '_map' member (no-member)
opencda/core/application/edge/edge_manager.py:272:53: E0602: Undefined variable 'start_location' (undefined-variable)
opencda/core/application/edge/edge_manager.py:275:11: E1101: Instance of 'EdgeManager' has no '_ego_pos' member (no-member)
opencda/core/application/edge/edge_manager.py:276:22: E1101: Instance of 'EdgeManager' has no '_ego_pos' member (no-member)
opencda/core/application/edge/edge_manager.py:277:22: E1101: Instance of 'EdgeManager' has no '_ego_pos' member (no-member)
opencda/core/application/edge/edge_manager.py:278:23: E0602: Undefined variable 'cal_distance_angle' (undefined-variable)
opencda/core/application/edge/edge_manager.py:283:27: E0602: Undefined variable 'cal_distance_angle' (undefined-variable)
opencda/core/application/edge/edge_manager.py:286:23: E1101: Instance of 'EdgeManager' has no '_map' member (no-member)
opencda/core/application/edge/edge_manager.py:286:46: E0602: Undefined variable 'end_location' (undefined-variable)
opencda/core/application/edge/edge_manager.py:287:11: E0602: Undefined variable 'end_reset' (undefined-variable)
opencda/core/application/edge/edge_manager.py:290:22: E1101: Instance of 'EdgeManager' has no '_trace_route' member (no-member)
opencda/core/application/edge/edge_manager.py:271:34: W0613: Unused argument 'destination' (unused-argument)
opencda/core/application/edge/edge_manager.py:290:8: W0612: Unused variable 'route_trace' (unused-variable)
opencda/core/application/edge/edge_manager.py:315:22: E1101: Instance of 'EdgeManager' has no 'vehicle' member (no-member)
opencda/core/application/edge/edge_manager.py:318:18: E1101: Instance of 'EdgeManager' has no '_ego_speed' member (no-member)
opencda/core/application/edge/edge_manager.py:338:8: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
opencda/core/application/edge/edge_manager.py:339:12: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:339:14: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:340:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:345:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/core/application/edge/edge_manager.py:347:8: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
opencda/core/application/edge/edge_manager.py:347:21: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/application/edge/edge_manager.py:357:8: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
opencda/core/application/edge/edge_manager.py:357:21: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/application/edge/edge_manager.py:365:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/edge_manager.py:365:4: R0914: Too many local variables (25/15) (too-many-locals)
opencda/core/application/edge/edge_manager.py:381:16: C0103: Variable name "rv" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:381:20: C0103: Variable name "ry" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:406:28: C0103: Variable name "tv" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:406:32: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:495:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/core/application/edge/edge_manager.py:495:23: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
opencda/core/application/edge/edge_manager.py:499:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/core/application/edge/edge_manager.py:502:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/core/application/edge/edge_manager.py:365:4: R0912: Too many branches (15/12) (too-many-branches)
opencda/core/application/edge/edge_manager.py:381:24: W0612: Unused variable 'rx_tracked' (unused-variable)
opencda/core/application/edge/edge_manager.py:522:8: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
opencda/core/application/edge/edge_manager.py:522:21: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/application/edge/edge_manager.py:527:17: W0612: Unused variable 'vehicle_manager' (unused-variable)
opencda/core/application/edge/edge_manager.py:589:8: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
opencda/core/application/edge/edge_manager.py:590:12: C0103: Variable name "vm" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:625:23: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/application/edge/edge_manager.py:585:8: W0612: Unused variable 'debug_helper' (unused-variable)
opencda/core/application/edge/edge_manager.py:651:12: C0103: Variable name "vm" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/edge_manager.py:147:6: W0201: Attribute '_dao' defined outside __init__ (attribute-defined-outside-init)
opencda/core/application/edge/edge_manager.py:272:8: W0201: Attribute 'start_waypoint' defined outside __init__ (attribute-defined-outside-init)
opencda/core/application/edge/edge_manager.py:282:16: W0201: Attribute 'start_waypoint' defined outside __init__ (attribute-defined-outside-init)
opencda/core/application/edge/edge_manager.py:288:12: W0201: Attribute 'end_waypoint' defined outside __init__ (attribute-defined-outside-init)
opencda/core/application/edge/edge_manager.py:320:8: W0201: Attribute 'time_gap' defined outside __init__ (attribute-defined-outside-init)
opencda/core/application/edge/edge_manager.py:321:8: W0201: Attribute 'dist_gap' defined outside __init__ (attribute-defined-outside-init)
opencda/core/application/edge/edge_manager.py:366:8: W0201: Attribute 'locations' defined outside __init__ (attribute-defined-outside-init)
opencda/core/application/edge/edge_manager.py:15:0: C0411: standard import "import time" should be placed before "import carla" (wrong-import-order)
opencda/core/application/edge/edge_manager.py:17:0: C0411: third party import "import coloredlogs, logging" should be placed before "import opencda.logging_ecloud" (wrong-import-order)
opencda/core/application/edge/edge_manager.py:17:0: C0411: standard import "import coloredlogs, logging" should be placed before "import carla" (wrong-import-order)
opencda/core/application/edge/edge_manager.py:18:0: C0411: standard import "import sys" should be placed before "import carla" (wrong-import-order)
opencda/core/application/edge/edge_manager.py:46:0: C0411: third party import "import grpc" should be placed before "import opencda.logging_ecloud" (wrong-import-order)
opencda/core/application/edge/edge_manager.py:16:0: W0611: Unused import opencda.logging_ecloud (unused-import)
opencda/core/application/edge/edge_manager.py:41:0: W0611: Unused RoadOption imported from opencda.core.plan.local_planner_behavior (unused-import)
opencda/core/application/edge/edge_manager.py:48:0: W0611: Unused ecloud_pb2_grpc imported as rpc (unused-import)
opencda/core/application/edge/edge_manager.py:38:0: W0614: Unused import(s) itertools, scipy, matplotlib, timeit, pickle, show_animation, get_states_carlist, get_slice_plans, find_nearest, save_obj, load_obj, Car, AgglomerativeClustering, KMeansConstrained, re, random, calculate_velocity, CarlaDataProvider, print_function and iteritems from wildcard import of opencda.core.application.edge.astar_test_groupcaps_transform (unused-wildcard-import)
opencda/core/application/edge/edge_manager.py:42:0: W0614: Unused import(s) grpc, rpc, get_rotation_mat, get_base_offset, transform, inverse_transform, get_scaling, deserialize_waypoint and MessageToJson from wildcard import of opencda.core.application.edge.transform_utils (unused-wildcard-import)
************* Module OpenCDA.opencda.core.application.edge.astar_test_groupcaps_transform
opencda/core/application/edge/astar_test_groupcaps_transform.py:9:18: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/astar_test_groupcaps_transform.py:18:46: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/astar_test_groupcaps_transform.py:62:0: C0301: Line too long (117/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:63:0: C0301: Line too long (117/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:64:0: C0301: Line too long (117/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:65:0: C0301: Line too long (117/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:84:0: C0301: Line too long (117/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:85:0: C0301: Line too long (117/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:86:0: C0301: Line too long (117/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:87:0: C0301: Line too long (117/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:181:28: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/astar_test_groupcaps_transform.py:199:19: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/astar_test_groupcaps_transform.py:200:19: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/astar_test_groupcaps_transform.py:201:19: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/astar_test_groupcaps_transform.py:223:39: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/astar_test_groupcaps_transform.py:244:0: C0301: Line too long (129/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:244:0: C0325: Unnecessary parens after 'if' keyword (superfluous-parens)
opencda/core/application/edge/astar_test_groupcaps_transform.py:249:39: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/astar_test_groupcaps_transform.py:266:0: C0301: Line too long (109/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:315:0: C0301: Line too long (112/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:362:0: C0301: Line too long (141/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:369:0: C0301: Line too long (138/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:376:0: C0301: Line too long (129/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:378:0: C0301: Line too long (128/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:379:40: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/astar_test_groupcaps_transform.py:487:0: C0301: Line too long (105/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:489:0: C0301: Line too long (107/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:503:17: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/astar_test_groupcaps_transform.py:516:0: C0301: Line too long (112/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:523:0: C0301: Line too long (140/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:532:0: C0301: Line too long (105/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:544:30: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/astar_test_groupcaps_transform.py:551:94: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/astar_test_groupcaps_transform.py:552:0: C0301: Line too long (142/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:568:0: C0301: Line too long (122/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:593:0: C0301: Line too long (135/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:594:115: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/astar_test_groupcaps_transform.py:594:0: C0301: Line too long (115/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:597:0: C0301: Line too long (119/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:602:0: C0301: Line too long (107/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:606:0: C0301: Line too long (121/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:609:42: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/astar_test_groupcaps_transform.py:637:0: C0301: Line too long (171/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:651:0: C0301: Line too long (111/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:656:0: C0301: Line too long (105/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:671:1: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/astar_test_groupcaps_transform.py:674:0: C0301: Line too long (114/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:678:25: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/astar_test_groupcaps_transform.py:679:1: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/astar_test_groupcaps_transform.py:683:1: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/astar_test_groupcaps_transform.py:685:0: C0301: Line too long (115/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:686:0: C0301: Line too long (115/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:687:0: C0301: Line too long (115/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:688:0: C0301: Line too long (115/100) (line-too-long)
opencda/core/application/edge/astar_test_groupcaps_transform.py:689:1: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/astar_test_groupcaps_transform.py:702:1: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/astar_test_groupcaps_transform.py:703:1: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/astar_test_groupcaps_transform.py:1:0: C0114: Missing module docstring (missing-module-docstring)
opencda/core/application/edge/astar_test_groupcaps_transform.py:13:0: W0404: Reimport 'matplotlib.pyplot' (imported line 4) (reimported)
opencda/core/application/edge/astar_test_groupcaps_transform.py:26:0: W0401: Wildcard import opencda.core.application.edge.tools.carla_data_provider (wildcard-import)
opencda/core/application/edge/astar_test_groupcaps_transform.py:27:0: C0103: Constant name "show_animation" doesn't conform to UPPER_CASE naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:124:0: C0115: Missing class docstring (missing-class-docstring)
opencda/core/application/edge/astar_test_groupcaps_transform.py:146:8: C0103: Attribute name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:147:8: C0103: Attribute name "vt" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:149:8: C0103: Attribute name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:152:8: C0103: Attribute name "rr" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:124:0: R0902: Too many instance attributes (17/7) (too-many-instance-attributes)
opencda/core/application/edge/astar_test_groupcaps_transform.py:126:29: C0103: Argument name "ov" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:126:33: C0103: Argument name "oy" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:126:49: C0103: Argument name "rr" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:126:4: R0913: Too many arguments (8/5) (too-many-arguments)
opencda/core/application/edge/astar_test_groupcaps_transform.py:135:8: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:137:8: C0103: Variable name "vt" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:138:8: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:163:4: C0115: Missing class docstring (missing-class-docstring)
opencda/core/application/edge/astar_test_groupcaps_transform.py:166:12: C0103: Attribute name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:167:12: C0103: Attribute name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:170:12: C0103: Attribute name "vt" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:164:27: C0103: Argument name "sv" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:164:31: C0103: Argument name "sy" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:164:44: C0103: Argument name "vt" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:164:8: R0913: Too many arguments (7/5) (too-many-arguments)
opencda/core/application/edge/astar_test_groupcaps_transform.py:179:8: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/astar_test_groupcaps_transform.py:180:12: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
opencda/core/application/edge/astar_test_groupcaps_transform.py:187:4: R0914: Too many local variables (19/15) (too-many-locals)
opencda/core/application/edge/astar_test_groupcaps_transform.py:199:8: C0103: Variable name "sv" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:200:8: C0103: Variable name "sy" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:201:8: C0103: Variable name "gy" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:202:8: C0103: Variable name "gv" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:211:31: R1735: Consider using '{}' instead of a call to 'dict'. (use-dict-literal)
opencda/core/application/edge/astar_test_groupcaps_transform.py:211:39: R1735: Consider using '{}' instead of a call to 'dict'. (use-dict-literal)
opencda/core/application/edge/astar_test_groupcaps_transform.py:220:41: E0601: Using variable 'current' before assignment (used-before-assignment)
opencda/core/application/edge/astar_test_groupcaps_transform.py:261:12: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
opencda/core/application/edge/astar_test_groupcaps_transform.py:262:16: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
opencda/core/application/edge/astar_test_groupcaps_transform.py:275:28: E1205: Too many arguments for logging format string (logging-too-many-args)
opencda/core/application/edge/astar_test_groupcaps_transform.py:275:64: C2801: Unnecessarily calls dunder method __str__. Use str built-in function. (unnecessary-dunder-call)
opencda/core/application/edge/astar_test_groupcaps_transform.py:290:8: C0103: Variable name "rv" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:290:12: C0103: Variable name "ry" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:290:16: C0103: Variable name "rx" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:214:8: W0612: Unused variable 'empty_flag' (unused-variable)
opencda/core/application/edge/astar_test_groupcaps_transform.py:294:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/astar_test_groupcaps_transform.py:296:8: C0103: Variable name "rv" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:296:12: C0103: Variable name "ry" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:298:8: C0103: Variable name "rx" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:301:12: C0103: Variable name "n" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:310:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/astar_test_groupcaps_transform.py:310:23: C0103: Argument name "n1" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:310:26: C0103: Argument name "n2" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:311:8: C0103: Variable name "w" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:313:8: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:314:8: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
opencda/core/application/edge/astar_test_groupcaps_transform.py:315:12: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:318:40: W0613: Unused argument 'min_position' (unused-argument)
opencda/core/application/edge/astar_test_groupcaps_transform.py:328:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/astar_test_groupcaps_transform.py:329:8: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
opencda/core/application/edge/astar_test_groupcaps_transform.py:328:38: W0613: Unused argument 'min_pos' (unused-argument)
opencda/core/application/edge/astar_test_groupcaps_transform.py:333:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/astar_test_groupcaps_transform.py:335:8: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
opencda/core/application/edge/astar_test_groupcaps_transform.py:341:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/astar_test_groupcaps_transform.py:343:8: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
opencda/core/application/edge/astar_test_groupcaps_transform.py:344:12: C0103: Variable name "px" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:345:12: C0103: Variable name "py" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:347:12: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
opencda/core/application/edge/astar_test_groupcaps_transform.py:341:4: R0911: Too many return statements (10/6) (too-many-return-statements)
opencda/core/application/edge/astar_test_groupcaps_transform.py:341:4: R0912: Too many branches (19/12) (too-many-branches)
opencda/core/application/edge/astar_test_groupcaps_transform.py:383:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/astar_test_groupcaps_transform.py:383:32: C0103: Argument name "ov" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:383:36: C0103: Argument name "oy" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:400:12: C0103: Variable name "iv" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:401:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:402:16: C0103: Variable name "iy" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:403:16: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:405:20: C0103: Variable name "d" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:411:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/astar_test_groupcaps_transform.py:425:12: W0612: Unused variable 'i' (unused-variable)
opencda/core/application/edge/astar_test_groupcaps_transform.py:441:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/astar_test_groupcaps_transform.py:444:8: E1205: Too many arguments for logging format string (logging-too-many-args)
opencda/core/application/edge/astar_test_groupcaps_transform.py:445:8: E1205: Too many arguments for logging format string (logging-too-many-args)
opencda/core/application/edge/astar_test_groupcaps_transform.py:446:8: E1205: Too many arguments for logging format string (logging-too-many-args)
opencda/core/application/edge/astar_test_groupcaps_transform.py:449:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/astar_test_groupcaps_transform.py:449:20: C0103: Argument name "Traffic_Tracker" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:449:37: C0103: Argument name "ov" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:449:41: C0103: Argument name "oy" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:467:12: C0103: Variable name "rv" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:467:16: C0103: Variable name "ry" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:467:20: W0612: Unused variable 'rx_tracked' (unused-variable)
opencda/core/application/edge/astar_test_groupcaps_transform.py:474:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/astar_test_groupcaps_transform.py:479:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/astar_test_groupcaps_transform.py:480:46: C0103: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:483:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/astar_test_groupcaps_transform.py:484:47: C0103: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:487:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/astar_test_groupcaps_transform.py:489:4: C0103: Variable name "ov" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:489:8: C0103: Variable name "oy" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:505:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/astar_test_groupcaps_transform.py:505:25: C0103: Argument name "Traffic_Tracker" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/astar_test_groupcaps_transform.py:9:0: C0411: third party import "import numpy as np" should be placed before "from opencda.core.application.edge.collab_sandbox import Traffic" (wrong-import-order)
opencda/core/application/edge/astar_test_groupcaps_transform.py:10:0: C0411: standard import "import itertools" should be placed before "import matplotlib.pyplot as plt" (wrong-import-order)
opencda/core/application/edge/astar_test_groupcaps_transform.py:12:0: C0411: third party import "import scipy.io" should be placed before "from opencda.core.application.edge.collab_sandbox import Traffic" (wrong-import-order)
opencda/core/application/edge/astar_test_groupcaps_transform.py:13:0: C0411: third party import "import matplotlib.pyplot as plt" should be placed before "from opencda.core.application.edge.collab_sandbox import Traffic" (wrong-import-order)
opencda/core/application/edge/astar_test_groupcaps_transform.py:14:0: C0411: third party import "import matplotlib" should be placed before "from opencda.core.application.edge.collab_sandbox import Traffic" (wrong-import-order)
opencda/core/application/edge/astar_test_groupcaps_transform.py:15:0: C0411: standard import "import time" should be placed before "import matplotlib.pyplot as plt" (wrong-import-order)
opencda/core/application/edge/astar_test_groupcaps_transform.py:16:0: C0411: standard import "import timeit" should be placed before "import matplotlib.pyplot as plt" (wrong-import-order)
opencda/core/application/edge/astar_test_groupcaps_transform.py:17:0: C0411: third party import "from sklearn.cluster import AgglomerativeClustering" should be placed before "from opencda.core.application.edge.collab_sandbox import Traffic" (wrong-import-order)
opencda/core/application/edge/astar_test_groupcaps_transform.py:20:0: C0411: third party import "from k_means_constrained import KMeansConstrained" should be placed before "from opencda.core.application.edge.collab_sandbox import Traffic" (wrong-import-order)
opencda/core/application/edge/astar_test_groupcaps_transform.py:24:0: C0411: standard import "import pickle" should be placed before "import matplotlib.pyplot as plt" (wrong-import-order)
opencda/core/application/edge/astar_test_groupcaps_transform.py:25:0: C0411: third party import "import carla" should be placed before "from opencda.core.application.edge.collab_sandbox import Traffic" (wrong-import-order)
opencda/core/application/edge/astar_test_groupcaps_transform.py:13:0: C0412: Imports from package matplotlib are not grouped (ungrouped-imports)
opencda/core/application/edge/astar_test_groupcaps_transform.py:22:0: C0412: Imports from package opencda are not grouped (ungrouped-imports)
opencda/core/application/edge/astar_test_groupcaps_transform.py:26:0: C0412: Imports from package opencda are not grouped (ungrouped-imports)
opencda/core/application/edge/astar_test_groupcaps_transform.py:4:0: W0611: Unused matplotlib.pyplot imported as plt (unused-import)
opencda/core/application/edge/astar_test_groupcaps_transform.py:6:0: W0611: Unused Traffic imported from opencda.core.application.edge.collab_sandbox (unused-import)
opencda/core/application/edge/astar_test_groupcaps_transform.py:7:0: W0611: Unused Car imported from opencda.core.application.edge.collab_sandbox (unused-import)
opencda/core/application/edge/astar_test_groupcaps_transform.py:12:0: W0611: Unused import scipy.io (unused-import)
opencda/core/application/edge/astar_test_groupcaps_transform.py:14:0: W0611: Unused import matplotlib (unused-import)
opencda/core/application/edge/astar_test_groupcaps_transform.py:15:0: W0611: Unused import time (unused-import)
opencda/core/application/edge/astar_test_groupcaps_transform.py:16:0: W0611: Unused import timeit (unused-import)
opencda/core/application/edge/astar_test_groupcaps_transform.py:17:0: W0611: Unused AgglomerativeClustering imported from sklearn.cluster (unused-import)
opencda/core/application/edge/astar_test_groupcaps_transform.py:22:0: W0611: Unused transform_processor imported from opencda.core.application.edge.transform_utils (unused-import)
opencda/core/application/edge/astar_test_groupcaps_transform.py:25:0: W0611: Unused import carla (unused-import)
opencda/core/application/edge/astar_test_groupcaps_transform.py:26:0: W0614: Unused import(s) re, random, calculate_velocity, CarlaDataProvider and iteritems from wildcard import of opencda.core.application.edge.tools.carla_data_provider (unused-wildcard-import)
************* Module OpenCDA.opencda.core.application.edge.transform_utils
opencda/core/application/edge/transform_utils.py:26:0: C0301: Line too long (103/100) (line-too-long)
opencda/core/application/edge/transform_utils.py:44:0: C0301: Line too long (144/100) (line-too-long)
opencda/core/application/edge/transform_utils.py:50:18: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/transform_utils.py:59:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/transform_utils.py:61:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/transform_utils.py:89:30: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/transform_utils.py:117:0: C0301: Line too long (325/100) (line-too-long)
opencda/core/application/edge/transform_utils.py:119:0: C0301: Line too long (179/100) (line-too-long)
opencda/core/application/edge/transform_utils.py:125:0: C0301: Line too long (158/100) (line-too-long)
opencda/core/application/edge/transform_utils.py:130:0: C0301: Line too long (144/100) (line-too-long)
opencda/core/application/edge/transform_utils.py:135:0: C0301: Line too long (157/100) (line-too-long)
opencda/core/application/edge/transform_utils.py:139:0: C0301: Line too long (125/100) (line-too-long)
opencda/core/application/edge/transform_utils.py:154:0: C0301: Line too long (130/100) (line-too-long)
opencda/core/application/edge/transform_utils.py:165:0: C0301: Line too long (124/100) (line-too-long)
opencda/core/application/edge/transform_utils.py:178:0: C0301: Line too long (130/100) (line-too-long)
opencda/core/application/edge/transform_utils.py:194:0: C0301: Line too long (146/100) (line-too-long)
opencda/core/application/edge/transform_utils.py:196:0: C0301: Line too long (114/100) (line-too-long)
opencda/core/application/edge/transform_utils.py:212:0: C0305: Trailing newlines (trailing-newlines)
opencda/core/application/edge/transform_utils.py:1:0: C0114: Missing module docstring (missing-module-docstring)
opencda/core/application/edge/transform_utils.py:12:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/transform_utils.py:13:46: C0103: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/transform_utils.py:16:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/transform_utils.py:17:47: C0103: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/transform_utils.py:20:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/transform_utils.py:29:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/transform_utils.py:29:20: C0103: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/transform_utils.py:29:22: C0103: Argument name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/transform_utils.py:34:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/transform_utils.py:38:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/transform_utils.py:42:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/transform_utils.py:44:18: W0612: Unused variable 'inverse_rotation_mat' (unused-variable)
opencda/core/application/edge/transform_utils.py:55:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/transform_utils.py:60:4: W0621: Redefining name 'transform' from outer scope (line 34) (redefined-outer-name)
opencda/core/application/edge/transform_utils.py:115:-1: W0105: String statement has no effect (pointless-string-statement)
opencda/core/application/edge/transform_utils.py:123:0: C0115: Missing class docstring (missing-class-docstring)
opencda/core/application/edge/transform_utils.py:123:0: C0103: Class name "transform_processor" doesn't conform to PascalCase naming style (invalid-name)
opencda/core/application/edge/transform_utils.py:132:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/transform_utils.py:145:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/transform_utils.py:146:8: W0612: Unused variable 'initial_compute_flag' (unused-variable)
opencda/core/application/edge/transform_utils.py:171:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/transform_utils.py:172:8: W0612: Unused variable 'initial_compute_flag' (unused-variable)
opencda/core/application/edge/transform_utils.py:187:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/transform_utils.py:192:8: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
opencda/core/application/edge/transform_utils.py:188:8: W0612: Unused variable 'initial_compute_flag' (unused-variable)
opencda/core/application/edge/transform_utils.py:3:0: C0411: standard import "import sys" should be placed before "import numpy as np" (wrong-import-order)
opencda/core/application/edge/transform_utils.py:10:0: C0411: third party import "import carla" should be placed before "import ecloud_pb2 as ecloud" (wrong-import-order)
opencda/core/application/edge/transform_utils.py:3:0: W0611: Unused import sys (unused-import)
opencda/core/application/edge/transform_utils.py:5:0: W0611: Unused MessageToJson imported from google.protobuf.json_format (unused-import)
opencda/core/application/edge/transform_utils.py:6:0: W0611: Unused import grpc (unused-import)
opencda/core/application/edge/transform_utils.py:8:0: W0611: Unused ecloud_pb2_grpc imported as rpc (unused-import)
************* Module OpenCDA.opencda.core.application.edge.edge_debug_helper
opencda/core/application/edge/edge_debug_helper.py:35:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_debug_helper.py:63:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/edge_debug_helper.py:72:0: C0305: Trailing newlines (trailing-newlines)
opencda/core/application/edge/edge_debug_helper.py:30:8: R1725: Consider using Python 3 style super() without arguments (super-with-arguments)
opencda/core/application/edge/edge_debug_helper.py:37:4: R0913: Too many arguments (6/5) (too-many-arguments)
opencda/core/application/edge/edge_debug_helper.py:37:67: W0613: Unused argument 'algorithm_time_step' (unused-argument)
************* Module OpenCDA.opencda.core.application.edge.collab_sandbox
opencda/core/application/edge/collab_sandbox.py:43:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:44:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:45:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:46:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:47:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:48:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:49:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:50:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:51:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:53:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:54:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:55:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:57:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:58:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:59:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:60:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:61:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:62:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:63:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:64:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:65:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:67:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:68:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:70:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:71:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:72:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/collab_sandbox.py:73:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:76:0: C0301: Line too long (103/100) (line-too-long)
opencda/core/application/edge/collab_sandbox.py:76:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:77:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:78:12: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/collab_sandbox.py:78:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:79:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:80:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:81:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:82:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:85:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:86:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:88:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:90:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:92:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:93:0: C0301: Line too long (134/100) (line-too-long)
opencda/core/application/edge/collab_sandbox.py:93:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:96:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:97:0: C0301: Line too long (105/100) (line-too-long)
opencda/core/application/edge/collab_sandbox.py:97:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:98:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:99:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:101:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:102:0: C0301: Line too long (105/100) (line-too-long)
opencda/core/application/edge/collab_sandbox.py:102:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:113:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:115:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:119:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:120:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:121:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:122:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:123:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:124:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:125:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:127:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:128:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:129:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:130:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:131:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:132:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:133:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:135:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:136:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:137:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:138:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:139:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:140:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:142:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:143:0: C0301: Line too long (102/100) (line-too-long)
opencda/core/application/edge/collab_sandbox.py:144:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:145:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:146:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:147:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:148:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:149:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:150:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:151:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:152:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:153:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:154:0: W0311: Bad indentation. Found 6 spaces, expected 24 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:155:0: W0311: Bad indentation. Found 6 spaces, expected 24 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:156:0: W0311: Bad indentation. Found 6 spaces, expected 24 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:157:0: W0311: Bad indentation. Found 6 spaces, expected 24 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:158:0: W0311: Bad indentation. Found 7 spaces, expected 28 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:159:0: W0311: Bad indentation. Found 6 spaces, expected 24 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:160:0: W0311: Bad indentation. Found 7 spaces, expected 28 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:161:0: W0311: Bad indentation. Found 6 spaces, expected 24 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:163:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:167:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:168:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:169:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:171:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:172:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:173:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:174:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:175:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:176:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:178:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:179:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:180:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:181:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:182:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:184:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:185:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:186:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:187:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:188:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:190:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:191:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:193:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:194:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:196:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:197:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:198:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:199:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:201:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:202:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:203:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:204:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:205:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:207:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:208:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:209:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:210:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:211:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:213:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:214:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:216:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:218:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:224:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:226:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:227:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:229:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:230:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:231:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:232:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:233:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:234:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:236:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:237:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:238:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:240:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:241:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:242:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:243:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:244:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:245:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:249:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:251:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:252:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:254:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:255:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:256:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:258:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:259:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:260:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:261:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:262:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:264:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:265:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:266:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:267:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:268:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:270:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:272:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:273:0: W0311: Bad indentation. Found 6 spaces, expected 24 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:274:0: W0311: Bad indentation. Found 7 spaces, expected 28 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:275:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:276:0: W0311: Bad indentation. Found 6 spaces, expected 24 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:277:0: W0311: Bad indentation. Found 7 spaces, expected 28 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:278:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:279:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:280:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:281:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:282:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:283:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:285:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:287:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:288:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:289:0: W0311: Bad indentation. Found 6 spaces, expected 24 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:290:0: W0311: Bad indentation. Found 7 spaces, expected 28 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:291:0: W0311: Bad indentation. Found 7 spaces, expected 28 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:292:0: W0311: Bad indentation. Found 8 spaces, expected 32 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:293:0: W0311: Bad indentation. Found 7 spaces, expected 28 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:294:0: W0311: Bad indentation. Found 8 spaces, expected 32 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:295:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:296:0: W0311: Bad indentation. Found 6 spaces, expected 24 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:297:0: W0311: Bad indentation. Found 7 spaces, expected 28 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:298:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:299:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:300:0: W0311: Bad indentation. Found 6 spaces, expected 24 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:301:0: W0311: Bad indentation. Found 7 spaces, expected 28 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:302:0: W0311: Bad indentation. Found 6 spaces, expected 24 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:303:0: W0311: Bad indentation. Found 7 spaces, expected 28 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:304:0: W0311: Bad indentation. Found 6 spaces, expected 24 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:305:0: W0311: Bad indentation. Found 7 spaces, expected 28 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:307:0: W0311: Bad indentation. Found 6 spaces, expected 24 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:308:0: W0311: Bad indentation. Found 7 spaces, expected 28 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:309:0: W0311: Bad indentation. Found 8 spaces, expected 32 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:310:0: W0311: Bad indentation. Found 6 spaces, expected 24 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:311:0: W0311: Bad indentation. Found 7 spaces, expected 28 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:312:0: W0311: Bad indentation. Found 8 spaces, expected 32 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:314:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:315:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:316:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:317:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:318:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:319:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:320:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:321:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:322:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:323:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:324:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:325:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:326:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:328:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:330:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:332:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:334:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:335:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:336:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:337:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:338:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:339:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:340:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:341:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:342:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:343:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:344:31: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/collab_sandbox.py:344:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:345:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:346:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:348:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:359:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:360:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:362:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:363:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:364:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:366:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:367:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:368:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:369:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:371:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:372:0: W0311: Bad indentation. Found 6 spaces, expected 24 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:373:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:374:0: W0311: Bad indentation. Found 6 spaces, expected 24 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:375:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:376:0: W0311: Bad indentation. Found 6 spaces, expected 24 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:379:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:380:0: W0311: Bad indentation. Found 6 spaces, expected 24 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:381:0: W0311: Bad indentation. Found 6 spaces, expected 24 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:383:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:386:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:388:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:389:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:390:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:391:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:392:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:394:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:396:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:397:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:398:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:400:0: C0301: Line too long (113/100) (line-too-long)
opencda/core/application/edge/collab_sandbox.py:400:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:402:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:403:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:404:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:405:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:407:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:408:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:410:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:411:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:412:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:413:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:417:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:418:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:420:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:421:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:422:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:423:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:424:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:425:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:426:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:433:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:434:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:435:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:438:0: C0301: Line too long (109/100) (line-too-long)
opencda/core/application/edge/collab_sandbox.py:438:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:439:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:442:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:443:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:444:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:445:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:449:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:450:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:451:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:452:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:453:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:454:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:456:0: C0301: Line too long (147/100) (line-too-long)
opencda/core/application/edge/collab_sandbox.py:456:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:458:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:461:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:462:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:464:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:465:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:467:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:470:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:471:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:472:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:474:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:475:0: C0301: Line too long (139/100) (line-too-long)
opencda/core/application/edge/collab_sandbox.py:475:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:476:0: C0301: Line too long (139/100) (line-too-long)
opencda/core/application/edge/collab_sandbox.py:476:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:477:0: C0301: Line too long (144/100) (line-too-long)
opencda/core/application/edge/collab_sandbox.py:477:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:478:0: C0301: Line too long (153/100) (line-too-long)
opencda/core/application/edge/collab_sandbox.py:478:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:480:0: C0301: Line too long (122/100) (line-too-long)
opencda/core/application/edge/collab_sandbox.py:481:0: C0301: Line too long (115/100) (line-too-long)
opencda/core/application/edge/collab_sandbox.py:481:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:483:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:484:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:485:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:486:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:488:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:490:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:491:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:492:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:493:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:495:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:496:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:498:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:499:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:500:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:501:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:502:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:503:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:504:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:506:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:507:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:508:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:509:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:510:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:511:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:513:0: C0301: Line too long (143/100) (line-too-long)
opencda/core/application/edge/collab_sandbox.py:513:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:515:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:518:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:520:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:521:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:522:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:523:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/application/edge/collab_sandbox.py:524:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:526:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:529:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:530:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:531:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:533:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:534:0: C0301: Line too long (139/100) (line-too-long)
opencda/core/application/edge/collab_sandbox.py:534:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:535:0: C0301: Line too long (139/100) (line-too-long)
opencda/core/application/edge/collab_sandbox.py:535:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:536:0: C0301: Line too long (144/100) (line-too-long)
opencda/core/application/edge/collab_sandbox.py:536:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:537:0: C0301: Line too long (153/100) (line-too-long)
opencda/core/application/edge/collab_sandbox.py:537:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
opencda/core/application/edge/collab_sandbox.py:540:0: C0304: Final newline missing (missing-final-newline)
opencda/core/application/edge/collab_sandbox.py:165:3: W0511: TODO Rework ahead check to account for overspill/scrolling (fixme)
opencda/core/application/edge/collab_sandbox.py:1:0: C0114: Missing module docstring (missing-module-docstring)
opencda/core/application/edge/collab_sandbox.py:42:0: C0115: Missing class docstring (missing-class-docstring)
opencda/core/application/edge/collab_sandbox.py:46:2: C0103: Attribute name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/collab_sandbox.py:47:2: C0103: Attribute name "dt" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/collab_sandbox.py:42:0: R0902: Too many instance attributes (11/7) (too-many-instance-attributes)
opencda/core/application/edge/collab_sandbox.py:43:20: C0103: Argument name "dt" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/collab_sandbox.py:43:1: R0913: Too many arguments (6/5) (too-many-arguments)
opencda/core/application/edge/collab_sandbox.py:57:1: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/collab_sandbox.py:67:1: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/collab_sandbox.py:75:0: C0115: Missing class docstring (missing-class-docstring)
opencda/core/application/edge/collab_sandbox.py:78:2: C0103: Attribute name "dt" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/collab_sandbox.py:76:20: C0103: Argument name "dt" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/collab_sandbox.py:76:1: R0913: Too many arguments (8/5) (too-many-arguments)
opencda/core/application/edge/collab_sandbox.py:119:1: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/collab_sandbox.py:127:1: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/collab_sandbox.py:135:1: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/collab_sandbox.py:142:1: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/collab_sandbox.py:149:3: R1724: Unnecessary "else" after "continue", remove the "else" and de-indent the code inside it (no-else-continue)
opencda/core/application/edge/collab_sandbox.py:152:4: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
opencda/core/application/edge/collab_sandbox.py:157:9: R1716: Simplify chained comparison between the operands (chained-comparison)
opencda/core/application/edge/collab_sandbox.py:159:11: R1716: Simplify chained comparison between the operands (chained-comparison)
opencda/core/application/edge/collab_sandbox.py:163:1: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/collab_sandbox.py:163:1: R0912: Too many branches (16/12) (too-many-branches)
opencda/core/application/edge/collab_sandbox.py:218:1: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/collab_sandbox.py:229:2: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
opencda/core/application/edge/collab_sandbox.py:230:3: R1724: Unnecessary "else" after "continue", remove the "else" and de-indent the code inside it (no-else-continue)
opencda/core/application/edge/collab_sandbox.py:240:3: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
opencda/core/application/edge/collab_sandbox.py:241:4: R1724: Unnecessary "else" after "continue", remove the "else" and de-indent the code inside it (no-else-continue)
opencda/core/application/edge/collab_sandbox.py:251:1: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/collab_sandbox.py:254:2: R1702: Too many nested blocks (6/5) (too-many-nested-blocks)
opencda/core/application/edge/collab_sandbox.py:254:2: R1702: Too many nested blocks (6/5) (too-many-nested-blocks)
opencda/core/application/edge/collab_sandbox.py:251:1: R0912: Too many branches (27/12) (too-many-branches)
opencda/core/application/edge/collab_sandbox.py:251:1: R0915: Too many statements (64/50) (too-many-statements)
opencda/core/application/edge/collab_sandbox.py:252:2: W0612: Unused variable 'margin_safety' (unused-variable)
opencda/core/application/edge/collab_sandbox.py:334:1: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/collab_sandbox.py:348:1: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/collab_sandbox.py:366:3: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
opencda/core/application/edge/collab_sandbox.py:385:0: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/application/edge/collab_sandbox.py:385:0: R0914: Too many local variables (30/15) (too-many-locals)
opencda/core/application/edge/collab_sandbox.py:417:1: W0621: Redefining name 'time' from outer scope (line 8) (redefined-outer-name)
opencda/core/application/edge/collab_sandbox.py:400:1: C0103: Variable name "Traffic_Tracker" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/collab_sandbox.py:407:21: C0103: Variable name "tv" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/collab_sandbox.py:407:25: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/collab_sandbox.py:422:22: C0103: Variable name "tv" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/collab_sandbox.py:422:26: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/collab_sandbox.py:481:1: C0103: Variable name "Traffic_Tracker" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/collab_sandbox.py:488:21: C0103: Variable name "tv" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/collab_sandbox.py:488:25: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/collab_sandbox.py:500:22: C0103: Variable name "tv" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/collab_sandbox.py:500:26: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/edge/collab_sandbox.py:385:0: R0915: Too many statements (96/50) (too-many-statements)
opencda/core/application/edge/collab_sandbox.py:389:1: W0612: Unused variable 'discretization_size' (unused-variable)
opencda/core/application/edge/collab_sandbox.py:394:1: W0612: Unused variable 'spawn_lane' (unused-variable)
opencda/core/application/edge/collab_sandbox.py:417:1: W0612: Unused variable 'time' (unused-variable)
opencda/core/application/edge/collab_sandbox.py:418:1: W0612: Unused variable 'lane_change_flag' (unused-variable)
opencda/core/application/edge/collab_sandbox.py:3:0: C0411: standard import "import math" should be placed before "import matplotlib" (wrong-import-order)
opencda/core/application/edge/collab_sandbox.py:8:0: C0411: standard import "import time" should be placed before "import matplotlib" (wrong-import-order)
opencda/core/application/edge/collab_sandbox.py:9:0: C0411: standard import "import datetime" should be placed before "import matplotlib" (wrong-import-order)
opencda/core/application/edge/collab_sandbox.py:10:0: C0411: standard import "import threading" should be placed before "import matplotlib" (wrong-import-order)
opencda/core/application/edge/collab_sandbox.py:11:0: C0411: standard import "from random import randint, random" should be placed before "import matplotlib" (wrong-import-order)
opencda/core/application/edge/collab_sandbox.py:12:0: C0411: standard import "import sys" should be placed before "import matplotlib" (wrong-import-order)
opencda/core/application/edge/collab_sandbox.py:13:0: C0411: standard import "import copy" should be placed before "import matplotlib" (wrong-import-order)
opencda/core/application/edge/collab_sandbox.py:15:0: C0411: standard import "import logging" should be placed before "import matplotlib" (wrong-import-order)
opencda/core/application/edge/collab_sandbox.py:1:0: W0611: Unused import matplotlib (unused-import)
opencda/core/application/edge/collab_sandbox.py:3:0: W0611: Unused import math (unused-import)
opencda/core/application/edge/collab_sandbox.py:5:0: W0611: Unused dot imported from numpy (unused-import)
opencda/core/application/edge/collab_sandbox.py:8:0: W0611: Unused import time (unused-import)
opencda/core/application/edge/collab_sandbox.py:9:0: W0611: Unused import datetime (unused-import)
opencda/core/application/edge/collab_sandbox.py:10:0: W0611: Unused import threading (unused-import)
opencda/core/application/edge/collab_sandbox.py:11:0: W0611: Unused randint imported from random (unused-import)
opencda/core/application/edge/collab_sandbox.py:11:0: W0611: Unused random imported from random (unused-import)
opencda/core/application/edge/collab_sandbox.py:13:0: W0611: Unused import copy (unused-import)
************* Module OpenCDA.opencda.core.application.platooning.platoon_debug_helper
opencda/core/application/platooning/platoon_debug_helper.py:30:8: R1725: Consider using Python 3 style super() without arguments (super-with-arguments)
************* Module OpenCDA.opencda.core.application.platooning.platooning_manager
opencda/core/application/platooning/platooning_manager.py:19:0: R0205: Class 'PlatooningManager' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/application/platooning/platooning_manager.py:19:0: R0902: Too many instance attributes (9/7) (too-many-instance-attributes)
opencda/core/application/platooning/platooning_manager.py:145:15: C0103: Variable name "vm" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/platooning/platooning_manager.py:151:25: R1719: The if expression can be replaced with 'test' (simplifiable-if-expression)
opencda/core/application/platooning/platooning_manager.py:181:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
opencda/core/application/platooning/platooning_manager.py:202:8: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
opencda/core/application/platooning/platooning_manager.py:212:8: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
opencda/core/application/platooning/platooning_manager.py:227:8: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
opencda/core/application/platooning/platooning_manager.py:258:8: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
opencda/core/application/platooning/platooning_manager.py:259:12: C0103: Variable name "vm" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/platooning/platooning_manager.py:280:27: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/application/platooning/platooning_manager.py:282:27: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/application/platooning/platooning_manager.py:284:27: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/application/platooning/platooning_manager.py:303:25: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/application/platooning/platooning_manager.py:304:51: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/application/platooning/platooning_manager.py:315:12: C0103: Variable name "vm" doesn't conform to snake_case naming style (invalid-name)
************* Module OpenCDA.opencda.core.application.platooning.platooning_plugin
opencda/core/application/platooning/platooning_plugin.py:15:0: R0205: Class 'PlatooningPlugin' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/application/platooning/platooning_plugin.py:15:0: R0902: Too many instance attributes (12/7) (too-many-instance-attributes)
opencda/core/application/platooning/platooning_plugin.py:186:8: C0103: Variable name "pm" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/platooning/platooning_plugin.py:190:15: C0103: Variable name "vm" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/platooning/platooning_plugin.py:201:16: C0103: Variable name "pm" doesn't conform to snake_case naming style (invalid-name)
opencda/core/application/platooning/platooning_plugin.py:234:14: C0103: Variable name "pm" doesn't conform to snake_case naming style (invalid-name)
************* Module OpenCDA.opencda.core.application.platooning.platoon_behavior_agent
opencda/core/application/platooning/platoon_behavior_agent.py:348:13: W0511: todo: current not working well on curve (fixme)
opencda/core/application/platooning/platoon_behavior_agent.py:22:0: R0902: Too many instance attributes (19/7) (too-many-instance-attributes)
opencda/core/application/platooning/platoon_behavior_agent.py:63:4: R0913: Too many arguments (7/5) (too-many-arguments)
opencda/core/application/platooning/platoon_behavior_agent.py:72:8: R1725: Consider using Python 3 style super() without arguments (super-with-arguments)
opencda/core/application/platooning/platoon_behavior_agent.py:101:4: R0911: Too many return statements (10/6) (too-many-return-statements)
opencda/core/application/platooning/platoon_behavior_agent.py:101:4: R0912: Too many branches (17/12) (too-many-branches)
opencda/core/application/platooning/platoon_behavior_agent.py:101:4: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
opencda/core/application/platooning/platoon_behavior_agent.py:134:26: W0612: Unused variable 'min_index' (unused-variable)
opencda/core/application/platooning/platoon_behavior_agent.py:307:4: R0914: Too many local variables (21/15) (too-many-locals)
opencda/core/application/platooning/platoon_behavior_agent.py:321:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
opencda/core/application/platooning/platoon_behavior_agent.py:330:28: W0212: Access to a protected member _ego_speed of a client class (protected-access)
opencda/core/application/platooning/platoon_behavior_agent.py:366:-1: W0105: String statement has no effect (pointless-string-statement)
opencda/core/application/platooning/platoon_behavior_agent.py:432:35: W0212: Access to a protected member _map of a client class (protected-access)
opencda/core/application/platooning/platoon_behavior_agent.py:501:4: R0911: Too many return statements (7/6) (too-many-return-statements)
opencda/core/application/platooning/platoon_behavior_agent.py:618:14: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/application/platooning/platoon_behavior_agent.py:679:14: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/application/platooning/platoon_behavior_agent.py:663:33: W0612: Unused variable 'rear_vehicle_manager' (unused-variable)
opencda/core/application/platooning/platoon_behavior_agent.py:685:4: R0914: Too many local variables (17/15) (too-many-locals)
opencda/core/application/platooning/platoon_behavior_agent.py:729:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
opencda/core/application/platooning/platoon_behavior_agent.py:685:4: R0912: Too many branches (13/12) (too-many-branches)
opencda/core/application/platooning/platoon_behavior_agent.py:827:4: R0914: Too many local variables (17/15) (too-many-locals)
opencda/core/application/platooning/platoon_behavior_agent.py:900:12: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
opencda/core/application/platooning/platoon_behavior_agent.py:17:0: W0611: Unused get_speed imported from opencda.core.common.misc (unused-import)
************* Module OpenCDA.opencda.core.common.vehicle_manager
opencda/core/common/vehicle_manager.py:125:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/vehicle_manager.py:127:0: C0325: Unnecessary parens after 'assert' keyword (superfluous-parens)
opencda/core/common/vehicle_manager.py:128:0: C0301: Line too long (203/100) (line-too-long)
opencda/core/common/vehicle_manager.py:135:0: C0301: Line too long (136/100) (line-too-long)
opencda/core/common/vehicle_manager.py:141:0: C0325: Unnecessary parens after 'assert' keyword (superfluous-parens)
opencda/core/common/vehicle_manager.py:144:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/vehicle_manager.py:155:0: C0325: Unnecessary parens after 'assert' keyword (superfluous-parens)
opencda/core/common/vehicle_manager.py:156:49: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/vehicle_manager.py:157:0: C0301: Line too long (103/100) (line-too-long)
opencda/core/common/vehicle_manager.py:159:0: C0301: Line too long (115/100) (line-too-long)
opencda/core/common/vehicle_manager.py:160:0: C0301: Line too long (109/100) (line-too-long)
opencda/core/common/vehicle_manager.py:164:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/vehicle_manager.py:180:62: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/vehicle_manager.py:184:0: C0301: Line too long (114/100) (line-too-long)
opencda/core/common/vehicle_manager.py:185:0: C0301: Line too long (114/100) (line-too-long)
opencda/core/common/vehicle_manager.py:186:0: C0301: Line too long (114/100) (line-too-long)
opencda/core/common/vehicle_manager.py:187:25: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/vehicle_manager.py:195:52: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/vehicle_manager.py:196:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/vehicle_manager.py:204:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/vehicle_manager.py:219:42: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/vehicle_manager.py:220:0: C0301: Line too long (102/100) (line-too-long)
opencda/core/common/vehicle_manager.py:230:0: C0301: Line too long (105/100) (line-too-long)
opencda/core/common/vehicle_manager.py:231:68: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/vehicle_manager.py:240:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/vehicle_manager.py:244:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/vehicle_manager.py:251:20: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/vehicle_manager.py:282:0: C0301: Line too long (115/100) (line-too-long)
opencda/core/common/vehicle_manager.py:362:68: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/vehicle_manager.py:377:82: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/vehicle_manager.py:409:41: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/vehicle_manager.py:418:0: C0301: Line too long (105/100) (line-too-long)
opencda/core/common/vehicle_manager.py:419:89: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/vehicle_manager.py:420:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/vehicle_manager.py:43:34: W0511: TODO: config? (fixme)
opencda/core/common/vehicle_manager.py:156:17: W0511: TODO: support multiple edges...  (fixme)
opencda/core/common/vehicle_manager.py:13:0: W0404: Reimport 'random' (imported line 8) (reimported)
opencda/core/common/vehicle_manager.py:37:0: W0404: Reimport 'logging' (imported line 11) (reimported)
opencda/core/common/vehicle_manager.py:37:0: C0410: Multiple imports on one line (coloredlogs, logging) (multiple-imports)
opencda/core/common/vehicle_manager.py:46:0: R0205: Class 'VehicleManager' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/common/vehicle_manager.py:46:0: R0902: Too many instance attributes (21/7) (too-many-instance-attributes)
opencda/core/common/vehicle_manager.py:95:4: W0102: Dangerous default value [] as argument (dangerous-default-value)
opencda/core/common/vehicle_manager.py:95:4: R0913: Too many arguments (15/5) (too-many-arguments)
opencda/core/common/vehicle_manager.py:95:4: R0914: Too many local variables (33/15) (too-many-locals)
opencda/core/common/vehicle_manager.py:140:11: C0121: Comparison 'run_distributed == False' should be 'run_distributed is False' if checking for the singleton value False, or 'not run_distributed' if testing for falsiness (singleton-comparison)
opencda/core/common/vehicle_manager.py:163:16: W0199: Assert called on a populated tuple. Did you mean 'assert x,y'? (assert-on-tuple)
opencda/core/common/vehicle_manager.py:241:19: W0718: Catching too general exception Exception (broad-exception-caught)
opencda/core/common/vehicle_manager.py:213:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/core/common/vehicle_manager.py:230:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/core/common/vehicle_manager.py:237:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/core/common/vehicle_manager.py:241:12: C0103: Variable name "e" doesn't conform to snake_case naming style (invalid-name)
opencda/core/common/vehicle_manager.py:95:4: R0912: Too many branches (22/12) (too-many-branches)
opencda/core/common/vehicle_manager.py:95:4: R0915: Too many statements (99/50) (too-many-statements)
opencda/core/common/vehicle_manager.py:97:12: W0613: Unused argument 'vehicle' (unused-argument)
opencda/core/common/vehicle_manager.py:311:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/common/vehicle_manager.py:362:8: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
opencda/core/common/vehicle_manager.py:362:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/common/vehicle_manager.py:369:8: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
opencda/core/common/vehicle_manager.py:369:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/common/vehicle_manager.py:377:8: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
opencda/core/common/vehicle_manager.py:377:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/common/vehicle_manager.py:382:8: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
opencda/core/common/vehicle_manager.py:382:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/common/vehicle_manager.py:389:8: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
opencda/core/common/vehicle_manager.py:389:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/common/vehicle_manager.py:405:15: W0718: Catching too general exception Exception (broad-exception-caught)
opencda/core/common/vehicle_manager.py:405:8: C0103: Variable name "e" doesn't conform to snake_case naming style (invalid-name)
opencda/core/common/vehicle_manager.py:406:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/core/common/vehicle_manager.py:406:25: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
opencda/core/common/vehicle_manager.py:411:8: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
opencda/core/common/vehicle_manager.py:411:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/common/vehicle_manager.py:415:8: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
opencda/core/common/vehicle_manager.py:415:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/common/vehicle_manager.py:416:8: W1201: Use lazy % formatting in logging functions (logging-not-lazy)
opencda/core/common/vehicle_manager.py:416:22: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/common/vehicle_manager.py:405:8: W0612: Unused variable 'e' (unused-variable)
opencda/core/common/vehicle_manager.py:11:0: C0411: standard import "import logging" should be placed before "import opencda.logging_ecloud" (wrong-import-order)
opencda/core/common/vehicle_manager.py:12:0: C0411: standard import "import time" should be placed before "import opencda.logging_ecloud" (wrong-import-order)
opencda/core/common/vehicle_manager.py:13:0: C0411: standard import "import random" should be placed before "import opencda.logging_ecloud" (wrong-import-order)
opencda/core/common/vehicle_manager.py:15:0: C0411: third party import "import carla" should be placed before "import opencda.logging_ecloud" (wrong-import-order)
opencda/core/common/vehicle_manager.py:16:0: C0411: third party import "import numpy as np" should be placed before "import opencda.logging_ecloud" (wrong-import-order)
opencda/core/common/vehicle_manager.py:37:0: C0411: third party import "import coloredlogs, logging" should be placed before "import opencda.logging_ecloud" (wrong-import-order)
opencda/core/common/vehicle_manager.py:37:0: C0411: standard import "import coloredlogs, logging" should be placed before "import carla" (wrong-import-order)
opencda/core/common/vehicle_manager.py:13:0: C0412: Imports from package random are not grouped (ungrouped-imports)
opencda/core/common/vehicle_manager.py:37:0: C0412: Imports from package logging are not grouped (ungrouped-imports)
opencda/core/common/vehicle_manager.py:10:0: W0611: Unused import opencda.logging_ecloud (unused-import)
opencda/core/common/vehicle_manager.py:18:0: W0611: Unused CavWorld imported from opencda.core.common.cav_world (unused-import)
************* Module OpenCDA.opencda.core.common.data_dumper
opencda/core/common/data_dumper.py:302:0: C0304: Final newline missing (missing-final-newline)
opencda/core/common/data_dumper.py:20:0: R0205: Class 'DataDumper' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/common/data_dumper.py:118:25: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/common/data_dumper.py:118:48: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/common/data_dumper.py:120:12: E1101: Module 'cv2' has no 'imwrite' member (no-member)
opencda/core/common/data_dumper.py:143:19: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/common/data_dumper.py:149:4: R0914: Too many local variables (34/15) (too-many-locals)
opencda/core/common/data_dumper.py:262:29: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
opencda/core/common/data_dumper.py:270:12: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/core/common/data_dumper.py:271:12: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/core/common/data_dumper.py:278:19: C0209: Formatting a regular string which could be a f-string (consider-using-f-string)
************* Module OpenCDA.opencda.core.common.v2x_manager
opencda/core/common/v2x_manager.py:19:0: R0205: Class 'V2XManager' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/common/v2x_manager.py:19:0: R0902: Too many instance attributes (13/7) (too-many-instance-attributes)
opencda/core/common/v2x_manager.py:122:8: C0103: Variable name "z" doesn't conform to snake_case naming style (invalid-name)
opencda/core/common/v2x_manager.py:156:17: C0103: Variable name "vm" doesn't conform to snake_case naming style (invalid-name)
opencda/core/common/v2x_manager.py:173:-1: W0105: String statement has no effect (pointless-string-statement)
opencda/core/common/v2x_manager.py:215:32: C0103: Argument name "vm" doesn't conform to snake_case naming style (invalid-name)
opencda/core/common/v2x_manager.py:226:31: C0103: Argument name "vm" doesn't conform to snake_case naming style (invalid-name)
opencda/core/common/v2x_manager.py:263:15: R1719: The if expression can be replaced with 'not test' (simplifiable-if-expression)
************* Module OpenCDA.opencda.core.common.ecloud_config
opencda/core/common/ecloud_config.py:12:13: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/ecloud_config.py:14:27: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/ecloud_config.py:21:53: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/ecloud_config.py:23:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/ecloud_config.py:35:0: C0301: Line too long (153/100) (line-too-long)
opencda/core/common/ecloud_config.py:65:0: C0301: Line too long (116/100) (line-too-long)
opencda/core/common/ecloud_config.py:66:82: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/ecloud_config.py:70:14: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/ecloud_config.py:71:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/ecloud_config.py:75:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/ecloud_config.py:79:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/ecloud_config.py:82:53: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/ecloud_config.py:83:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/ecloud_config.py:86:53: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/ecloud_config.py:90:54: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/ecloud_config.py:93:0: C0301: Line too long (102/100) (line-too-long)
opencda/core/common/ecloud_config.py:95:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/ecloud_config.py:97:0: C0301: Line too long (173/100) (line-too-long)
opencda/core/common/ecloud_config.py:100:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/ecloud_config.py:104:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/ecloud_config.py:108:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/ecloud_config.py:1:0: C0114: Missing module docstring (missing-module-docstring)
opencda/core/common/ecloud_config.py:4:0: C0115: Missing class docstring (missing-class-docstring)
opencda/core/common/ecloud_config.py:4:0: C0103: Class name "eLocationType" doesn't conform to PascalCase naming style (invalid-name)
opencda/core/common/ecloud_config.py:9:0: C0115: Missing class docstring (missing-class-docstring)
opencda/core/common/ecloud_config.py:9:0: C0103: Class name "eDoneBehavior" doesn't conform to PascalCase naming style (invalid-name)
opencda/core/common/ecloud_config.py:14:0: C0115: Missing class docstring (missing-class-docstring)
opencda/core/common/ecloud_config.py:14:0: R0205: Class 'EcloudConfig' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/common/ecloud_config.py:52:21: C0201: Consider iterating the dictionary directly instead of calling .keys() (consider-iterating-dictionary)
opencda/core/common/ecloud_config.py:53:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/core/common/ecloud_config.py:55:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/core/common/ecloud_config.py:62:21: C0201: Consider iterating the dictionary directly instead of calling .keys() (consider-iterating-dictionary)
opencda/core/common/ecloud_config.py:63:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/core/common/ecloud_config.py:65:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/core/common/ecloud_config.py:28:4: R1711: Useless return at end of function or method (useless-return)
opencda/core/common/ecloud_config.py:72:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/common/ecloud_config.py:73:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/core/common/ecloud_config.py:76:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/common/ecloud_config.py:77:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/core/common/ecloud_config.py:80:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/common/ecloud_config.py:81:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/core/common/ecloud_config.py:84:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/common/ecloud_config.py:85:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/core/common/ecloud_config.py:88:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/common/ecloud_config.py:89:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/core/common/ecloud_config.py:92:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/common/ecloud_config.py:93:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/core/common/ecloud_config.py:96:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/common/ecloud_config.py:97:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/core/common/ecloud_config.py:101:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/common/ecloud_config.py:102:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/core/common/ecloud_config.py:105:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/common/ecloud_config.py:106:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
opencda/core/common/ecloud_config.py:109:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/common/ecloud_config.py:110:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module OpenCDA.opencda.core.common.vehicle_manager_proxy
opencda/core/common/vehicle_manager_proxy.py:60:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/vehicle_manager_proxy.py:63:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/vehicle_manager_proxy.py:70:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/vehicle_manager_proxy.py:101:0: C0301: Line too long (136/100) (line-too-long)
opencda/core/common/vehicle_manager_proxy.py:101:0: W0311: Bad indentation. Found 16 spaces, expected 12 (bad-indentation)
opencda/core/common/vehicle_manager_proxy.py:103:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/vehicle_manager_proxy.py:108:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/vehicle_manager_proxy.py:111:0: C0303: Trailing whitespace (trailing-whitespace)
opencda/core/common/vehicle_manager_proxy.py:105:13: W0511: TODO: support multiple edges... (fixme)
opencda/core/common/vehicle_manager_proxy.py:152:31: W0511: TODO: fix (fixme)
opencda/core/common/vehicle_manager_proxy.py:43:0: C0115: Missing class docstring (missing-class-docstring)
opencda/core/common/vehicle_manager_proxy.py:46:8: C0103: Attribute name "id" doesn't conform to snake_case naming style (invalid-name)
opencda/core/common/vehicle_manager_proxy.py:43:0: R0205: Class 'ActorProxy' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/common/vehicle_manager_proxy.py:45:17: C0103: Argument name "id" doesn't conform to snake_case naming style (invalid-name)
opencda/core/common/vehicle_manager_proxy.py:45:17: W0622: Redefining built-in 'id' (redefined-builtin)
opencda/core/common/vehicle_manager_proxy.py:58:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/common/vehicle_manager_proxy.py:61:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/common/vehicle_manager_proxy.py:64:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/common/vehicle_manager_proxy.py:67:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/common/vehicle_manager_proxy.py:71:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/common/vehicle_manager_proxy.py:74:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/common/vehicle_manager_proxy.py:78:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/common/vehicle_manager_proxy.py:81:0: R0205: Class 'VehicleManagerProxy' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/common/vehicle_manager_proxy.py:81:0: R0902: Too many instance attributes (17/7) (too-many-instance-attributes)
opencda/core/common/vehicle_manager_proxy.py:86:4: R0913: Too many arguments (10/5) (too-many-arguments)
opencda/core/common/vehicle_manager_proxy.py:110:12: W0199: Assert called on a populated tuple. Did you mean 'assert x,y'? (assert-on-tuple)
opencda/core/common/vehicle_manager_proxy.py:94:12: W0613: Unused argument 'carla_version' (unused-argument)
opencda/core/common/vehicle_manager_proxy.py:125:4: C0116: Missing function or method docstring (missing-function-docstring)
opencda/core/common/vehicle_manager_proxy.py:127:8: W0201: Attribute 'vehicle' defined outside __init__ (attribute-defined-outside-init)
opencda/core/common/vehicle_manager_proxy.py:135:8: W0201: Attribute 'v2x_manager' defined outside __init__ (attribute-defined-outside-init)
opencda/core/common/vehicle_manager_proxy.py:137:8: W0201: Attribute 'localizer' defined outside __init__ (attribute-defined-outside-init)
opencda/core/common/vehicle_manager_proxy.py:143:8: W0201: Attribute 'perception_manager' defined outside __init__ (attribute-defined-outside-init)
opencda/core/common/vehicle_manager_proxy.py:148:8: W0201: Attribute 'agent' defined outside __init__ (attribute-defined-outside-init)
opencda/core/common/vehicle_manager_proxy.py:151:12: W0201: Attribute 'agent' defined outside __init__ (attribute-defined-outside-init)
opencda/core/common/vehicle_manager_proxy.py:159:12: W0201: Attribute 'agent' defined outside __init__ (attribute-defined-outside-init)
opencda/core/common/vehicle_manager_proxy.py:162:8: W0201: Attribute 'controller' defined outside __init__ (attribute-defined-outside-init)
opencda/core/common/vehicle_manager_proxy.py:165:12: W0201: Attribute 'data_dumper' defined outside __init__ (attribute-defined-outside-init)
opencda/core/common/vehicle_manager_proxy.py:169:12: W0201: Attribute 'data_dumper' defined outside __init__ (attribute-defined-outside-init)
opencda/core/common/vehicle_manager_proxy.py:81:0: R0903: Too few public methods (1/2) (too-few-public-methods)
opencda/core/common/vehicle_manager_proxy.py:8:0: W0611: Unused import uuid (unused-import)
opencda/core/common/vehicle_manager_proxy.py:9:0: W0611: Unused import subprocess (unused-import)
opencda/core/common/vehicle_manager_proxy.py:10:0: W0611: Unused import random (unused-import)
opencda/core/common/vehicle_manager_proxy.py:11:0: W0611: Unused import socket (unused-import)
opencda/core/common/vehicle_manager_proxy.py:12:0: W0611: Unused import json (unused-import)
opencda/core/common/vehicle_manager_proxy.py:13:0: W0611: Unused import psutil (unused-import)
opencda/core/common/vehicle_manager_proxy.py:16:0: W0611: Unused numpy imported as np (unused-import)
************* Module OpenCDA.opencda.core.common.cav_world
opencda/core/common/cav_world.py:1:0: C0114: Missing module docstring (missing-module-docstring)
opencda/core/common/cav_world.py:9:0: R0205: Class 'CavWorld' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)
opencda/core/common/cav_world.py:156:17: C0103: Variable name "vm" doesn't conform to snake_case naming style (invalid-name)
opencda/core/common/cav_world.py:157:12: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/core/common/cav_world.py:158:12: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/core/common/cav_world.py:156:12: W0612: Unused variable 'key' (unused-variable)
************* Module OpenCDA.opencda.core.common.misc
opencda/core/common/misc.py:18:44: C0103: Argument name "z" doesn't conform to snake_case naming style (invalid-name)
opencda/core/common/misc.py:20:26: C0103: Argument name "lt" doesn't conform to snake_case naming style (invalid-name)
opencda/core/common/misc.py:18:0: R0913: Too many arguments (7/5) (too-many-arguments)
opencda/core/common/misc.py:44:4: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
opencda/core/common/misc.py:46:11: R1701: Consider merging these isinstance calls to isinstance(wpt, (list, tuple)) (consider-merging-isinstance)
opencda/core/common/misc.py:18:44: W0613: Unused argument 'z' (unused-argument)
opencda/core/common/misc.py:20:42: W0613: Unused argument 'arrow_size' (unused-argument)
opencda/core/common/misc.py:60:37: C0103: Argument name "z" doesn't conform to snake_case naming style (invalid-name)
opencda/core/common/misc.py:181:8: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/core/common/misc.py:182:8: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/core/common/misc.py:184:8: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/core/common/misc.py:185:8: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/core/common/misc.py:202:4: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/core/common/misc.py:203:4: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/core/common/misc.py:204:4: C0103: Variable name "z" doesn't conform to snake_case naming style (invalid-name)
opencda/core/common/misc.py:222:4: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
opencda/core/common/misc.py:223:4: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
opencda/core/common/misc.py:224:4: C0103: Variable name "z" doesn't conform to snake_case naming style (invalid-name)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.core.application.edge.edge_manager:[146:314]
==OpenCDA.opencda.core.application.edge.edge_manager_dyn:[129:293]
      self._dao = GlobalRoutePlannerDAO(world.get_map(), 2)
      grp = GlobalRoutePlanner(self._dao)
      grp.setup()
      waypoints = world.get_map().generate_waypoints(10)

      indices_source = np.load('Indices_start.npy')
      indices_dest = np.load('Indices_dest.npy')

      indices_source = indices_source.astype(int)
      indices_dest = indices_dest.astype(int)

      #print("Source Shape: ", indices_source.shape)

      a = carla.Location(waypoints[indices_source[0,1]].transform.location)
      b = carla.Location(waypoints[indices_dest[0,1]].transform.location)
      c = carla.Location(waypoints[indices_source[1,1]].transform.location)
      d = carla.Location(waypoints[indices_dest[1,1]].transform.location)
      e = carla.Location(waypoints[indices_source[2,1]].transform.location)
      f = carla.Location(waypoints[indices_dest[2,1]].transform.location)
      g = carla.Location(waypoints[indices_source[3,1]].transform.location)
      j = carla.Location(waypoints[indices_dest[3,1]].transform.location)

      w1 = grp.trace_route(a, b) # there are other funcations can be used to generate a route in GlobalRoutePlanner.
      w2 = grp.trace_route(c, d) # there are other funcations can be used to generate a route in GlobalRoutePlanner.
      w3 = grp.trace_route(e, f) # there are other funcations can be used to generate a route in GlobalRoutePlanner.
      w4 = grp.trace_route(g, j) # there are other funcations can be used to generate a route in GlobalRoutePlanner.

      logger.debug(a)
      logger.debug(b)
      logger.debug(c)
      logger.debug(d)

      i = 0
      for w in w1:
        #print(w)
        mark=str(i)
        if i % 10 == 0:
            world.debug.draw_string(w[0].transform.location,mark, draw_shadow=False, color=carla.Color(r=255, g=0, b=0), life_time=120.0, persistent_lines=True)
        else:
            world.debug.draw_string(w[0].transform.location, mark, draw_shadow=False,
            color = carla.Color(r=0, g=0, b=255), life_time=1000.0,
            persistent_lines=True)
        i += 1
      i = 0
      for w in w2:
        #print(w)
        mark=str(i)
        if i % 10 == 0:
            world.debug.draw_string(w[0].transform.location,mark, draw_shadow=False, color=carla.Color(r=255, g=0, b=0), life_time=120.0, persistent_lines=True)
        else:
            world.debug.draw_string(w[0].transform.location, mark, draw_shadow=False,
            color = carla.Color(r=0, g=0, b=255), life_time=1000.0,
            persistent_lines=True)
        i += 1
      i = 0
      for w in w3:
        #print(w)
        mark=str(i)
        if i % 10 == 0:
            world.debug.draw_string(w[0].transform.location,mark, draw_shadow=False, color=carla.Color(r=255, g=0, b=0), life_time=120.0, persistent_lines=True)
        else:
            world.debug.draw_string(w[0].transform.location, mark, draw_shadow=False,
            color = carla.Color(r=0, g=0, b=255), life_time=1000.0,
            persistent_lines=True)
        i += 1
      i = 0
      for w in w4:
        #print(w)
        mark=str(i)
        if i % 10 == 0:
            world.debug.draw_string(w[0].transform.location,mark, draw_shadow=False, color=carla.Color(r=255, g=0, b=0), life_time=120.0, persistent_lines=True)
        else:
            world.debug.draw_string(w[0].transform.location, mark, draw_shadow=False,
            color = carla.Color(r=0, g=0, b=255), life_time=1000.0,
            persistent_lines=True)
        i += 1
      # i = 0

      # while True:
      #   world.tick()

      self.waypoints_dict[1] = {}
      self.waypoints_dict[2] = {}
      self.waypoints_dict[3] = {}
      self.waypoints_dict[4] = {}
      self.waypoints_dict[1]['x'] = []
      self.waypoints_dict[2]['x'] = []
      self.waypoints_dict[3]['x'] = []
      self.waypoints_dict[4]['x'] = []
      self.waypoints_dict[1]['y'] = []
      self.waypoints_dict[2]['y'] = []
      self.waypoints_dict[3]['y'] = []
      self.waypoints_dict[4]['y'] = []


      for waypoint in w1:
        self.waypoints_dict[1]['x'].append(waypoint[0].transform.location.x)
        self.waypoints_dict[1]['y'].append(waypoint[0].transform.location.y)

      for waypoint in w2:
        self.waypoints_dict[2]['x'].append(waypoint[0].transform.location.x)
        self.waypoints_dict[2]['y'].append(waypoint[0].transform.location.y)

      for waypoint in w3:
        self.waypoints_dict[3]['x'].append(waypoint[0].transform.location.x)
        self.waypoints_dict[3]['y'].append(waypoint[0].transform.location.y)

      for waypoint in w4:
        self.waypoints_dict[4]['x'].append(waypoint[0].transform.location.x)
        self.waypoints_dict[4]['y'].append(waypoint[0].transform.location.y)



    def add_member(self, vehicle_manager):
        """
        Add memeber to the current edge

        Parameters
        __________
        vehicle_manager : opencda object
            The vehicle manager class.
        """
        self.vehicle_manager_list.append(vehicle_manager)

    def get_route_waypoints(self, destination):
        self.start_waypoint = self._map.get_waypoint(start_location)

        # make sure the start waypoint is behind the vehicle
        if self._ego_pos:
            cur_loc = self._ego_pos.location
            cur_yaw = self._ego_pos.rotation.yaw
            _, angle = cal_distance_angle(
                self.start_waypoint.transform.location, cur_loc, cur_yaw)

            while angle > 90:
                self.start_waypoint = self.start_waypoint.next(1)[0]
                _, angle = cal_distance_angle(
                    self.start_waypoint.transform.location, cur_loc, cur_yaw)

        end_waypoint = self._map.get_waypoint(end_location)
        if end_reset:
            self.end_waypoint = end_waypoint

        route_trace = self._trace_route(self.start_waypoint, end_waypoint)


    def set_destination(self, destination):
        """
        Set destination of the vehicle managers in the platoon.
        """
        self.destination = destination
        # for i in range(len(self.vehicle_manager_list)):
        #     self.vehicle_manager_list[i].set_destination(
        #         self.vehicle_manager_list[i].vehicle.get_location(),
        #         destination, clean=True)

    def calculate_gap(self, distance):
        """
        Calculate the current vehicle and frontal vehicle's time/distance gap.
        Note: please use groundtruth position of the frontal vehicle to
        calculate the correct distance.

        Parameters
        ----------
        distance : float
            Distance between the ego vehicle and frontal vehicle.
        """
        # we need to count the vehicle length in to calculate the gap (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_60_car:[34:131]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_64_car:[34:131]
LOG_NAME = "ecloud_4lane.log" # data drive from file name?
SCENARIO_NAME = "ecloud_4lane_scenario" # data drive from file name?
TOWN = 'Town06'

def run_scenario(opt, config_yaml):
    try:
        scenario_params = load_yaml(config_yaml)

        # sanity checks...
        assert('edge_list' not in scenario_params['scenario']) # do NOT use this template for edge scenarios
        assert('sync_mode' in scenario_params['world'] and scenario_params['world']['sync_mode'] == True)
        assert(scenario_params['world']['fixed_delta_seconds'] == 0.03 or scenario_params['world']['fixed_delta_seconds'] == 0.05)

        cav_world = CavWorld(opt.apply_ml)
        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town=TOWN,
                                                   cav_world=cav_world,
                                                   config_file=config_yaml)

        if opt.record:
            scenario_manager.client. \
                start_recorder(LOG_NAME, True)

        # create single cavs
        run_distributed = scenario_params['distributed'] if 'distributed' in scenario_params else False
        if run_distributed:
            single_cav_list = \
                scenario_manager.create_distributed_vehicle_manager(application=['single'])
        else:
            single_cav_list = \
                scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world,
                              script_name=SCENARIO_NAME,
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        # run steps
        step = 0
        flag = True
        while flag:
            if run_distributed:
                print("Step: %d" %step)
                scenario_manager.tick_world()
                flag = scenario_manager.broadcast_tick()

                # update the Carla data on VehicleManagerProxies
                # REQUIRED for Evaluation which runs on Proxies' local data
                # DO NOT WANT THIS TO RUN! SLOW!!
                # for _, single_cav in enumerate(single_cav_list):
                #     single_cav.update_info()

                step = step + 1
                if(step > 250):
                    flag = scenario_manager.broadcast_message(ecloud.Command.REQUEST_DEBUG_INFO)
                    break

            else:
                # non-dist will break automatically; don't need to set flag
                scenario_manager.tick()

            # same for dist / non-dist - only required for specate
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location(
                    z=80),
                carla.Rotation(
                    pitch=-
                    90)))

    finally:
        if run_distributed:
            scenario_manager.end() # only dist requires explicit scenario end call

        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close(single_cav_list[0])

        for v in bg_veh_list:
            print("destroying background vehicle")
            try:
                v.destroy()
            except:
                print("failed to destroy background vehicle") (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_48_car:[34:131]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_8_car_perception:[34:131]
LOG_NAME = "ecloud_4lane.log" # data drive from file name?
SCENARIO_NAME = "ecloud_4lane_scenario" # data drive from file name?
TOWN = 'Town06'

def run_scenario(opt, config_yaml):
    try:
        scenario_params = load_yaml(config_yaml)

        # sanity checks...
        assert('edge_list' not in scenario_params['scenario']) # do NOT use this template for edge scenarios
        assert('sync_mode' in scenario_params['world'] and scenario_params['world']['sync_mode'] == True)
        assert(scenario_params['world']['fixed_delta_seconds'] == 0.03 or scenario_params['world']['fixed_delta_seconds'] == 0.05)

        cav_world = CavWorld(opt.apply_ml)
        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town=TOWN,
                                                   cav_world=cav_world,
                                                   config_file=config_yaml)

        if opt.record:
            scenario_manager.client. \
                start_recorder(LOG_NAME, True)

        # create single cavs
        run_distributed = scenario_params['distributed'] if 'distributed' in scenario_params else False
        if run_distributed:
            single_cav_list = \
                scenario_manager.create_distributed_vehicle_manager(application=['single'])
        else:
            single_cav_list = \
                scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world,
                              script_name=SCENARIO_NAME,
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        # run steps
        step = 0
        flag = True
        while flag:
            if run_distributed:
                print("Step: %d" %step)
                scenario_manager.tick_world()
                flag = scenario_manager.broadcast_tick()

                # update the Carla data on VehicleManagerProxies
                # REQUIRED for Evaluation which runs on Proxies' local data
                # DO NOT WANT THIS TO RUN! SLOW!!
                # for _, single_cav in enumerate(single_cav_list):
                #     single_cav.update_info()

                step = step + 1
                if(step > 250):
                    flag = scenario_manager.broadcast_message(ecloud.Command.REQUEST_DEBUG_INFO)
                    break

            else:
                # non-dist will break automatically; don't need to set flag
                scenario_manager.tick()

            # same for dist / non-dist - only required for specate
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location(
                    z=80),
                carla.Rotation(
                    pitch=-
                    90)))

    finally:
        if run_distributed:
            scenario_manager.end() # only dist requires explicit scenario end call

        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close(single_cav_list[0])

        for v in bg_veh_list:
            print("destroying background vehicle")
            try:
                v.destroy()
            except:
                print("failed to destroy background vehicle") (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_16_car:[34:131]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_16_car_perception:[34:131]
LOG_NAME = "ecloud_4lane.log" # data drive from file name?
SCENARIO_NAME = "ecloud_4lane_scenario" # data drive from file name?
TOWN = 'Town06'

def run_scenario(opt, config_yaml):
    try:
        scenario_params = load_yaml(config_yaml)

        # sanity checks...
        assert('edge_list' not in scenario_params['scenario']) # do NOT use this template for edge scenarios
        assert('sync_mode' in scenario_params['world'] and scenario_params['world']['sync_mode'] == True)
        assert(scenario_params['world']['fixed_delta_seconds'] == 0.03 or scenario_params['world']['fixed_delta_seconds'] == 0.05)

        cav_world = CavWorld(opt.apply_ml)
        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town=TOWN,
                                                   cav_world=cav_world,
                                                   config_file=config_yaml)

        if opt.record:
            scenario_manager.client. \
                start_recorder(LOG_NAME, True)

        # create single cavs
        run_distributed = scenario_params['distributed'] if 'distributed' in scenario_params else False
        if run_distributed:
            single_cav_list = \
                scenario_manager.create_distributed_vehicle_manager(application=['single'])
        else:
            single_cav_list = \
                scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world,
                              script_name=SCENARIO_NAME,
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        # run steps
        step = 0
        flag = True
        while flag:
            if run_distributed:
                print("Step: %d" %step)
                scenario_manager.tick_world()
                flag = scenario_manager.broadcast_tick()

                # update the Carla data on VehicleManagerProxies
                # REQUIRED for Evaluation which runs on Proxies' local data
                # DO NOT WANT THIS TO RUN! SLOW!!
                # for _, single_cav in enumerate(single_cav_list):
                #     single_cav.update_info()

                step = step + 1
                if(step > 250):
                    flag = scenario_manager.broadcast_message(ecloud.Command.REQUEST_DEBUG_INFO)
                    break

            else:
                # non-dist will break automatically; don't need to set flag
                scenario_manager.tick()

            # same for dist / non-dist - only required for specate
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location(
                    z=80),
                carla.Rotation(
                    pitch=-
                    90)))

    finally:
        if run_distributed:
            scenario_manager.end() # only dist requires explicit scenario end call

        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close(single_cav_list[0])

        for v in bg_veh_list:
            print("destroying background vehicle")
            try:
                v.destroy()
            except:
                print("failed to destroy background vehicle") (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_128_car:[34:131]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_48_car_perception:[34:131]
LOG_NAME = "ecloud_4lane.log" # data drive from file name?
SCENARIO_NAME = "ecloud_4lane_scenario" # data drive from file name?
TOWN = 'Town06'

def run_scenario(opt, config_yaml):
    try:
        scenario_params = load_yaml(config_yaml)

        # sanity checks...
        assert('edge_list' not in scenario_params['scenario']) # do NOT use this template for edge scenarios
        assert('sync_mode' in scenario_params['world'] and scenario_params['world']['sync_mode'] == True)
        assert(scenario_params['world']['fixed_delta_seconds'] == 0.03 or scenario_params['world']['fixed_delta_seconds'] == 0.05)

        cav_world = CavWorld(opt.apply_ml)
        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town=TOWN,
                                                   cav_world=cav_world,
                                                   config_file=config_yaml)

        if opt.record:
            scenario_manager.client. \
                start_recorder(LOG_NAME, True)

        # create single cavs
        run_distributed = scenario_params['distributed'] if 'distributed' in scenario_params else False
        if run_distributed:
            single_cav_list = \
                scenario_manager.create_distributed_vehicle_manager(application=['single'])
        else:
            single_cav_list = \
                scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world,
                              script_name=SCENARIO_NAME,
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        # run steps
        step = 0
        flag = True
        while flag:
            if run_distributed:
                print("Step: %d" %step)
                scenario_manager.tick_world()
                flag = scenario_manager.broadcast_tick()

                # update the Carla data on VehicleManagerProxies
                # REQUIRED for Evaluation which runs on Proxies' local data
                # DO NOT WANT THIS TO RUN! SLOW!!
                # for _, single_cav in enumerate(single_cav_list):
                #     single_cav.update_info()

                step = step + 1
                if(step > 250):
                    flag = scenario_manager.broadcast_message(ecloud.Command.REQUEST_DEBUG_INFO)
                    break

            else:
                # non-dist will break automatically; don't need to set flag
                scenario_manager.tick()

            # same for dist / non-dist - only required for specate
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location(
                    z=80),
                carla.Rotation(
                    pitch=-
                    90)))

    finally:
        if run_distributed:
            scenario_manager.end() # only dist requires explicit scenario end call

        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close(single_cav_list[0])

        for v in bg_veh_list:
            print("destroying background vehicle")
            try:
                v.destroy()
            except:
                print("failed to destroy background vehicle") (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car:[34:131]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car_perception:[34:131]
LOG_NAME = "ecloud_4lane.log" # data drive from file name?
SCENARIO_NAME = "ecloud_4lane_scenario" # data drive from file name?
TOWN = 'Town06'

def run_scenario(opt, config_yaml):
    try:
        scenario_params = load_yaml(config_yaml)

        # sanity checks...
        assert('edge_list' not in scenario_params['scenario']) # do NOT use this template for edge scenarios
        assert('sync_mode' in scenario_params['world'] and scenario_params['world']['sync_mode'] == True)
        assert(scenario_params['world']['fixed_delta_seconds'] == 0.03 or scenario_params['world']['fixed_delta_seconds'] == 0.05)

        cav_world = CavWorld(opt.apply_ml)
        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town=TOWN,
                                                   cav_world=cav_world,
                                                   config_file=config_yaml)

        if opt.record:
            scenario_manager.client. \
                start_recorder(LOG_NAME, True)

        # create single cavs
        run_distributed = scenario_params['distributed'] if 'distributed' in scenario_params else False
        if run_distributed:
            single_cav_list = \
                scenario_manager.create_distributed_vehicle_manager(application=['single'])
        else:
            single_cav_list = \
                scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world,
                              script_name=SCENARIO_NAME,
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        # run steps
        step = 0
        flag = True
        while flag:
            if run_distributed:
                print("Step: %d" %step)
                scenario_manager.tick_world()
                flag = scenario_manager.broadcast_tick()

                # update the Carla data on VehicleManagerProxies
                # REQUIRED for Evaluation which runs on Proxies' local data
                # DO NOT WANT THIS TO RUN! SLOW!!
                # for _, single_cav in enumerate(single_cav_list):
                #     single_cav.update_info()

                step = step + 1
                if(step > 250):
                    flag = scenario_manager.broadcast_message(ecloud.Command.REQUEST_DEBUG_INFO)
                    break

            else:
                # non-dist will break automatically; don't need to set flag
                scenario_manager.tick()

            # same for dist / non-dist - only required for specate
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location(
                    z=80),
                carla.Rotation(
                    pitch=-
                    90)))

    finally:
        if run_distributed:
            scenario_manager.end() # only dist requires explicit scenario end call

        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close(single_cav_list[0])

        for v in bg_veh_list:
            print("destroying background vehicle")
            try:
                v.destroy()
            except:
                print("failed to destroy background vehicle") (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_dist_24_car:[32:122]
==OpenCDA.opencda.scenario_testing.ecloud_template_4lane_scenario_dist:[32:122]
LOG_NAME = "ecloud_4lane.log" # data drive from file name?
SCENARIO_NAME = "ecloud_4lane_scenario" # data drive from file name?
TOWN = 'Town06'

def run_scenario(opt, config_yaml):
    try:
        scenario_params = load_yaml(config_yaml)

        # sanity checks...
        assert('edge_list' not in scenario_params['scenario']) # do NOT use this template for edge scenarios
        assert('sync_mode' in scenario_params['world'] and scenario_params['world']['sync_mode'] == True)
        assert(scenario_params['world']['fixed_delta_seconds'] == 0.03 or scenario_params['world']['fixed_delta_seconds'] == 0.05)

        cav_world = CavWorld(opt.apply_ml)
        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town=TOWN,
                                                   cav_world=cav_world,
                                                   config_file=config_yaml)

        if opt.record:
            scenario_manager.client. \
                start_recorder(LOG_NAME, True)

        # create single cavs
        run_distributed = scenario_params['distributed'] if 'distributed' in scenario_params else False
        if run_distributed:
            single_cav_list = \
                scenario_manager.create_distributed_vehicle_manager(application=['single'])
        else:
            single_cav_list = \
                scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world,
                              script_name=SCENARIO_NAME,
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        # run steps

        flag = True
        while flag:
            if run_distributed:
                scenario_manager.tick_world()
                flag = scenario_manager.broadcast_tick()

                # update the Carla data on VehicleManagerProxies
                # REQUIRED for Evaluation which runs on Proxies' local data
                for _, single_cav in enumerate(single_cav_list):
                    single_cav.update_info()

            else:
                # non-dist will break automatically; don't need to set flag
                scenario_manager.tick()

            # same for dist / non-dist - only required for specate
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location(
                    z=80),
                carla.Rotation(
                    pitch=-
                    90)))

    finally:
        if run_distributed:
            scenario_manager.end() # only dist requires explicit scenario end call

        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close(single_cav_list[0])

        for v in bg_veh_list:
            print("destroying background vehicle")
            try:
                v.destroy()
            except:
                print("failed to destroy background vehicle") (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_dist_128_car:[32:122]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_dist_2_car:[32:122]
LOG_NAME = "ecloud_4lane.log" # data drive from file name?
SCENARIO_NAME = "ecloud_4lane_scenario" # data drive from file name?
TOWN = 'Town06'

def run_scenario(opt, config_yaml):
    try:
        scenario_params = load_yaml(config_yaml)

        # sanity checks...
        assert('edge_list' not in scenario_params['scenario']) # do NOT use this template for edge scenarios
        assert('sync_mode' in scenario_params['world'] and scenario_params['world']['sync_mode'] == True)
        assert(scenario_params['world']['fixed_delta_seconds'] == 0.03 or scenario_params['world']['fixed_delta_seconds'] == 0.05)

        cav_world = CavWorld(opt.apply_ml)
        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town=TOWN,
                                                   cav_world=cav_world,
                                                   config_file=config_yaml)

        if opt.record:
            scenario_manager.client. \
                start_recorder(LOG_NAME, True)

        # create single cavs
        run_distributed = scenario_params['distributed'] if 'distributed' in scenario_params else False
        if run_distributed:
            single_cav_list = \
                scenario_manager.create_distributed_vehicle_manager(application=['single'])
        else:
            single_cav_list = \
                scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world,
                              script_name=SCENARIO_NAME,
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        # run steps

        flag = True
        while flag:
            if run_distributed:
                scenario_manager.tick_world()
                flag = scenario_manager.broadcast_tick()

                # update the Carla data on VehicleManagerProxies
                # REQUIRED for Evaluation which runs on Proxies' local data
                for _, single_cav in enumerate(single_cav_list):
                    single_cav.update_info()

            else:
                # non-dist will break automatically; don't need to set flag
                scenario_manager.tick()

            # same for dist / non-dist - only required for specate
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location(
                    z=80),
                carla.Rotation(
                    pitch=-
                    90)))

    finally:
        if run_distributed:
            scenario_manager.end() # only dist requires explicit scenario end call

        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close(single_cav_list[0])

        for v in bg_veh_list:
            print("destroying background vehicle")
            try:
                v.destroy()
            except:
                print("failed to destroy background vehicle") (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car_perception:[40:114]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_8_car:[40:115]
        scenario_params = load_yaml(config_yaml)

        # sanity checks...
        assert('edge_list' not in scenario_params['scenario']) # do NOT use this template for edge scenarios
        assert('sync_mode' in scenario_params['world'] and scenario_params['world']['sync_mode'] == True)
        assert(scenario_params['world']['fixed_delta_seconds'] == 0.03 or scenario_params['world']['fixed_delta_seconds'] == 0.05)

        cav_world = CavWorld(opt.apply_ml)
        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town=TOWN,
                                                   cav_world=cav_world,
                                                   config_file=config_yaml)

        if opt.record:
            scenario_manager.client. \
                start_recorder(LOG_NAME, True)

        # create single cavs
        run_distributed = scenario_params['distributed'] if 'distributed' in scenario_params else False
        if run_distributed:
            single_cav_list = \
                scenario_manager.create_distributed_vehicle_manager(application=['single'])
        else:
            single_cav_list = \
                scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world,
                              script_name=SCENARIO_NAME,
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        # run steps
        step = 0
        flag = True
        while flag:
            if run_distributed:
                print("Step: %d" %step)
                scenario_manager.tick_world()
                flag = scenario_manager.broadcast_tick()

                # update the Carla data on VehicleManagerProxies
                # REQUIRED for Evaluation which runs on Proxies' local data
                # DO NOT WANT THIS TO RUN! SLOW!!
                # for _, single_cav in enumerate(single_cav_list):
                #     single_cav.update_info()

                step = step + 1
                if(step > 250):
                    flag = scenario_manager.broadcast_message(ecloud.Command.REQUEST_DEBUG_INFO)
                    break

            else:
                # non-dist will break automatically; don't need to set flag
                scenario_manager.tick()

            # same for dist / non-dist - only required for specate
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location(
                    z=80),
                carla.Rotation(
                    pitch=-
                    90)))

#    finally: (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.core.application.edge.edge_manager_dyn:[544:610]
==OpenCDA.opencda.core.application.platooning.platooning_manager:[250:316]
        velocity_list = []
        acceleration_list = []
        time_gap_list = []
        distance_gap_list = []

        perform_txt = ''

        for i in range(len(self.vehicle_manager_list)):
            vm = self.vehicle_manager_list[i]
            debug_helper = vm.agent.debug_helper

            # we need to filter out the first 100 data points
            # since the vehicles spawn at the beginning have
            # no velocity and thus make the time gap close to infinite

            velocity_list += debug_helper.speed_list
            acceleration_list += debug_helper.acc_list
            time_gap_list += debug_helper.time_gap_list
            distance_gap_list += debug_helper.dist_gap_list

            time_gap_list_tmp = \
                np.array(debug_helper.time_gap_list)
            time_gap_list_tmp = \
                time_gap_list_tmp[time_gap_list_tmp < 100]
            distance_gap_list_tmp = \
                np.array(debug_helper.dist_gap_list)
            distance_gap_list_tmp = \
                distance_gap_list_tmp[distance_gap_list_tmp < 100]

            perform_txt += '\n Platoon member ID:%d, Actor ID:%d : \n' % (
                i, vm.vehicle.id)
            perform_txt += 'Time gap mean: %f, std: %f \n' % (
                np.mean(time_gap_list_tmp), np.std(time_gap_list_tmp))
            perform_txt += 'Distance gap mean: %f, std: %f \n' % (
                np.mean(distance_gap_list_tmp), np.std(distance_gap_list_tmp))

        figure = plt.figure()

        plt.subplot(411)
        open_plt.draw_velocity_profile_single_plot(velocity_list)

        plt.subplot(412)
        open_plt.draw_acceleration_profile_single_plot(acceleration_list)

        plt.subplot(413)
        open_plt.draw_time_gap_profile_singel_plot(time_gap_list)

        plt.subplot(414)
        open_plt.draw_dist_gap_profile_singel_plot(distance_gap_list)

        label = []
        for i in range(1, len(velocity_list) + 1):
            label.append('Leading Vehicle, id: %d' %
                         int(i - 1) if i == 1 else 'Platoon member, id: %d' %
                         int(i - 1))

        figure.legend(label, loc='upper right')

        return figure, perform_txt

    def destroy(self):
        """
        Destroy edge vehicles actors inside simulation world.
        """
        for vm in self.vehicle_manager_list:
            vm.destroy() (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_8car_scenario:[25:86]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario:[25:87]
    try:
        scenario_params = load_yaml(config_yaml)

        cav_world = CavWorld(opt.apply_ml)
        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town='Town06',
                                                   cav_world=cav_world)

        if opt.record:
            scenario_manager.client. \
                start_recorder("ecloud_4lane.log", True)

        # create single cavs
        single_cav_list = \
            scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        #traffic_manager, bg_veh_list = \
            #scenario_manager.create_traffic_carla()

        eval_manager = \
            EvaluationManager(scenario_manager.cav_world,
                              script_name='ecloud_4lane_scenario',
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        spectator_vehicle = single_cav_list[0].vehicle

        # run steps
        while True:
            scenario_manager.tick()
            transform = spectator_vehicle.get_transform()
            spectator.set_transform(
                carla.Transform(
                    transform.location +
                    carla.Location(
                        z=80),
                    carla.Rotation(
                        pitch=-
                        90)))

            for i, single_cav in enumerate(single_cav_list):
                # this function should be added in wrapper
                single_cav.update_info()
                control = single_cav.run_step()
                single_cav.vehicle.apply_control(control)

    finally:
        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close(single_cav_list[0])
        for platoon in platoon_list:
            platoon.destroy()
        for v in bg_veh_list:
            v.destroy() (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist:[22:101]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_8_car_2:[22:101]
    try:
        scenario_params = load_yaml(config_yaml)

        cav_world = CavWorld(opt.apply_ml)
        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town='Town06',
                                                   cav_world=cav_world,
                                                   config_file=config_yaml)

        if opt.record:
            scenario_manager.client. \
                start_recorder("ecloud_4lane.log", True)

        # create single cavs
        single_cav_list = \
            scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world,
                              script_name='ecloud_4lane_scenario',
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        # run steps

        flag = True
        while flag:
            scenario_manager.tick()

            # gRPC begin
            # call sim_api to update tick
            # loop here --> sim_api should not return True until tick completed

            #gRPC end

            # TODO eCloud - figure out another way to have the vehicle follow a CAV. Perhaps still access the bp since it's read only?
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location(
                    z=80),
                carla.Rotation(
                    pitch=-
                    90)))

            # for _, single_cav in enumerate(single_cav_list):
            #     result = single_cav.do_tick()
            #     if result == 1: # Need to figure out how to use a const
            #         print("Unexpected termination: Sending END to all vehicles and ending.")
            #         flag = False
            #         break
            #     elif result == 2:
            #         print("Simulation ended: Sending END to all vehicles and ending.")
            #         flag = False
            #         break

        # TODO gRPC
        #for _, single_cav in enumerate(single_cav_list):
        #    single_cav.end_step()

    finally:
        print("Evaluating simulation results...")
        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close(single_cav_list[0])

        for v in bg_veh_list:
            v.destroy() (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_dist_16_car:[32:89]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car_perception:[34:95]
LOG_NAME = "ecloud_4lane.log" # data drive from file name?
SCENARIO_NAME = "ecloud_4lane_scenario" # data drive from file name?
TOWN = 'Town06'

def run_scenario(opt, config_yaml):
    try:
        scenario_params = load_yaml(config_yaml)

        # sanity checks...
        assert('edge_list' not in scenario_params['scenario']) # do NOT use this template for edge scenarios
        assert('sync_mode' in scenario_params['world'] and scenario_params['world']['sync_mode'] == True)
        assert(scenario_params['world']['fixed_delta_seconds'] == 0.03 or scenario_params['world']['fixed_delta_seconds'] == 0.05)

        cav_world = CavWorld(opt.apply_ml)
        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town=TOWN,
                                                   cav_world=cav_world,
                                                   config_file=config_yaml)

        if opt.record:
            scenario_manager.client. \
                start_recorder(LOG_NAME, True)

        # create single cavs
        run_distributed = scenario_params['distributed'] if 'distributed' in scenario_params else False
        if run_distributed:
            single_cav_list = \
                scenario_manager.create_distributed_vehicle_manager(application=['single'])
        else:
            single_cav_list = \
                scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world,
                              script_name=SCENARIO_NAME,
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        # run steps
        step = 0
        flag = True
        while flag:
            if run_distributed:
                print("Step: %d" %step)
                scenario_manager.tick_world()
                flag = scenario_manager.broadcast_tick()

                # update the Carla data on VehicleManagerProxies
                # REQUIRED for Evaluation which runs on Proxies' local data
                # DO NOT WANT THIS TO RUN! SLOW!!
                # for _, single_cav in enumerate(single_cav_list):
                #     single_cav.update_info()
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_dist_16_car:[38:89]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_8_car:[40:95]
        scenario_params = load_yaml(config_yaml)

        # sanity checks...
        assert('edge_list' not in scenario_params['scenario']) # do NOT use this template for edge scenarios
        assert('sync_mode' in scenario_params['world'] and scenario_params['world']['sync_mode'] == True)
        assert(scenario_params['world']['fixed_delta_seconds'] == 0.03 or scenario_params['world']['fixed_delta_seconds'] == 0.05)

        cav_world = CavWorld(opt.apply_ml)
        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town=TOWN,
                                                   cav_world=cav_world,
                                                   config_file=config_yaml)

        if opt.record:
            scenario_manager.client. \
                start_recorder(LOG_NAME, True)

        # create single cavs
        run_distributed = scenario_params['distributed'] if 'distributed' in scenario_params else False
        if run_distributed:
            single_cav_list = \
                scenario_manager.create_distributed_vehicle_manager(application=['single'])
        else:
            single_cav_list = \
                scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world,
                              script_name=SCENARIO_NAME,
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        # run steps
        step = 0
        flag = True
        while flag:
            if run_distributed:
                print("Step: %d" %step)
                scenario_manager.tick_world()
                flag = scenario_manager.broadcast_tick()

                # update the Carla data on VehicleManagerProxies
                # REQUIRED for Evaluation which runs on Proxies' local data (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefree_carla:[56:100]
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefreecomplete_carla:[54:98]
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        spectator_vehicle = platoon_list[0].vehicle_manager_list[1].vehicle

        # run steps
        while True:
            scenario_manager.tick()
            transform = spectator_vehicle.get_transform()
            spectator.set_transform(
                carla.Transform(
                    transform.location +
                    carla.Location(
                        z=80),
                    carla.Rotation(
                        pitch=-
                        90)))
            for platoon in platoon_list:
                platoon.update_information()
                platoon.run_step()

            for i, single_cav in enumerate(single_cav_list):
                # this function should be added in wrapper
                if single_cav.v2x_manager.in_platoon():
                    single_cav_list.pop(i)
                else:
                    single_cav.update_info()
                    control = single_cav.run_step()
                    single_cav.vehicle.apply_control(control)

    finally:
        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close()

        for platoon in platoon_list:
            platoon.destroy()
        for cav in single_cav_list:
            cav.destroy()
        for v in bg_veh_list:
            v.destroy() (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_dist_4_car:[32:80]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_16_car:[34:81]
LOG_NAME = "ecloud_4lane.log" # data drive from file name?
SCENARIO_NAME = "ecloud_4lane_scenario" # data drive from file name?
TOWN = 'Town06'

def run_scenario(opt, config_yaml):
    try:
        scenario_params = load_yaml(config_yaml)

        # sanity checks...
        assert('edge_list' not in scenario_params['scenario']) # do NOT use this template for edge scenarios
        assert('sync_mode' in scenario_params['world'] and scenario_params['world']['sync_mode'] == True)
        assert(scenario_params['world']['fixed_delta_seconds'] == 0.03 or scenario_params['world']['fixed_delta_seconds'] == 0.05)

        cav_world = CavWorld(opt.apply_ml)
        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town=TOWN,
                                                   cav_world=cav_world,
                                                   config_file=config_yaml)

        if opt.record:
            scenario_manager.client. \
                start_recorder(LOG_NAME, True)

        # create single cavs
        run_distributed = scenario_params['distributed'] if 'distributed' in scenario_params else False
        if run_distributed:
            single_cav_list = \
                scenario_manager.create_distributed_vehicle_manager(application=['single'])
        else:
            single_cav_list = \
                scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world,
                              script_name=SCENARIO_NAME,
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        # run steps
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_dist_24_car:[32:80]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_48_car_perception:[34:81]
LOG_NAME = "ecloud_4lane.log" # data drive from file name?
SCENARIO_NAME = "ecloud_4lane_scenario" # data drive from file name?
TOWN = 'Town06'

def run_scenario(opt, config_yaml):
    try:
        scenario_params = load_yaml(config_yaml)

        # sanity checks...
        assert('edge_list' not in scenario_params['scenario']) # do NOT use this template for edge scenarios
        assert('sync_mode' in scenario_params['world'] and scenario_params['world']['sync_mode'] == True)
        assert(scenario_params['world']['fixed_delta_seconds'] == 0.03 or scenario_params['world']['fixed_delta_seconds'] == 0.05)

        cav_world = CavWorld(opt.apply_ml)
        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town=TOWN,
                                                   cav_world=cav_world,
                                                   config_file=config_yaml)

        if opt.record:
            scenario_manager.client. \
                start_recorder(LOG_NAME, True)

        # create single cavs
        run_distributed = scenario_params['distributed'] if 'distributed' in scenario_params else False
        if run_distributed:
            single_cav_list = \
                scenario_manager.create_distributed_vehicle_manager(application=['single'])
        else:
            single_cav_list = \
                scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world,
                              script_name=SCENARIO_NAME,
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        # run steps
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefree_carla:[62:100]
==OpenCDA.opencda.scenario_testing.platoon_joining_town06_carla:[54:92]
        while True:
            scenario_manager.tick()
            transform = spectator_vehicle.get_transform()
            spectator.set_transform(
                carla.Transform(
                    transform.location +
                    carla.Location(
                        z=80),
                    carla.Rotation(
                        pitch=-
                        90)))
            for platoon in platoon_list:
                platoon.update_information()
                platoon.run_step()

            for i, single_cav in enumerate(single_cav_list):
                # this function should be added in wrapper
                if single_cav.v2x_manager.in_platoon():
                    single_cav_list.pop(i)
                else:
                    single_cav.update_info()
                    control = single_cav.run_step()
                    single_cav.vehicle.apply_control(control)

    finally:
        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close()

        for platoon in platoon_list:
            platoon.destroy()
        for cav in single_cav_list:
            cav.destroy()
        for v in bg_veh_list:
            v.destroy() (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_128_car:[34:81]
==OpenCDA.opencda.scenario_testing.ecloud_template_4lane_scenario_dist:[32:80]
LOG_NAME = "ecloud_4lane.log" # data drive from file name?
SCENARIO_NAME = "ecloud_4lane_scenario" # data drive from file name?
TOWN = 'Town06'

def run_scenario(opt, config_yaml):
    try:
        scenario_params = load_yaml(config_yaml)

        # sanity checks...
        assert('edge_list' not in scenario_params['scenario']) # do NOT use this template for edge scenarios
        assert('sync_mode' in scenario_params['world'] and scenario_params['world']['sync_mode'] == True)
        assert(scenario_params['world']['fixed_delta_seconds'] == 0.03 or scenario_params['world']['fixed_delta_seconds'] == 0.05)

        cav_world = CavWorld(opt.apply_ml)
        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town=TOWN,
                                                   cav_world=cav_world,
                                                   config_file=config_yaml)

        if opt.record:
            scenario_manager.client. \
                start_recorder(LOG_NAME, True)

        # create single cavs
        run_distributed = scenario_params['distributed'] if 'distributed' in scenario_params else False
        if run_distributed:
            single_cav_list = \
                scenario_manager.create_distributed_vehicle_manager(application=['single'])
        else:
            single_cav_list = \
                scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world,
                              script_name=SCENARIO_NAME,
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        # run steps
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_dist_128_car:[32:80]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car:[34:81]
LOG_NAME = "ecloud_4lane.log" # data drive from file name?
SCENARIO_NAME = "ecloud_4lane_scenario" # data drive from file name?
TOWN = 'Town06'

def run_scenario(opt, config_yaml):
    try:
        scenario_params = load_yaml(config_yaml)

        # sanity checks...
        assert('edge_list' not in scenario_params['scenario']) # do NOT use this template for edge scenarios
        assert('sync_mode' in scenario_params['world'] and scenario_params['world']['sync_mode'] == True)
        assert(scenario_params['world']['fixed_delta_seconds'] == 0.03 or scenario_params['world']['fixed_delta_seconds'] == 0.05)

        cav_world = CavWorld(opt.apply_ml)
        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town=TOWN,
                                                   cav_world=cav_world,
                                                   config_file=config_yaml)

        if opt.record:
            scenario_manager.client. \
                start_recorder(LOG_NAME, True)

        # create single cavs
        run_distributed = scenario_params['distributed'] if 'distributed' in scenario_params else False
        if run_distributed:
            single_cav_list = \
                scenario_manager.create_distributed_vehicle_manager(application=['single'])
        else:
            single_cav_list = \
                scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world,
                              script_name=SCENARIO_NAME,
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        # run steps
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_dist_2_car:[32:80]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car_perception:[34:81]
LOG_NAME = "ecloud_4lane.log" # data drive from file name?
SCENARIO_NAME = "ecloud_4lane_scenario" # data drive from file name?
TOWN = 'Town06'

def run_scenario(opt, config_yaml):
    try:
        scenario_params = load_yaml(config_yaml)

        # sanity checks...
        assert('edge_list' not in scenario_params['scenario']) # do NOT use this template for edge scenarios
        assert('sync_mode' in scenario_params['world'] and scenario_params['world']['sync_mode'] == True)
        assert(scenario_params['world']['fixed_delta_seconds'] == 0.03 or scenario_params['world']['fixed_delta_seconds'] == 0.05)

        cav_world = CavWorld(opt.apply_ml)
        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town=TOWN,
                                                   cav_world=cav_world,
                                                   config_file=config_yaml)

        if opt.record:
            scenario_manager.client. \
                start_recorder(LOG_NAME, True)

        # create single cavs
        run_distributed = scenario_params['distributed'] if 'distributed' in scenario_params else False
        if run_distributed:
            single_cav_list = \
                scenario_manager.create_distributed_vehicle_manager(application=['single'])
        else:
            single_cav_list = \
                scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world,
                              script_name=SCENARIO_NAME,
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        # run steps
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_dist_2_car:[38:80]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_8_car:[40:81]
        scenario_params = load_yaml(config_yaml)

        # sanity checks...
        assert('edge_list' not in scenario_params['scenario']) # do NOT use this template for edge scenarios
        assert('sync_mode' in scenario_params['world'] and scenario_params['world']['sync_mode'] == True)
        assert(scenario_params['world']['fixed_delta_seconds'] == 0.03 or scenario_params['world']['fixed_delta_seconds'] == 0.05)

        cav_world = CavWorld(opt.apply_ml)
        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town=TOWN,
                                                   cav_world=cav_world,
                                                   config_file=config_yaml)

        if opt.record:
            scenario_manager.client. \
                start_recorder(LOG_NAME, True)

        # create single cavs
        run_distributed = scenario_params['distributed'] if 'distributed' in scenario_params else False
        if run_distributed:
            single_cav_list = \
                scenario_manager.create_distributed_vehicle_manager(application=['single'])
        else:
            single_cav_list = \
                scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world,
                              script_name=SCENARIO_NAME,
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        # run steps
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_edge_16_car:[46:87]
==OpenCDA.opencda.scenario_testing.ecloud_edge_8_car:[47:87]
        world_dt = scenario_params['world']['fixed_delta_seconds']
        edge_dt = scenario_params['edge_base']['edge_dt']
        assert( edge_dt % world_dt == 0 ) # we need edge time to be an exact multiple of world time because we send waypoints every Nth tick

        # create single cavs
        edge_list = \
            scenario_manager.create_edge_manager(application=['edge'], edge_dt=edge_dt, world_dt=world_dt)

        # create background traffic in carla
        #traffic_manager, bg_veh_list = \
            #scenario_manager.create_traffic_carla()

        eval_manager = \
            EvaluationManager(scenario_manager.cav_world,
                              script_name='ecloud_edge_scenario',
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        spectator_vehicle = edge_list[0].vehicle_manager_list[0].vehicle

        # run steps
        step = 0
        flag = True
        waypoint_buffer = []
        world_time = 0
        while flag:
            print("Step: %d" %step)
            scenario_manager.tick_world()

            world_time += world_dt

            if world_time % edge_dt == 0:
                world_time = 0

                waypoint_buffer.clear()
                for edge in edge_list:
                    edge.update_information()
                    waypoint_buffer = edge.run_step()

                scenario_manager.push_waypoint_buffer(waypoint_buffer) (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.single_2lanefree_cosim:[42:76]
==OpenCDA.opencda.scenario_testing.single_town06_cosim:[34:68]
                                      cav_world=cav_world,
                                      sumo_file_parent_path=sumo_cfg)
        single_cav_list = \
            scenario_manager.create_vehicle_manager(application=['single'],
                                                    map_helper=map_api.
                                                    spawn_helper_2lanefree)

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world,
                              script_name='single_2lanefree_cosim',
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()

        while True:
            # simulation tick
            scenario_manager.tick()

            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(transform.location +
                                                    carla.Location(z=50),
                                                    carla.Rotation(pitch=-90)))

            for i, single_cav in enumerate(single_cav_list):
                single_cav.update_info()
                control = single_cav.run_step()
                single_cav.vehicle.apply_control(control)

    finally:
        eval_manager.evaluate()
        scenario_manager.close()
        for v in single_cav_list:
            v.destroy() (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.single_intersection_town06_carla:[45:77]
==OpenCDA.opencda.scenario_testing.single_town06_carla:[42:74]
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        # run steps
        while True:
            scenario_manager.tick()
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location(
                    z=50),
                carla.Rotation(
                    pitch=-
                    90)))

            for i, single_cav in enumerate(single_cav_list):
                single_cav.update_info()
                control = single_cav.run_step()
                single_cav.vehicle.apply_control(control)

    finally:
        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close()

        for v in single_cav_list:
            v.destroy()
        for v in bg_veh_list:
            v.destroy() (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.cooperception_datadump_town06_carla:[61:89]
==OpenCDA.opencda.scenario_testing.single_2lanefree_carla:[61:89]
        while True:
            scenario_manager.tick()
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location(
                    z=70),
                carla.Rotation(
                    pitch=-
                    90)))

            for i, single_cav in enumerate(single_cav_list):
                single_cav.update_info()
                control = single_cav.run_step()
                single_cav.vehicle.apply_control(control)

    finally:
        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close()

        for v in single_cav_list:
            v.destroy()
        for v in bg_veh_list:
            v.destroy() (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_dist_4_car:[91:122]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_16_car_perception:[100:131]
            else:
                # non-dist will break automatically; don't need to set flag
                scenario_manager.tick()

            # same for dist / non-dist - only required for specate
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location(
                    z=80),
                carla.Rotation(
                    pitch=-
                    90)))

    finally:
        if run_distributed:
            scenario_manager.end() # only dist requires explicit scenario end call

        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close(single_cav_list[0])

        for v in bg_veh_list:
            print("destroying background vehicle")
            try:
                v.destroy()
            except:
                print("failed to destroy background vehicle") (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_dist_16_car:[92:123]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_16_car:[100:131]
            else:
                # non-dist will break automatically; don't need to set flag
                scenario_manager.tick()

            # same for dist / non-dist - only required for specate
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location(
                    z=80),
                carla.Rotation(
                    pitch=-
                    90)))

    finally:
        if run_distributed:
            scenario_manager.end() # only dist requires explicit scenario end call

        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close(single_cav_list[0])

        for v in bg_veh_list:
            print("destroying background vehicle")
            try:
                v.destroy()
            except:
                print("failed to destroy background vehicle") (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_dist_24_car:[91:122]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_48_car_perception:[100:131]
            else:
                # non-dist will break automatically; don't need to set flag
                scenario_manager.tick()

            # same for dist / non-dist - only required for specate
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location(
                    z=80),
                carla.Rotation(
                    pitch=-
                    90)))

    finally:
        if run_distributed:
            scenario_manager.end() # only dist requires explicit scenario end call

        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close(single_cav_list[0])

        for v in bg_veh_list:
            print("destroying background vehicle")
            try:
                v.destroy()
            except:
                print("failed to destroy background vehicle") (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_128_car:[100:131]
==OpenCDA.opencda.scenario_testing.ecloud_template_4lane_scenario_dist:[91:122]
            else:
                # non-dist will break automatically; don't need to set flag
                scenario_manager.tick()

            # same for dist / non-dist - only required for specate
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location(
                    z=80),
                carla.Rotation(
                    pitch=-
                    90)))

    finally:
        if run_distributed:
            scenario_manager.end() # only dist requires explicit scenario end call

        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close(single_cav_list[0])

        for v in bg_veh_list:
            print("destroying background vehicle")
            try:
                v.destroy()
            except:
                print("failed to destroy background vehicle") (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_dist_128_car:[91:122]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car:[100:131]
            else:
                # non-dist will break automatically; don't need to set flag
                scenario_manager.tick()

            # same for dist / non-dist - only required for specate
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location(
                    z=80),
                carla.Rotation(
                    pitch=-
                    90)))

    finally:
        if run_distributed:
            scenario_manager.end() # only dist requires explicit scenario end call

        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close(single_cav_list[0])

        for v in bg_veh_list:
            print("destroying background vehicle")
            try:
                v.destroy()
            except:
                print("failed to destroy background vehicle") (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_dist_2_car:[91:122]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car_perception:[100:131]
            else:
                # non-dist will break automatically; don't need to set flag
                scenario_manager.tick()

            # same for dist / non-dist - only required for specate
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location(
                    z=80),
                carla.Rotation(
                    pitch=-
                    90)))

    finally:
        if run_distributed:
            scenario_manager.end() # only dist requires explicit scenario end call

        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close(single_cav_list[0])

        for v in bg_veh_list:
            print("destroying background vehicle")
            try:
                v.destroy()
            except:
                print("failed to destroy background vehicle") (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.core.application.edge.edge_manager:[373:407]
==OpenCDA.opencda.core.application.edge.edge_manager_dyn:[339:373]
        for i in range(len(slice_list)-1,-1,-1): #Iterate through all slices
            if len(slice_list[i]) >= 2: #If the slice has more than one vehicle, run the graph planner. Else it'll move using existing
            #responses - slow down on seeing a vehicle ahead that has slower velocities, else hit target velocity.
            #Somewhat suboptimal, ideally the other vehicle would be
            #folded into existing groups. No easy way to do that yet.
                #print("Slicing")
                a_star = AStarPlanner(slice_list[i], self.ov, self.oy, self.grid_size, self.robot_radius, self.Traffic_Tracker.cars_on_road, i)
                rv, ry, rx_tracked = a_star.planning()
                if len(ry) >= 2: #If there is some planner result, then we move ahead on using it
                    lanechange_command[i] = ry[-2]
                    vel_array[i] = rv[-2]
                else: #If the planner returns an empty list, continue as before - use emergency responses.
                    lanechange_command[i] = ry[0]
                    vel_array[i] = ry[0]

        #print("Sliced")
        for i in range(len(slice_list)-1,-1,-1): #Relay lane change commands and new velocities to vehicles where needed
            if len(slice_list[i]) >= 1 and len(lanechange_command[i]) >= 1:
                carnum = 0
                for car in slice_list[i]:
                    if lanechange_command[i][carnum] > car.lane:
                        car.intentions = "Lane Change 1"
                    elif lanechange_command[i][carnum] < car.lane:
                        car.intentions = "Lane Change -1"
                    car.v = vel_array[i][carnum]
                    carnum += 1

        self.Traffic_Tracker.time_tick(mode='Graph') #Tick the simulation

        #print("Success capsule")

        #Recording location and state
        x_states, y_states, tv, v = self.Traffic_Tracker.ret_car_locations() # Commented out for bypassing algo
        # x_states, y_states, v = [], [], [] #Algo bypass begins (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_edge_16_car:[87:116]
==OpenCDA.opencda.scenario_testing.ecloud_edge_8_car:[90:119]
                flag = scenario_manager.broadcast_tick()

            step = step + 1
            if step > ecloud_config.get_step_count():
                flag = scenario_manager.broadcast_message(ecloud.Command.REQUEST_DEBUG_INFO)
                break

            transform = spectator_vehicle.get_transform()
            spectator.set_transform(
                carla.Transform(
                    transform.location +
                    carla.Location(
                        z=80),
                    carla.Rotation(
                        pitch=-
                        90)))

    finally:

        scenario_manager.end()

        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close()
        for edge in edge_list:
            edge.destroy() (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.core.sensing.localization.kalman_filter:[40:102]
==OpenCDA.opencda.customize.core.sensing.localization.extented_kalman_filter:[34:84]
        self.Q = np.diag([
            0.2,  # variance of location on x-axis
            0.2,  # variance of location on y-axis
            np.deg2rad(0.1),  # variance of yaw angle
            0.001  # variance of velocity
        ]) ** 2  # predict state covariance

        self.R = np.diag([0.5, 0.5, 0.2]) ** 2

        self.time_step = dt

        self.xEst = np.zeros((4, 1))
        self.PEst = np.eye(4)

    def motion_model(self, x, u):
        """
        Predict current position and yaw based on previous result
        (X = F * X_prev + B * u).

        Args:
            -x (np.array): [x_prev, y_prev, yaw_prev, v_prev], shape: (4, 1).
            -u (np.array): [v_current, imu_yaw_rate], shape:(2, 1).

        Returns:
          x (np.array): predicted state.
        """
        F = np.array([[1.0, 0, 0, 0],
                      [0, 1.0, 0, 0],
                      [0, 0, 1.0, 0],
                      [0, 0, 0, 0]])

        B = np.array([[self.time_step * math.cos(x[2, 0]), 0],
                      [self.time_step * math.sin(x[2, 0]), 0],
                      [0.0, self.time_step],
                      [1.0, 0.0]])

        x = F @ x + B @ u

        return x

    def jacob_f(self, x, u):
        """
        Jacobian of Motion Model motion model

        Args:
            -x (np.array): Input X array.
        Returns:
            -jF (np.array):  Jacobian of Motion Model motion model.

        """ (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_config:[99:123]
==OpenCDA.opencda.scenario_testing.multi_2lanefree_carla:[81:105]
        flag = True
        while flag:
            print("Step: %d" %step)
            scenario_manager.tick_world()
            if run_distributed:
                flag = scenario_manager.broadcast_tick()

            else:
                # non-dist will break automatically; don't need to set flag
                pre_client_tick_time = time.time()
                for i, single_cav in enumerate(single_cav_list):
                    single_cav.update_info()
                    control = single_cav.run_step()
                    single_cav.vehicle.apply_control(control)
                post_client_tick_time = time.time()
                print("Client tick completion time: %s" %(post_client_tick_time - pre_client_tick_time))
                if step > 0: # discard the first tick as startup is a major outlier
                    scenario_manager.debug_helper.update_client_tick((post_client_tick_time - pre_client_tick_time)*1000)

            # same for dist / non-dist - only required for specate
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location( (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.core.application.edge.edge_manager:[419:494]
==OpenCDA.opencda.core.application.edge.edge_manager_dyn:[385:460]
        self.xcars = np.hstack((self.xcars, x_states))
        self.ycars = np.hstack((self.ycars, y_states))
        self.target_velocities = np.hstack((self.target_velocities,tv)) #Commented out for bypassing algo, comment back in if algo present
        self.velocities = np.hstack((self.velocities,v)) #Was just v, v_states for the skipping-planner debugging

        #print("Returned X: ", self.xcars)
        #print("Returned Y: ", self.ycars)

        self.xcars = self.xcars - self.secondary_offset

        #print("Revised Returned X: ", self.xcars)

        ###########################################

        # waypoints_rev = {1 : np.empty((2,0)), 2 : np.empty((2,0)), 3 : np.empty((2,0)), 4 : np.empty((2,0)), 5 : np.empty((2,0)), 6 : np.empty((2,0)), 7 : np.empty((2,0)), 8 : np.empty((2,0))}
        # for i in range(0,self.xcars.shape[1]):
        #   processed_array = []
        #   for j in range(0,self.numcars):
        #     x_res = self.xcars[j,i]
        #     y_res = self.ycars[j,i]
        #     processed_array.append(np.array([[x_res],[y_res]]))
        #     print("Appending to waypoints_rev")
        #   back = self.processor.process_back(processed_array)
        #   waypoints_rev[1] = np.hstack((waypoints_rev[1],back[0]))
        #   waypoints_rev[2] = np.hstack((waypoints_rev[2],back[1]))
        #   waypoints_rev[3] = np.hstack((waypoints_rev[3],back[2]))
        #   waypoints_rev[4] = np.hstack((waypoints_rev[4],back[3]))
        #   waypoints_rev[5] = np.hstack((waypoints_rev[5],back[4]))
        #   waypoints_rev[6] = np.hstack((waypoints_rev[6],back[5]))
        #   waypoints_rev[7] = np.hstack((waypoints_rev[7],back[6]))
        #   waypoints_rev[8] = np.hstack((waypoints_rev[8],back[7]))

        waypoints_rev = {}
        car_locations = {}
        for cars in range(1,self.numcars+1):
            waypoints_rev[str(cars)] = np.empty((2,0))
            car_locations[str(cars)] = []

        for i in range(0,self.xcars.shape[1]):
          processed_array = []
          for j in range(0,self.numcars):
            x_res = self.xcars[j,i]
            y_res = self.ycars[j,i]
            processed_array.append(np.array([[x_res],[y_res]]))
            #print("Appending to waypoints_rev")
          #print(processed_array)
          back = self.processor.process_back(processed_array)

          #print(waypoints_rev)
          #print(waypoints_rev.keys())
          for j in range(0,self.numcars):
            #print(len(back))
            #print(j)
            # print(waypoints_rev[str(j+1)])
            # print(back[str(j)])
            # print(np.hstack((waypoints_rev[str(j+1)],back[str(j)])))
            waypoints_rev[str(j+1)] = np.hstack((waypoints_rev[str(j+1)],back[j]))

        # processed_array = []
        # for k in range(0,4): #Added 16/03 outer loop to check if waypoint horizon influenced things, it did not seem to.
        #     for j in range(0,self.numcars):
        #         x_res = self.xcars[j,-1]
        #         y_res = self.ycars[j,-1]
        #         processed_array.append(np.array([[x_res],[y_res]]))
        #         self.xcars[j,-1] += 4 #Increment by +4, just adding another waypoint '4m' ahead of this one, until horizon 3 steps ahead
        #     print("Appending to waypoints_rev: ", self.xcars)
        #     back = self.processor.process_back(processed_array)
        #     waypoints_rev[1] = np.hstack((waypoints_rev[1],back[0]))
        #     waypoints_rev[2] = np.hstack((waypoints_rev[2],back[1]))
        #     waypoints_rev[3] = np.hstack((waypoints_rev[3],back[2]))
        #     waypoints_rev[4] = np.hstack((waypoints_rev[4],back[3]))

        #print(waypoints_rev)
        # car_locations = {1 : [], 2 : [], 3 : [], 4 : [], 5 : [], 6 : [], 7 : [], 8 : []}
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.single_intersection_town06_carla:[17:44]
==OpenCDA.opencda.scenario_testing.single_town06_carla:[14:41]
    try:
        scenario_params = load_yaml(config_yaml)

        # create CAV world
        cav_world = CavWorld(opt.apply_ml)

        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town='Town06',
                                                   cav_world=cav_world)

        if opt.record:
            scenario_manager.client. \
                start_recorder("single_town06_carla.log", True)

        single_cav_list = \
            scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world, (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.cooperception_datadump_town06_carla:[68:89]
==OpenCDA.opencda.scenario_testing.single_intersection_town06_carla:[56:77]
                carla.Rotation(
                    pitch=-
                    90)))

            for i, single_cav in enumerate(single_cav_list):
                single_cav.update_info()
                control = single_cav.run_step()
                single_cav.vehicle.apply_control(control)

    finally:
        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close()

        for v in single_cav_list:
            v.destroy()
        for v in bg_veh_list:
            v.destroy() (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefree_cosim:[21:45]
==OpenCDA.opencda.scenario_testing.single_2lanefree_cosim:[22:44]
    try:
        scenario_params = load_yaml(config_yaml)

        # create CAV world
        cav_world = CavWorld(opt.apply_ml)

        # sumo conifg file path
        current_path = os.path.dirname(os.path.realpath(__file__))
        xodr_path = os.path.join(current_path,
                                 '../assets/2lane_freeway_simplified/'
                                 '2lane_freeway_simplified.xodr')
        sumo_cfg = os.path.join(current_path,
                                '../assets/2lane_freeway_simplified')

        # create co-simulation scenario manager
        scenario_manager = \
            sim_api.CoScenarioManager(scenario_params,
                                      opt.apply_ml,
                                      opt.version,
                                      xodr_path=xodr_path,
                                      cav_world=cav_world,
                                      sumo_file_parent_path=sumo_cfg)

        # create platoon members (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.single_2lanefree_carla:[68:89]
==OpenCDA.opencda.scenario_testing.single_town06_carla:[53:74]
                carla.Rotation(
                    pitch=-
                    90)))

            for i, single_cav in enumerate(single_cav_list):
                single_cav.update_info()
                control = single_cav.run_step()
                single_cav.vehicle.apply_control(control)

    finally:
        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close()

        for v in single_cav_list:
            v.destroy()
        for v in bg_veh_list:
            v.destroy() (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.core.application.edge.edge_manager:[109:142]
==OpenCDA.opencda.core.application.edge.edge_manager_dyn:[90:123]
      self.get_four_lane_waypoints_dict()
      self.processor = transform_processor(self.waypoints_dict)
      _, _ = self.processor.process_waypoints_bidirectional(0)
      inverted = self.processor.process_forward(0)
      logger.debug(len(inverted))
      i = 0

      # for k in inverted:
      #     if k[0,0] <= 0 and k[0,0] < -self.secondary_offset:
      #       print("Current indice is: ", k[0,0])
      #       self.secondary_offset = -k[0,0]

      for vehicle_manager in self.vehicle_manager_list:
          spawn_coords = vehicle_manager.vehicle.get_location()
          spawn_coords = np.array([spawn_coords.x,spawn_coords.y]).reshape((2,1))
          # print(spawn_coords)
          spawn_coords = self.processor.process_single_waypoint_forward(spawn_coords[0,0],spawn_coords[1,0])
          # print(spawn_coords)
          # sys.exit()
          # self.spawn_x.append(vehicle_manager.vehicle.get_location().x)
          # self.spawn_y.append(vehicle_manager.vehicle.get_location().y)
          #self.spawn_v.append(vehicle_manager.vehicle.get_velocity())
          ## THIS IS TEMPORARY ##
          # print("inverted is: ", inverted[i][0,0])
          # print("revised x is: ", self.secondary_offset)
          self.spawn_x.append(spawn_coords[0]) # inverted[i][0,0]+self.secondary_offset)
          #self.spawn_v.append(5*(i+1))
          self.spawn_v.append(0)
          self.spawn_y.append(spawn_coords[1])# inverted[i][1,0])
          i += 1

          # TODO: DIST --> do we need to clear at start in containers?
          #vehicle_manager.agent.get_local_planner().get_waypoint_buffer().clear() # clear waypoint buffer at start (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.core.application.edge.edge_manager_dyn:[257:282]
==OpenCDA.opencda.core.plan.behavior_agent:[278:298]
        self.start_waypoint = self._map.get_waypoint(start_location)

        # make sure the start waypoint is behind the vehicle
        if self._ego_pos:
            cur_loc = self._ego_pos.location
            cur_yaw = self._ego_pos.rotation.yaw
            _, angle = cal_distance_angle(
                self.start_waypoint.transform.location, cur_loc, cur_yaw)

            while angle > 90:
                self.start_waypoint = self.start_waypoint.next(1)[0]
                _, angle = cal_distance_angle(
                    self.start_waypoint.transform.location, cur_loc, cur_yaw)

        end_waypoint = self._map.get_waypoint(end_location)
        if end_reset:
            self.end_waypoint = end_waypoint

        route_trace = self._trace_route(self.start_waypoint, end_waypoint)
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.core.sensing.localization.kalman_filter:[102:170]
==OpenCDA.opencda.customize.core.sensing.localization.extented_kalman_filter:[107:157]
        H = np.array([
            [1, 0, 0, 0],
            [0, 1, 0, 0],
            [0, 0, 1, 0]
        ])

        z = H @ x

        return z

    def run_step_init(self, x, y, heading, velocity):
        """
        Initalization for states.

        Args:
            -x (float): The X coordinate.
            -y (float): Tehe y coordinate.
            -heading (float): The heading direction.
            -velocity (float): The velocity.

        """
        self.xEst[0] = x
        self.xEst[1] = y
        self.xEst[2] = heading
        self.xEst[3] = velocity

    def run_step(self, x, y, heading, velocity, yaw_rate_imu):
        """
        Apply EKF on current measurement and previous prediction.

        Args:
            -x (float): x(esu) coordinate from
             gnss sensor at current timestamp.
            -y (float): y(esu) coordinate from
             gnss sensor at current timestamp.
            -heading (float): heading direction at current timestamp.
            -velocity (float): current speed.
            -yaw_rate_imu (float): yaw rate rad/s from IMU sensor.
        Returns:
            - xEST (np.array): The corrected x, y, heading,
              and velocity information.
        """

        # gps observation
        z = np.array([x, y, heading]).reshape(3, 1)
        # velocity and imu yaw rate
        u = np.array([velocity, yaw_rate_imu]).reshape(2, 1)

        # EKF starts
        xPred = self.motion_model(self.xEst, u) (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_edge_8_car:[97:116]
==OpenCDA.opencda.scenario_testing.ecloud_edge_scenario:[89:109]
            transform = spectator_vehicle.get_transform()
            spectator.set_transform(
                carla.Transform(
                    transform.location +
                    carla.Location(
                        z=80),
                    carla.Rotation(
                        pitch=-
                        90)))

    finally:

        scenario_manager.end()

        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_dist_2_car:[61:82]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_config:[81:101]
            single_cav_list = \
                scenario_manager.create_distributed_vehicle_manager(application=['single'])
        else:
            single_cav_list = \
                scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world,
                              script_name=SCENARIO_NAME,
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()

        flag = True
        while flag: (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_8car_scenario:[51:69]
==OpenCDA.opencda.scenario_testing.platoon_joining_town06_carla:[48:65]
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        spectator_vehicle = single_cav_list[0].vehicle

        # run steps
        while True:
            scenario_manager.tick()
            transform = spectator_vehicle.get_transform()
            spectator.set_transform(
                carla.Transform(
                    transform.location +
                    carla.Location(
                        z=80),
                    carla.Rotation(
                        pitch=-
                        90))) (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.core.application.edge.fsm:[11:55]
==OpenCDA.opencda.core.application.platooning.fsm:[11:55]
class FSM(Enum):
    """
    The finite state machine class for platooning.
    These classes are used to indicate the current status
    of the CAV during platooning.

    Attributes
    ----------
    SEARCHING : int
        The vehicle is not in any platoon and currently searching one to join.
    OPEN_GAP : int
        The platoon member is increasing the gap for other vehicle to merge.
    MOVE_TO_POINT : int
        The merging vehicle is moving to the meeting points for joining.
    JOINING : int
        The merging vehicle is operating the joining maneuver(lane change).
    MAINTINING : int
        The platoon member is following the leader and maintain the time gap.
    BACK_JOINING : int
        The merging vehicle is in back-join state.
    CUT_IN_TO_BACK : int
        The merging vehicle abandons cut-in-join and switch to back join.
    JOINING_FINISHED : int
        Indicate the joining finished and the
        vehicle will switch to maintaining state.
    LEADING_MODE : int
        The vehicle is the platoon leader.
    ABONDON:
        Current joining is abandoned.
    DISABLE:
        V2X is not available and thus won't join any platoon.
    """
    SEARCHING = 0
    OPEN_GAP = 1
    MOVE_TO_POINT = 2
    JOINING = 3
    MAINTINING = 4
    BACK_JOINING = 5
    CUT_IN_TO_BACK = 6
    FRONT_JOINING = 7
    JOINING_FINISHED = 8
    LEADING_MODE = 9
    ABONDON = 10
    DISABLE = 11 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_edge_16_car:[28:44]
==OpenCDA.opencda.scenario_testing.ecloud_edge_8_car:[28:44]
    try:
        scenario_params = load_yaml(config_yaml)

        cav_world = CavWorld(opt.apply_ml)
        ecloud_config = EcloudConfig(scenario_params)
        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town='Town06',
                                                   cav_world=cav_world,
                                                   config_file=config_yaml,
                                                   distributed=True)

        if opt.record:
            scenario_manager.client. \ (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_config:[142:159]
==OpenCDA.opencda.scenario_testing.multi_2lanefree_carla:[119:136]
        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close()

        if not run_distributed:
            for v in single_cav_list:
                v.destroy()

        for v in bg_veh_list:
            print("destroying background vehicle")
            try:
                v.destroy()
            except:
                print("failed to destroy background vehicle") (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.single_2lanefree_carla:[49:67]
==OpenCDA.opencda.scenario_testing.single_town06_carla:[35:52]
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world,
                              script_name='single_2lanefree_carla',
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        # run steps

        while True:
            scenario_manager.tick()
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location( (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.cooperception_datadump_town06_carla:[19:37]
==OpenCDA.opencda.scenario_testing.single_town06_carla:[14:32]
    try:
        scenario_params = load_yaml(config_yaml)

        # create CAV world
        cav_world = CavWorld(opt.apply_ml)

        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town='Town06',
                                                   cav_world=cav_world)

        if opt.record:
            scenario_manager.client. \
                start_recorder("single_town06_carla.log", True)

        single_cav_list = \ (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefree_carla:[20:35]
==OpenCDA.opencda.scenario_testing.platoon_stability_2lanefree_carla:[21:36]
    try:
        # first define the path of the yaml file and 2lanefreemap file
        scenario_params = load_yaml(config_yaml)
        current_path = os.path.dirname(os.path.realpath(__file__))
        xodr_path = os.path.join(
            current_path,
            '../assets/2lane_freeway_simplified/2lane_freeway_simplified.xodr')

        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   xodr_path=xodr_path)
        if opt.record:
            scenario_manager.client. \ (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist:[22:39]
==OpenCDA.opencda.scenario_testing.ecloud_edge_scenario:[25:42]
    try:
        scenario_params = load_yaml(config_yaml)

        cav_world = CavWorld(opt.apply_ml)
        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town='Town06',
                                                   cav_world=cav_world,
                                                   config_file=config_yaml)

        if opt.record:
            scenario_manager.client. \
                start_recorder("ecloud_4lane.log", True)

 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car_perception:[115:131]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_8_car:[115:131]
        if run_distributed:
            scenario_manager.end() # only dist requires explicit scenario end call

        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close(single_cav_list[0])

        for v in bg_veh_list:
            print("destroying background vehicle")
            try:
                v.destroy()
            except:
                print("failed to destroy background vehicle") (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car_perception:[63:81]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_config:[81:99]
            single_cav_list = \
                scenario_manager.create_distributed_vehicle_manager(application=['single'])
        else:
            single_cav_list = \
                scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world,
                              script_name=SCENARIO_NAME,
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.platoon_joining_town06_carla:[54:65]
==OpenCDA.opencda.scenario_testing.platoon_stability_2lanefree_carla:[71:83]
        while True:
            scenario_manager.tick()
            transform = spectator_vehicle.get_transform()
            spectator.set_transform(
                carla.Transform(
                    transform.location +
                    carla.Location(
                        z=80),
                    carla.Rotation(
                        pitch=-
                        90))) (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario:[65:81]
==OpenCDA.opencda.scenario_testing.single_2lanefree_carla:[68:83]
                carla.Rotation(
                    pitch=-
                    90)))

            for i, single_cav in enumerate(single_cav_list):
                single_cav.update_info()
                control = single_cav.run_step()
                single_cav.vehicle.apply_control(control)

    finally:
        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario:[57:69]
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefreecomplete_carla:[60:71]
        while True:
            scenario_manager.tick()
            transform = spectator_vehicle.get_transform()
            spectator.set_transform(
                carla.Transform(
                    transform.location +
                    carla.Location(
                        z=80),
                    carla.Rotation(
                        pitch=-
                        90))) (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_8car_scenario:[65:81]
==OpenCDA.opencda.scenario_testing.single_town06_carla:[53:68]
                carla.Rotation(
                    pitch=-
                    90)))

            for i, single_cav in enumerate(single_cav_list):
                single_cav.update_info()
                control = single_cav.run_step()
                single_cav.vehicle.apply_control(control)

    finally:
        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_8car_scenario:[57:69]
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefree_carla:[62:73]
        while True:
            scenario_manager.tick()
            transform = spectator_vehicle.get_transform()
            spectator.set_transform(
                carla.Transform(
                    transform.location +
                    carla.Location(
                        z=80),
                    carla.Rotation(
                        pitch=-
                        90))) (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario:[25:38]
==OpenCDA.opencda.scenario_testing.single_intersection_town06_carla:[17:32]
    try:
        scenario_params = load_yaml(config_yaml)

        cav_world = CavWorld(opt.apply_ml)
        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town='Town06',
                                                   cav_world=cav_world)

        if opt.record:
            scenario_manager.client. \ (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_dist_2_car:[91:105]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_8_car:[100:115]
            else:
                # non-dist will break automatically; don't need to set flag
                scenario_manager.tick()

            # same for dist / non-dist - only required for specate
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location(
                    z=80),
                carla.Rotation(
                    pitch=-
                    90)))
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car:[102:115]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_8_car_2:[57:91]
            scenario_manager.tick()

            # gRPC begin
            # call sim_api to update tick
            # loop here --> sim_api should not return True until tick completed

            #gRPC end

            # TODO eCloud - figure out another way to have the vehicle follow a CAV. Perhaps still access the bp since it's read only?
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location(
                    z=80),
                carla.Rotation(
                    pitch=-
                    90)))

            # for _, single_cav in enumerate(single_cav_list):
            #     result = single_cav.do_tick()
            #     if result == 1: # Need to figure out how to use a const
            #         print("Unexpected termination: Sending END to all vehicles and ending.")
            #         flag = False
            #         break
            #     elif result == 2:
            #         print("Simulation ended: Sending END to all vehicles and ending.")
            #         flag = False
            #         break

        # TODO gRPC
        #for _, single_cav in enumerate(single_cav_list):
        #    single_cav.end_step()

    finally: (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_8car_scenario:[25:38]
==OpenCDA.opencda.scenario_testing.single_town06_carla:[14:29]
    try:
        scenario_params = load_yaml(config_yaml)

        cav_world = CavWorld(opt.apply_ml)
        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town='Town06',
                                                   cav_world=cav_world)

        if opt.record:
            scenario_manager.client. \ (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car_perception:[62:76]
==OpenCDA.opencda.scenario_testing.multi_2lanefree_carla:[59:74]
        if run_distributed:
            single_cav_list = \
                scenario_manager.create_distributed_vehicle_manager(application=['single'])
        else:
            single_cav_list = \
                scenario_manager.create_vehicle_manager(application=['single'])#,
                                                        #map_helper=map_api.spawn_helper_2lanefree)

        # create background traffic in carla
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world, (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist:[57:91]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car_perception:[102:115]
            scenario_manager.tick()

            # gRPC begin
            # call sim_api to update tick
            # loop here --> sim_api should not return True until tick completed

            #gRPC end

            # TODO eCloud - figure out another way to have the vehicle follow a CAV. Perhaps still access the bp since it's read only?
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location(
                    z=80),
                carla.Rotation(
                    pitch=-
                    90)))

            # for _, single_cav in enumerate(single_cav_list):
            #     result = single_cav.do_tick()
            #     if result == 1: # Need to figure out how to use a const
            #         print("Unexpected termination: Sending END to all vehicles and ending.")
            #         flag = False
            #         break
            #     elif result == 2:
            #         print("Simulation ended: Sending END to all vehicles and ending.")
            #         flag = False
            #         break

        # TODO gRPC
        #for _, single_cav in enumerate(single_cav_list):
        #    single_cav.end_step()

    finally: (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.core.application.edge.edge_behavior_agent:[120:134]
==OpenCDA.opencda.core.application.platooning.platoon_behavior_agent:[238:252]
        self._ego_speed = ego_speed
        self._ego_pos = ego_pos
        self.break_distance = self._ego_speed / 3.6 * self.emergency_param
        # update the localization info to trajectory planner
        self.get_local_planner().update_information(ego_pos, ego_speed)

        # current version only consider about vehicles
        self.objects = objects
        obstacle_vehicles = objects['vehicles']
        self.obstacle_vehicles = self.white_list_match(obstacle_vehicles)

        # update the debug helper
        self.debug_helper.update(
            ego_speed, (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.core.application.edge.edge_manager:[181:190]
==OpenCDA.opencda.core.application.edge.edge_manager_dyn:[175:184]
        mark=str(i)
        if i % 10 == 0:
            world.debug.draw_string(w[0].transform.location,mark, draw_shadow=False, color=carla.Color(r=255, g=0, b=0), life_time=120.0, persistent_lines=True)
        else:
            world.debug.draw_string(w[0].transform.location, mark, draw_shadow=False,
            color = carla.Color(r=0, g=0, b=255), life_time=1000.0,
            persistent_lines=True)
        i += 1
      i = 0 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.core.application.edge.edge_manager:[192:201]
==OpenCDA.opencda.core.application.edge.edge_manager_dyn:[164:173]
        mark=str(i)
        if i % 10 == 0:
            world.debug.draw_string(w[0].transform.location,mark, draw_shadow=False, color=carla.Color(r=255, g=0, b=0), life_time=120.0, persistent_lines=True)
        else:
            world.debug.draw_string(w[0].transform.location, mark, draw_shadow=False,
            color = carla.Color(r=0, g=0, b=255), life_time=1000.0,
            persistent_lines=True)
        i += 1
      i = 0 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.core.sensing.perception.obstacle_vehicle:[31:59]
==OpenCDA.opencda.core.sensing.perception.static_obstacle:[13:41]
class BoundingBox(object):
    """
    Bounding box class for obstacle vehicle.

    Params:
    -corners : nd.nparray
        Eight corners of the bounding box. (shape:(8, 3))
    Attributes:
    -location : carla.location
        The location of the object.
    -extent : carla.vector3D
        The extent of  the object.
    """

    def __init__(self, corners):

        center_x = np.mean(corners[:, 0])
        center_y = np.mean(corners[:, 1])
        center_z = np.mean(corners[:, 2])

        extent_x = (np.max(corners[:, 0]) - np.min(corners[:, 0])) / 2
        extent_y = (np.max(corners[:, 1]) - np.min(corners[:, 1])) / 2
        extent_z = (np.max(corners[:, 2]) - np.min(corners[:, 2])) / 2

        self.location = carla.Location(x=center_x, y=center_y, z=center_z)
        self.extent = carla.Vector3D(x=extent_x, y=extent_y, z=extent_z)

 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_config:[81:94]
==OpenCDA.opencda.scenario_testing.multi_2lanefree_carla:[60:74]
            single_cav_list = \
                scenario_manager.create_distributed_vehicle_manager(application=['single'])
        else:
            single_cav_list = \
                scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world, (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_edge_16_car:[94:104]
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefreecomplete_carla:[62:71]
            transform = spectator_vehicle.get_transform()
            spectator.set_transform(
                carla.Transform(
                    transform.location +
                    carla.Location(
                        z=80),
                    carla.Rotation(
                        pitch=-
                        90)))
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_edge_8_car:[97:107]
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefree_carla:[64:73]
            transform = spectator_vehicle.get_transform()
            spectator.set_transform(
                carla.Transform(
                    transform.location +
                    carla.Location(
                        z=80),
                    carla.Rotation(
                        pitch=-
                        90)))
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist:[57:90]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_8_car:[102:115]
                scenario_manager.tick()

            # same for dist / non-dist - only required for specate
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location(
                    z=80),
                carla.Rotation(
                    pitch=-
                    90)))

#    finally: (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_8car_scenario:[59:69]
==OpenCDA.opencda.scenario_testing.ecloud_edge_scenario:[89:100]
            transform = spectator_vehicle.get_transform()
            spectator.set_transform(
                carla.Transform(
                    transform.location +
                    carla.Location(
                        z=80),
                    carla.Rotation(
                        pitch=-
                        90)))

 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.core.common.vehicle_manager:[273:281]
==OpenCDA.opencda.core.common.vehicle_manager_proxy:[150:158]
            self.agent = PlatooningBehaviorAgent(
                self.vehicle, # TODO: fix
                self,
                self.v2x_manager,
                behavior_config,
                platoon_config,
                self.carla_map)
        else: (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.core.application.edge.edge_manager:[523:583]
==OpenCDA.opencda.core.application.edge.edge_manager_dyn:[487:544]
        all_waypoint_buffers = []
        #print("completed Algorithm Step")
        # output algorithm waypoints to waypoint buffer of each vehicle
        for idx, vehicle_manager in enumerate(self.vehicle_manager_list):
        #   # print(i)
        #   waypoint_buffer = vehicle_manager.agent.get_local_planner().get_waypoint_buffer()
        #   # print(waypoint_buffer)
        #   # for waypoints in waypoint_buffer:
        #   #   print("Waypoints transform for Vehicle Before Clearing: " + str(i) + " : ", waypoints[0].transform)
        #   waypoint_buffer.clear() #EDIT MADE 16/03
            waypoint_buffer_proto = ecloud.WaypointBuffer()
            waypoint_buffer_proto.vehicle_index = idx

            for k in range(0,1):
                waypoint_buffer_proto.waypoint_buffer.extend([serialize_waypoint(self.locations[idx*1+k])])#, RoadOption.STRAIGHT)) #Accounting for horizon of 4 here. To generate a waypoint _buffer_

            #logger.debug(waypoint_buffer_proto.SerializeToString())

            all_waypoint_buffers.append(waypoint_buffer_proto)
          # for waypoints in waypoint_buffer:
          #   print("Waypoints transform for Vehicle After Clearing: " + str(i) + " : ", waypoints[0].transform)
          # sys.exit()
          # # print(waypoint_buffer)

        return all_waypoint_buffers

        # #print("\n ########################\n")
        # #print("Length of vehicle manager list: ", len(self.vehicle_manager_list))

        # control_list = []
        # for i in range(len(self.vehicle_manager_list)):
        #     waypoints_buffer_printer = self.vehicle_manager_list[i].agent.get_local_planner().get_waypoint_buffer()
        #     #for waypoints in waypoints_buffer_printer:
        #         #print("Waypoints transform for Vehicle: " + str(i) + " : ", waypoints[0].transform)
        #     # print(self.vehicle_manager_list[i].agent.get_local_planner().get_waypoint_buffer().transform())
        #     control = self.vehicle_manager_list[i].run_step(self.target_speed)
        #     control_list.append(control)

        # for (i, control) in enumerate(control_list):
        #     self.vehicle_manager_list[i].vehicle.apply_control(control)

        # return control_list

    def evaluate(self):
        """
        Used to save all members' statistics.

        Returns
        -------
        figure : matplotlib.figure
            The figure drawing performance curve passed back to save to
            the disk.

        perform_txt : str
            The string that contains all evaluation results to print out.
        """

        #velocity_list = []
        #time_gap_list = []
        #distance_gap_list = [] (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.core.application.edge.edge_manager:[336:344]
==OpenCDA.opencda.core.application.edge.edge_manager_dyn:[302:310]
        start_time = time.time()
        for i in range(len(self.vehicle_manager_list)):
            x,y = self.processor.process_single_waypoint_forward(self.vehicle_manager_list[i].vehicle.get_location().x, self.vehicle_manager_list[i].vehicle.get_location().y)
            v = self.vehicle_manager_list[i].vehicle.get_velocity()
            v_scalar = math.sqrt(v.x**2 + v.y**2 + v.z**2)
            self.spawn_x.append(x)
            self.spawn_y.append(y)
            self.spawn_v.append(v_scalar) (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.core.application.edge.edge_manager:[181:189]
==OpenCDA.opencda.core.application.edge.edge_manager_dyn:[197:210]
        mark=str(i)
        if i % 10 == 0:
            world.debug.draw_string(w[0].transform.location,mark, draw_shadow=False, color=carla.Color(r=255, g=0, b=0), life_time=120.0, persistent_lines=True)
        else:
            world.debug.draw_string(w[0].transform.location, mark, draw_shadow=False,
            color = carla.Color(r=0, g=0, b=255), life_time=1000.0,
            persistent_lines=True)
        i += 1
      # i = 0

      # while True:
      #   world.tick()
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.core.application.edge.edge_manager:[214:227]
==OpenCDA.opencda.core.application.edge.edge_manager_dyn:[164:172]
        mark=str(i)
        if i % 10 == 0:
            world.debug.draw_string(w[0].transform.location,mark, draw_shadow=False, color=carla.Color(r=255, g=0, b=0), life_time=120.0, persistent_lines=True)
        else:
            world.debug.draw_string(w[0].transform.location, mark, draw_shadow=False,
            color = carla.Color(r=0, g=0, b=255), life_time=1000.0,
            persistent_lines=True)
        i += 1
      # i = 0

      # while True:
      #   world.tick()
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.core.application.edge.edge_manager:[92:100]
==OpenCDA.opencda.core.application.edge.edge_manager_dyn:[80:90]
        self.Traffic_Tracker = None
        self.waypoints_dict = {}
        self.cav_world = weakref.ref(cav_world)()
        self.ov, self.oy = generate_limits_grid()
        self.grid_size = 1.0
        self.robot_radius = 1.0
        self.processor = None
        self.secondary_offset=0

    def start_edge(self): (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.platoon_joining_town06_carla:[74:86]
==OpenCDA.opencda.scenario_testing.single_intersection_town06_carla:[61:73]
                single_cav.update_info()
                control = single_cav.run_step()
                single_cav.vehicle.apply_control(control)

    finally:
        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close()
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.single_2lanefree_carla:[56:67]
==OpenCDA.opencda.scenario_testing.single_intersection_town06_carla:[45:55]
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        # run steps
        while True:
            scenario_manager.tick()
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location( (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_edge_8_car:[52:68]
==OpenCDA.opencda.scenario_testing.ecloud_edge_scenario:[46:63]
        edge_list = \
            scenario_manager.create_edge_manager(application=['edge'], edge_dt=edge_dt, world_dt=world_dt)

        # create background traffic in carla
        #traffic_manager, bg_veh_list = \
            #scenario_manager.create_traffic_carla()

        eval_manager = \
            EvaluationManager(scenario_manager.cav_world,
                              script_name='ecloud_edge_scenario',
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        spectator_vehicle = edge_list[0].vehicle_manager_list[0].vehicle

        # run steps (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefreecomplete_carla:[80:92]
==OpenCDA.opencda.scenario_testing.single_2lanefree_carla:[73:85]
                    single_cav.update_info()
                    control = single_cav.run_step()
                    single_cav.vehicle.apply_control(control)

    finally:
        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close()
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefree_carla:[82:94]
==OpenCDA.opencda.scenario_testing.single_town06_carla:[58:70]
                    single_cav.update_info()
                    control = single_cav.run_step()
                    single_cav.vehicle.apply_control(control)

    finally:
        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close()
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.core.application.edge.edge_manager:[23:34]
==OpenCDA.opencda.logging_ecloud:[12:28]
logger.setLevel(logging.DEBUG)

cloud_config = load_yaml("cloud_config.yaml")

if cloud_config["log_level"] == "error":
    logger.setLevel(logging.ERROR)
elif cloud_config["log_level"] == "warning":
    logger.setLevel(logging.WARNING)
elif cloud_config["log_level"] == "info":
    logger.setLevel(logging.INFO)
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.core.application.edge.edge_behavior_agent:[120:132]
==OpenCDA.opencda.core.plan.behavior_agent:[169:181]
        self._ego_speed = ego_speed
        self._ego_pos = ego_pos
        self.break_distance = self._ego_speed / 3.6 * self.emergency_param
        # update the localization info to trajectory planner
        self.get_local_planner().update_information(ego_pos, ego_speed)

        # current version only consider about vehicles
        self.objects = objects
        obstacle_vehicles = objects['vehicles']
        self.obstacle_vehicles = self.white_list_match(obstacle_vehicles)

        # update the debug helper (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_8_car_2:[22:31]
==OpenCDA.opencda.scenario_testing.single_intersection_town06_carla:[17:28]
    try:
        scenario_params = load_yaml(config_yaml)

        # create CAV world
        cav_world = CavWorld(opt.apply_ml)

        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town='Town06', (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_config:[59:68]
==OpenCDA.opencda.scenario_testing.multi_2lanefree_carla:[39:49]
        run_distributed = scenario_params['distributed'] if 'distributed' in scenario_params else \
                          True if 'ecloud' in scenario_params else \
                          False

        cav_world = CavWorld(opt.apply_ml)
        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version, (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_edge_16_car:[78:89]
==OpenCDA.opencda.scenario_testing.ecloud_edge_scenario:[78:89]
                world_time = 0

                waypoint_buffer.clear()
                for edge in edge_list:
                    edge.update_information()
                    waypoint_buffer = edge.run_step()

                scenario_manager.push_waypoint_buffer(waypoint_buffer)

            flag = scenario_manager.broadcast_tick()
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_edge_scenario:[25:34]
==OpenCDA.opencda.scenario_testing.single_town06_carla:[14:25]
    try:
        scenario_params = load_yaml(config_yaml)

        # create CAV world
        cav_world = CavWorld(opt.apply_ml)

        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town='Town06', (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario:[71:81]
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefreecomplete_carla:[80:90]
                    single_cav.update_info()
                    control = single_cav.run_step()
                    single_cav.vehicle.apply_control(control)

    finally:
        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefree_carla:[86:96]
==OpenCDA.opencda.scenario_testing.platoon_stability_2lanefree_carla:[159:170]
    finally:
        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close()

        for platoon in platoon_list:
            platoon.destroy()
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefree_cosim:[52:62]
==OpenCDA.opencda.scenario_testing.single_town06_cosim:[38:49]
                                                    map_helper=map_api.
                                                    spawn_helper_2lanefree)

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world,
                              script_name='single_2lanefree_cosim',
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car:[107:115]
==OpenCDA.opencda.scenario_testing.ecloud_edge_16_car:[97:106]
                transform.location +
                carla.Location(
                    z=80),
                carla.Rotation(
                    pitch=-
                    90)))

    finally: (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist:[68:91]
==OpenCDA.opencda.scenario_testing.ecloud_edge_8_car:[100:109]
                    transform.location +
                    carla.Location(
                        z=80),
                    carla.Rotation(
                        pitch=-
                        90)))

    finally:
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_8car_scenario:[71:81]
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefree_carla:[82:92]
                    single_cav.update_info()
                    control = single_cav.run_step()
                    single_cav.vehicle.apply_control(control)

    finally:
        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_8car_scenario:[25:34]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist:[22:31]
    try:
        scenario_params = load_yaml(config_yaml)

        cav_world = CavWorld(opt.apply_ml)
        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town='Town06', (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car_perception:[107:115]
==OpenCDA.opencda.scenario_testing.ecloud_edge_scenario:[92:102]
                    transform.location +
                    carla.Location(
                        z=80),
                    carla.Rotation(
                        pitch=-
                        90)))


    finally:
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.core.application.edge.edge_manager:[314:327]
==OpenCDA.opencda.core.application.platooning.platoon_behavior_agent:[298:316]
        boundingbox = self.vehicle.bounding_box
        veh_length = 2 * abs(boundingbox.location.y - boundingbox.extent.y)

        delta_v = self._ego_speed / 3.6
        time_gap = distance / delta_v
        self.time_gap = time_gap
        self.dist_gap = distance - veh_length

    def platooning_following_manager(self, inter_gap):
        """
        Car following behavior in platooning with gap regulation.

        Parameters
        __________
        inter_gap : float
            The gap designed for platooning.
        """
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.core.application.edge.edge_behavior_agent:[67:77]
==OpenCDA.opencda.core.application.platooning.platoon_behavior_agent:[73:83]
            self).__init__(
            vehicle,
            carla_map,
            behavior_yaml)

        self.vehicle_manager = weakref.ref(vehicle_manager)()
        # communication manager
        self.v2x_manager = weakref.ref(v2x_manager)()

        # used for gap keeping (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.single_2lanefree_carla:[72:80]
==OpenCDA.opencda.scenario_testing.single_town05_cosim:[58:65]
            for i, single_cav in enumerate(single_cav_list):
                single_cav.update_info()
                control = single_cav.run_step()
                single_cav.vehicle.apply_control(control)

    finally:
        eval_manager.evaluate()
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.multi_2lanefree_carla:[44:51]
==OpenCDA.opencda.scenario_testing.single_2lanefree_carla:[30:37]
        cav_world = CavWorld(opt.apply_ml)
        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   xodr_path=xodr_path,
                                                   cav_world=cav_world, (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_config:[133:141]
==OpenCDA.opencda.scenario_testing.multi_2lanefree_carla:[111:119]
                if run_distributed:
                    flag = scenario_manager.broadcast_message(ecloud.Command.REQUEST_DEBUG_INFO)
                break

    finally:
        if run_distributed:
            scenario_manager.end() # only dist requires explicit scenario end call
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_8_car:[107:115]
==OpenCDA.opencda.scenario_testing.ecloud_edge_scenario:[92:100]
                    transform.location +
                    carla.Location(
                        z=80),
                    carla.Rotation(
                        pitch=-
                        90)))

 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_edge_8_car:[79:87]
==OpenCDA.opencda.scenario_testing.ecloud_edge_scenario:[78:87]
                world_time = 0

                waypoint_buffer.clear()
                for edge in edge_list:
                    edge.update_information()
                    waypoint_buffer = edge.run_step()

                scenario_manager.push_waypoint_buffer(waypoint_buffer) (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.cooperception_datadump_town06_carla:[61:67]
==OpenCDA.opencda.scenario_testing.single_town06_carla:[46:52]
        while True:
            scenario_manager.tick()
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location( (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.single_2lanefree_cosim:[66:73]
==OpenCDA.opencda.scenario_testing.single_town06_carla:[57:65]
            for i, single_cav in enumerate(single_cav_list):
                single_cav.update_info()
                control = single_cav.run_step()
                single_cav.vehicle.apply_control(control)

    finally:
        eval_manager.evaluate() (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_48_car_perception:[107:114]
==OpenCDA.opencda.scenario_testing.platoon_stability_2lanefree_carla:[76:83]
                    transform.location +
                    carla.Location(
                        z=80),
                    carla.Rotation(
                        pitch=-
                        90)))
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_dist_2_car:[98:105]
==OpenCDA.opencda.scenario_testing.platoon_joining_town06_carla:[59:65]
                    transform.location +
                    carla.Location(
                        z=80),
                    carla.Rotation(
                        pitch=-
                        90))) (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_dist_2_car:[64:74]
==OpenCDA.opencda.scenario_testing.single_intersection_town06_carla:[34:44]
            single_cav_list = \
                scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world, (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefree_carla:[73:81]
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefree_cosim:[73:81]
            for platoon in platoon_list:
                platoon.update_information()
                platoon.run_step()

            for i, single_cav in enumerate(single_cav_list):
                if single_cav.v2x_manager.in_platoon():
                    single_cav_list.pop(i)
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefree_carla:[56:65]
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefree_cosim:[59:69]
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        spectator_vehicle = platoon_list[0].vehicle_manager_list[1].vehicle

        # run steps
        while True:
            scenario_manager.tick()
            transform = spectator_vehicle.get_transform() (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefree_carla:[20:29]
==OpenCDA.opencda.scenario_testing.single_2lanefree_carla:[21:30]
    try:
        # first define the path of the yaml file and 2lanefreemap file
        scenario_params = load_yaml(config_yaml)
        current_path = os.path.dirname(os.path.realpath(__file__))
        xodr_path = os.path.join(
            current_path,
            '../assets/2lane_freeway_simplified/2lane_freeway_simplified.xodr')

        # create scenario manager (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario:[62:69]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_128_car:[107:114]
                    transform.location +
                    carla.Location(
                        z=80),
                    carla.Rotation(
                        pitch=-
                        90)))
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_128_car:[66:76]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_8_car_2:[39:49]
            single_cav_list = \
                scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world, (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefree_cosim:[81:89]
==OpenCDA.opencda.scenario_testing.single_town06_cosim:[59:66]
                single_cav.update_info()
                control = single_cav.run_step()
                single_cav.vehicle.apply_control(control)

    finally:
        eval_manager.evaluate()
        scenario_manager.close() (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car:[125:131]
==OpenCDA.opencda.scenario_testing.multi_2lanefree_carla:[130:136]
        for v in bg_veh_list:
            print("destroying background vehicle")
            try:
                v.destroy()
            except:
                print("failed to destroy background vehicle") (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car:[66:76]
==OpenCDA.opencda.scenario_testing.single_town06_carla:[31:41]
            single_cav_list = \
                scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world, (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car:[107:114]
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefreecomplete_carla:[65:71]
                    transform.location +
                    carla.Location(
                        z=80),
                    carla.Rotation(
                        pitch=-
                        90))) (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist:[68:90]
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefree_carla:[67:73]
                    transform.location +
                    carla.Location(
                        z=80),
                    carla.Rotation(
                        pitch=-
                        90))) (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_8car_scenario:[69:78]
==OpenCDA.opencda.scenario_testing.single_town06_cosim:[58:65]
            for i, single_cav in enumerate(single_cav_list):
                single_cav.update_info()
                control = single_cav.run_step()
                single_cav.vehicle.apply_control(control)

    finally:
        eval_manager.evaluate() (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car_perception:[114:123]
==OpenCDA.opencda.scenario_testing.multi_2lanefree_carla:[115:124]
    finally:
        if run_distributed:
            scenario_manager.end() # only dist requires explicit scenario end call

        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car_perception:[125:131]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_config:[153:159]
        for v in bg_veh_list:
            print("destroying background vehicle")
            try:
                v.destroy()
            except:
                print("failed to destroy background vehicle") (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car_perception:[47:54]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_config:[63:70]
        cav_world = CavWorld(opt.apply_ml)
        # create scenario manager
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town=TOWN,
                                                   cav_world=cav_world, (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist:[39:49]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car_perception:[66:76]
            single_cav_list = \
                scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        # create evaluation manager
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world, (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_8car_scenario:[62:69]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car_perception:[107:114]
                    transform.location +
                    carla.Location(
                        z=80),
                    carla.Rotation(
                        pitch=-
                        90)))
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.co_simulation.sumo_integration.carla_simulation:[114:126]
==OpenCDA.opencda.scenario_testing.utils.cosim_api:[279:305]
        ]
        response = self.client.apply_batch_sync(batch, False)[0]
        if response.error:
            logging.error('Spawn carla actor failed. %s', response.error)
            return INVALID_ACTOR_ID

        return response.actor_id

    def destroy_actor(self, actor_id):
        """
        Destroys the given actor.
        """ (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.logging_ecloud:[16:28]
==OpenCDA.opencda.scenario_testing.utils.sim_api:[76:83]
if cloud_config["log_level"] == "error":
    logger.setLevel(logging.ERROR)
elif cloud_config["log_level"] == "warning":
    logger.setLevel(logging.WARNING)
elif cloud_config["log_level"] == "info":
    logger.setLevel(logging.INFO)

# for handler in logging.root.handlers[:]:
#     logging.root.removeHandler(handler)

# logging.basicConfig(filename=LOG_FILENAME,level=logging.DEBUG)
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.core.application.edge.edge_manager:[327:338]
==OpenCDA.opencda.core.application.edge.edge_manager_dyn:[293:298]
        self.spawn_x.clear()
        self.spawn_y.clear()
        self.spawn_v.clear()
        # start_time = time.time()
        # # for i in range(len(self.vehicle_manager_list)):
        # #     self.vehicle_manager_list[i].update_info()
        # #     logger.info(f"Updated location for vehicle {i} - x:{self.vehicle_manager_list[i].vehicle.get_location().x}, y:{self.vehicle_manager_list[i].vehicle.get_location().y}")
        # end_time = time.time()
        # logger.debug("Vehicle Manager Update Info Time: %s" %(end_time - start_time))
        start_time = time.time()
        for i in range(len(self.vehicle_manager_list)): (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.core.application.edge.edge_manager:[34:76]
==OpenCDA.opencda.core.application.edge.edge_manager_dyn:[23:63]
sys.path.append("/home/chattsgpu/Documents/Carla_opencda/TrafficSimulator_eCloud/OpenCDA/")

import opencda.core.plan.drive_profile_plotting as open_plt
from opencda.core.application.edge.astar_test_groupcaps_transform import *
from opencda.core.plan.global_route_planner import GlobalRoutePlanner
from opencda.core.plan.global_route_planner_dao import GlobalRoutePlannerDAO
from opencda.core.plan.local_planner_behavior import RoadOption
from opencda.core.application.edge.transform_utils import *
from opencda.core.application.edge.edge_debug_helper import \
    EdgeDebugHelper

import grpc
import ecloud_pb2 as ecloud
import ecloud_pb2_grpc as rpc

class EdgeManager(object):
    """
    Edge manager. Used to manage all vehicle managers under control of the edge

    Parameters
    ----------
    config_yaml : dict
        The configuration dictionary for edge.

    cav_world : opencda object
        CAV world that stores all CAV information.

    Attributes
    ----------
    pmid : int
        The  platooning manager ID.
    vehicle_manager_list : list
        A list of all vehciel managers within the platoon.
    destination : carla.location
        The destiantion of the current plan.
    """

    def __init__(self, config_yaml, cav_world, carla_client, world_dt=0.03, edge_dt=0.20, search_dt=2.00):

        self.edgeid = str(uuid.uuid1())
        self.vehicle_manager_list = []
        self.target_speed = config_yaml['target_speed'] # kph (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.core.plan.collision_check:[163:168]
==OpenCDA.opencda.core.plan.spline:[241:246]
    for i_s in s:
        ix, iy = sp.calc_position(i_s)
        rx.append(ix)
        ry.append(iy)
        ryaw.append(sp.calc_yaw(i_s)) (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.platoon_joining_town06_carla:[74:81]
==OpenCDA.opencda.scenario_testing.single_town05_cosim:[59:65]
                single_cav.update_info()
                control = single_cav.run_step()
                single_cav.vehicle.apply_control(control)

    finally:
        eval_manager.evaluate() (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.single_intersection_town06_carla:[45:52]
==OpenCDA.opencda.scenario_testing.single_town05_cosim:[45:54]
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        # run steps
        while True:
            scenario_manager.tick()
            transform = single_cav_list[0].vehicle.get_transform() (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_8_car:[115:123]
==OpenCDA.opencda.scenario_testing.multi_2lanefree_carla:[116:124]
        if run_distributed:
            scenario_manager.end() # only dist requires explicit scenario end call

        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_edge_8_car:[109:117]
==OpenCDA.opencda.scenario_testing.multi_2lanefree_carla:[117:126]
        scenario_manager.end()

        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close() (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario:[48:54]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_8_car_2:[47:55]
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world,
                              script_name='ecloud_4lane_scenario',
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        # run steps
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario:[36:48]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_8_car_2:[34:43]
        if opt.record:
            scenario_manager.client. \
                start_recorder("ecloud_4lane.log", True)

        # create single cavs
        single_cav_list = \
            scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        #traffic_manager, bg_veh_list = \
            #scenario_manager.create_traffic_carla()
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_config:[69:75]
==OpenCDA.opencda.scenario_testing.multi_2lanefree_carla:[50:56]
                                                   cav_world=cav_world,
                                                   config_file=config_yaml,
                                                   distributed=run_distributed)

        if opt.record:
            scenario_manager.client. \ (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_edge_16_car:[34:39]
==OpenCDA.opencda.scenario_testing.ecloud_edge_scenario:[30:35]
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town='Town06',
                                                   cav_world=cav_world, (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.single_2lanefree_carla:[56:64]
==OpenCDA.opencda.scenario_testing.single_2lanefree_cosim:[53:62]
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        # run steps

        while True:
            scenario_manager.tick()
            transform = single_cav_list[0].vehicle.get_transform() (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.platoon_stability_2lanefree_carla:[159:167]
==OpenCDA.opencda.scenario_testing.single_town06_carla:[62:70]
    finally:
        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close()
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefreecomplete_carla:[80:87]
==OpenCDA.opencda.scenario_testing.single_2lanefree_cosim:[67:73]
                single_cav.update_info()
                control = single_cav.run_step()
                single_cav.vehicle.apply_control(control)

    finally:
        eval_manager.evaluate() (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefree_carla:[33:40]
==OpenCDA.opencda.scenario_testing.platoon_joining_town06_carla:[28:35]
        if opt.record:
            scenario_manager.client. \
                start_recorder("platoon_joining_2lanefree_carla.log", True)

        # create platoon members
        platoon_list = \
            scenario_manager.create_platoon_manager( (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefree_carla:[47:55]
==OpenCDA.opencda.scenario_testing.single_2lanefree_carla:[46:55]
                                                    spawn_helper_2lanefree)

        # create background traffic in carla
        traffic_manager, bg_veh_list = \
            scenario_manager.create_traffic_carla()

        eval_manager = \
            EvaluationManager(scenario_manager.cav_world, (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefree_carla:[38:45]
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefreecomplete_carla:[35:42]
        platoon_list = \
            scenario_manager.create_platoon_manager(
                map_helper=map_api.spawn_helper_2lanefree,
                data_dump=False)

        # create single cavs
        single_cav_list = \ (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.cooperception_datadump_town06_carla:[62:67]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_128_car:[102:109]
            scenario_manager.tick()
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location( (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.single_town05_cosim:[17:26]
==OpenCDA.opencda.scenario_testing.single_town06_cosim:[17:26]
    try:
        scenario_params = load_yaml(config_yaml)

        # create CAV world
        cav_world = CavWorld(opt.apply_ml)

        # sumo conifg file path
        current_path = os.path.dirname(os.path.realpath(__file__))
        sumo_cfg = os.path.join(current_path, (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.single_town06_carla:[42:49]
==OpenCDA.opencda.scenario_testing.single_town06_cosim:[45:54]
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        # run steps
        while True:
            scenario_manager.tick()
            transform = single_cav_list[0].vehicle.get_transform() (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefree_carla:[82:89]
==OpenCDA.opencda.scenario_testing.single_town06_cosim:[59:65]
                single_cav.update_info()
                control = single_cav.run_step()
                single_cav.vehicle.apply_control(control)

    finally:
        eval_manager.evaluate() (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car:[102:109]
==OpenCDA.opencda.scenario_testing.single_intersection_town06_carla:[50:55]
            scenario_manager.tick()
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location( (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car:[39:47]
==OpenCDA.opencda.scenario_testing.multi_2lanefree_carla:[26:34]
    try:
        scenario_params = load_yaml(config_yaml)

        # sanity checks...
        assert('edge_list' not in scenario_params['scenario']) # do NOT use this template for edge scenarios
        assert('sync_mode' in scenario_params['world'] and scenario_params['world']['sync_mode'] == True)
        assert(scenario_params['world']['fixed_delta_seconds'] == 0.03 or scenario_params['world']['fixed_delta_seconds'] == 0.05)
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car:[118:126]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_8_car_2:[92:100]
        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close(single_cav_list[0])

        for v in bg_veh_list: (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist:[27:32]
==OpenCDA.opencda.scenario_testing.ecloud_edge_8_car:[34:39]
        scenario_manager = sim_api.ScenarioManager(scenario_params,
                                                   opt.apply_ml,
                                                   opt.version,
                                                   town='Town06',
                                                   cav_world=cav_world, (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist:[57:70]
==OpenCDA.opencda.scenario_testing.single_2lanefree_carla:[62:67]
            scenario_manager.tick()
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location( (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_8car_scenario:[71:78]
==OpenCDA.opencda.scenario_testing.platoon_joining_2lanefree_cosim:[81:87]
                single_cav.update_info()
                control = single_cav.run_step()
                single_cav.vehicle.apply_control(control)

    finally:
        eval_manager.evaluate() (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_8car_scenario:[48:54]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist:[47:55]
        eval_manager = \
            EvaluationManager(scenario_manager.cav_world,
                              script_name='ecloud_4lane_scenario',
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator() (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_8car_scenario:[36:48]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist:[34:43]
        if opt.record:
            scenario_manager.client. \
                start_recorder("ecloud_4lane.log", True)

        # create single cavs
        single_cav_list = \
            scenario_manager.create_vehicle_manager(application=['single'])

        # create background traffic in carla
        #traffic_manager, bg_veh_list = \
            #scenario_manager.create_traffic_carla()
 (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car_perception:[77:84]
==OpenCDA.opencda.scenario_testing.multi_2lanefree_carla:[75:83]
                              current_time=scenario_params['current_time'])

        spectator = scenario_manager.world.get_spectator()
        # run steps
        step = 0
        flag = True
        while flag: (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car_perception:[39:47]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_config:[43:52]
    try:
        scenario_params = load_yaml(config_yaml)

        # sanity checks...
        assert('edge_list' not in scenario_params['scenario']) # do NOT use this template for edge scenarios
        assert('sync_mode' in scenario_params['world'] and scenario_params['world']['sync_mode'] == True)
        assert(scenario_params['world']['fixed_delta_seconds'] == 0.03 or scenario_params['world']['fixed_delta_seconds'] == 0.05)

        # spectator configs (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car_perception:[116:125]
==OpenCDA.opencda.scenario_testing.ecloud_edge_scenario:[102:110]
        scenario_manager.end()

        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close(single_cav_list[0]) (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car_perception:[102:109]
==OpenCDA.opencda.scenario_testing.single_town06_carla:[47:52]
                scenario_manager.tick()

            # same for dist / non-dist - only required for specate
            transform = single_cav_list[0].vehicle.get_transform()
            spectator.set_transform(carla.Transform(
                transform.location +
                carla.Location( (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist:[92:100]
==OpenCDA.opencda.scenario_testing.ecloud_4lane_scenario_dist_32_car_perception:[118:126]
        eval_manager.evaluate()

        if opt.record:
            scenario_manager.client.stop_recorder()

        scenario_manager.close(single_cav_list[0])

        for v in bg_veh_list: (duplicate-code)
opencda/core/common/misc.py:1:0: R0801: Similar lines in 2 files
==OpenCDA.opencda.co_simulation.sumo_integration.carla_simulation:[47:52]
==OpenCDA.opencda.scenario_testing.utils.cosim_api:[75:80]
            if landmark.id != '':
                traffic_ligth = self.world.get_traffic_light(landmark)
                if traffic_ligth is not None:
                    self._tls[landmark.id] = traffic_ligth
                else: (duplicate-code)

-----------------------------------
Your code has been rated at 5.31/10

