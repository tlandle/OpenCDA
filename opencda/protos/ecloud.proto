syntax = "proto3";
import "google/protobuf/timestamp.proto";

package ecloud;

message Empty {}

message Timestamps {
  int32 tick_id = 1;
  google.protobuf.Timestamp client_start_tstamp = 2; // when client start process
  google.protobuf.Timestamp client_end_tstamp = 3; // when client done process
}

message Tick {
  int32 tick_id = 1; // use as bool for server
  Command command = 2;
  int64 last_client_duration_ns = 3; // total time of last client. latency is: ( receipt_time - start time - duration )
}

enum Command {
  TICK = 0;
  END = 1;
  REQUEST_DEBUG_INFO = 2;
  PULL_WAYPOINTS_AND_TICK = 3;
}

enum VehicleState {
  REGISTERING = 0;
  CARLA_UPDATE = 1;
  UPDATE_INFO_OK = 2;
  GET_DESTINATION = 3;
  TICK_OK = 4; // regular OK / ack
  TICK_DONE = 5; // simulation ended --> include all Debug Info with this update
  OK = 6;
  ERROR = 7;
  DEBUG_INFO_UPDATE = 8;
}

message SimulationInfo {
  int32 vehicle_index = 1; // vehicle_uid
  string test_scenario = 2;
  string application = 3;
  string version = 4;
  bool is_edge = 5;
  string vehicle_machine_ip = 6; // TODO: multiple
  string carla_ip = 7;
}

message WaypointRequest {
  int32 vehicle_index = 1;
}

message EdgeWaypoints {
  repeated WaypointBuffer all_waypoint_buffers = 1;
}

message WaypointBuffer {
  int32 vehicle_index = 1; // vehicle_uid
  repeated Waypoint waypoint_buffer = 2;
}

message Waypoint {
  string id = 1;
  Transform transform = 2;
  int32 road_id = 3;
  int32 section_id = 4;
  int32 lane_id = 5;
  float s = 6;
  bool is_junction = 7;
  float lane_width = 8;
  int32 lane_change = 9; // unused - enum if needed
  int32 lane_type = 10; // unused - enum if needed
  int32 right_lane_marking = 11; // unused - enum if needed
  int32 left_lane_marking = 12; // unused - enum if needed
}

message Transform {
  Location location = 1;
  Rotation rotation = 2;
}

message Location {
  float x = 1;
  float y = 2;
  float z = 3;
}

message Rotation {
  float yaw = 1;
  float pitch = 2;
  float roll = 3;
}

message Velocity {
  float x = 1;
  float y = 2;
  float z = 3;
}

message LocDebugHelper {
    repeated float gnss_x = 1;
    repeated float gnss_y = 2;
    repeated float gnss_yaw = 3;
    repeated float gnss_spd = 4;

    repeated float filter_x = 5;
    repeated float filter_y = 6;
    repeated float filter_yaw = 7;
    repeated float filter_spd = 8;

    repeated float gt_x = 9;
    repeated float gt_y = 10;
    repeated float gt_yaw= 11;
    repeated float gt_spd = 12;
}

message AgentDebugHelper {
    repeated float time_list = 1;
}

message PlanerDebugHelper {
    repeated float speed_list = 1;
    repeated float acc_list = 2;
    repeated float ttc_list = 3;
    repeated AgentDebugHelper agent_step_list = 4;
}

message ClientDebugHelper {
    repeated float perception_time_list = 1;
    repeated float localization_time_list = 2;
    repeated float update_info_time_list = 3;
    repeated float agent_update_info_time_list = 4;
    repeated float controller_update_info_time_list = 5;
    repeated float agent_step_time_list = 6;
    repeated float vehicle_step_time_list = 7;
    repeated float controller_step_time_list = 8;
    repeated float control_time_list = 9;
    repeated Timestamps timestamps_list = 10;
}

message RegistrationInfo {
  VehicleState vehicle_state = 1;
  int32 vehicle_index = 2;
  string vid = 3;
  int32 actor_id = 4;
  string container_name = 5;
  string vehicle_ip = 6;
  int32 vehicle_port = 7;
}

message VehicleUpdate {
  int32 tick_id = 1;
  int32 vehicle_index = 2;
  VehicleState vehicle_state = 3;
  LocDebugHelper loc_debug_helper = 4;
  PlanerDebugHelper planer_debug_helper = 5;
  ClientDebugHelper client_debug_helper = 6;
  Transform transform = 7;
  Velocity velocity = 8;
  int64 duration_ns = 9;
}

message EcloudResponse {
    int32 tick_id = 1;
    repeated VehicleUpdate vehicle_update = 2;
}

service Ecloud {
  // PUSH
  rpc PushTick(Tick) returns (Empty);
  // CLIENT
  rpc Client_SendUpdate (VehicleUpdate) returns (Empty);
  rpc Client_RegisterVehicle (RegistrationInfo) returns (SimulationInfo);
  rpc Client_GetWaypoints(WaypointRequest) returns (WaypointBuffer);
  // SERVER
  rpc Server_DoTick(Tick) returns (Empty);
  rpc Server_StartScenario(SimulationInfo) returns (Empty);
  rpc Server_EndScenario(Empty) returns (Empty);
  rpc Server_GetVehicleUpdates(Empty) returns (EcloudResponse);
  rpc Server_PushEdgeWaypoints(EdgeWaypoints) returns (Empty);
}
